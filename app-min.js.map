{"version":3,"file":"app-min.js","sources":["js/lib/vendor/es5-shim.js","js/lib/vendor/lodash.js","js/lib/vendor/jquery.js","js/lib/vendor/Chitin.js","js/Storable.js","js/Storage.js","js/Decks.js","js/Preferences.js","js/Widget/Abstract.js","js/Widget/LangSelect.js","js/lib/vendor/jquery.form2JSON.js","js/Widget/Pristine.js","js/Widget/Nav.js","js/Widget/Start.js","js/Widget/EditCard.js","js/Widget/EditDeckCards.js","js/Widget/EditDeck.js","js/Widget/DeckList.js","js/Widget/Explore/Abstract.js","js/Widget/Explore/Meditation.js","js/Widget/Explore/Trial/Abstract.js","js/Widget/Explore/Trial/Test.js","js/Widget/Explore/Trial/Exam.js","js/Widget/Score.js","js/Widget/Deck.js","js/Widget/Settings.js","js/Widget/Dump.js","js/Widget/Root.js","js/locale/en/locale.js","js/locale/ru/locale.js","js/locale/locale.js","js/PredefinedDecks.js","js/app.js"],"names":[],"mappings":"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","sourcesContent":["\n(function(o){\"function\"==typeof define?define('lib/vendor/es5-shim',o):\"function\"==typeof YUI?YUI.add(\"es5\",o):o()})(function(){function o(){}function v(a){a=+a;a!==a?a=0:0!==a&&(a!==1/0&&a!==-(1/0))&&(a=(0<a||-1)*Math.floor(Math.abs(a)));return a}function s(a){var b=typeof a;return null===a||\"undefined\"===b||\"boolean\"===b||\"number\"===b||\"string\"===b}Function.prototype.bind||(Function.prototype.bind=function(a){var b=this;if(\"function\"!=typeof b)throw new TypeError(\"Function.prototype.bind called on incompatible \"+b);\nvar d=q.call(arguments,1),c=function(){if(this instanceof c){var e=b.apply(this,d.concat(q.call(arguments)));return Object(e)===e?e:this}return b.apply(a,d.concat(q.call(arguments)))};b.prototype&&(o.prototype=b.prototype,c.prototype=new o,o.prototype=null);return c});var k=Function.prototype.call,p=Object.prototype,q=Array.prototype.slice,h=k.bind(p.toString),t=k.bind(p.hasOwnProperty);t(p,\"__defineGetter__\")&&(k.bind(p.__defineGetter__),k.bind(p.__defineSetter__),k.bind(p.__lookupGetter__),k.bind(p.__lookupSetter__));\nif(2!=[1,2].splice(0).length){var y=Array.prototype.splice;Array.prototype.splice=function(a,b){return arguments.length?y.apply(this,[a===void 0?0:a,b===void 0?this.length-a:b].concat(q.call(arguments,2))):[]}}if(1!=[].unshift(0)){var z=Array.prototype.unshift;Array.prototype.unshift=function(){z.apply(this,arguments);return this.length}}Array.isArray||(Array.isArray=function(a){return h(a)==\"[object Array]\"});var k=Object(\"a\"),l=\"a\"!=k[0]||!(0 in k);Array.prototype.forEach||(Array.prototype.forEach=\nfunction(a,b){var d=n(this),c=l&&h(this)==\"[object String]\"?this.split(\"\"):d,e=-1,f=c.length>>>0;if(h(a)!=\"[object Function]\")throw new TypeError;for(;++e<f;)e in c&&a.call(b,c[e],e,d)});Array.prototype.map||(Array.prototype.map=function(a,b){var d=n(this),c=l&&h(this)==\"[object String]\"?this.split(\"\"):d,e=c.length>>>0,f=Array(e);if(h(a)!=\"[object Function]\")throw new TypeError(a+\" is not a function\");for(var g=0;g<e;g++)g in c&&(f[g]=a.call(b,c[g],g,d));return f});Array.prototype.filter||(Array.prototype.filter=\nfunction(a,b){var d=n(this),c=l&&h(this)==\"[object String]\"?this.split(\"\"):d,e=c.length>>>0,f=[],g;if(h(a)!=\"[object Function]\")throw new TypeError(a+\" is not a function\");for(var i=0;i<e;i++)if(i in c){g=c[i];a.call(b,g,i,d)&&f.push(g)}return f});Array.prototype.every||(Array.prototype.every=function(a,b){var d=n(this),c=l&&h(this)==\"[object String]\"?this.split(\"\"):d,e=c.length>>>0;if(h(a)!=\"[object Function]\")throw new TypeError(a+\" is not a function\");for(var f=0;f<e;f++)if(f in c&&!a.call(b,c[f],\nf,d))return false;return true});Array.prototype.some||(Array.prototype.some=function(a,b){var d=n(this),c=l&&h(this)==\"[object String]\"?this.split(\"\"):d,e=c.length>>>0;if(h(a)!=\"[object Function]\")throw new TypeError(a+\" is not a function\");for(var f=0;f<e;f++)if(f in c&&a.call(b,c[f],f,d))return true;return false});Array.prototype.reduce||(Array.prototype.reduce=function(a){var b=n(this),d=l&&h(this)==\"[object String]\"?this.split(\"\"):b,c=d.length>>>0;if(h(a)!=\"[object Function]\")throw new TypeError(a+\n\" is not a function\");if(!c&&arguments.length==1)throw new TypeError(\"reduce of empty array with no initial value\");var e=0,f;if(arguments.length>=2)f=arguments[1];else{do{if(e in d){f=d[e++];break}if(++e>=c)throw new TypeError(\"reduce of empty array with no initial value\");}while(1)}for(;e<c;e++)e in d&&(f=a.call(void 0,f,d[e],e,b));return f});Array.prototype.reduceRight||(Array.prototype.reduceRight=function(a){var b=n(this),d=l&&h(this)==\"[object String]\"?this.split(\"\"):b,c=d.length>>>0;if(h(a)!=\n\"[object Function]\")throw new TypeError(a+\" is not a function\");if(!c&&arguments.length==1)throw new TypeError(\"reduceRight of empty array with no initial value\");var e,c=c-1;if(arguments.length>=2)e=arguments[1];else{do{if(c in d){e=d[c--];break}if(--c<0)throw new TypeError(\"reduceRight of empty array with no initial value\");}while(1)}do c in this&&(e=a.call(void 0,e,d[c],c,b));while(c--);return e});if(!Array.prototype.indexOf||-1!=[0,1].indexOf(1,2))Array.prototype.indexOf=function(a){var b=l&&\nh(this)==\"[object String]\"?this.split(\"\"):n(this),d=b.length>>>0;if(!d)return-1;var c=0;arguments.length>1&&(c=v(arguments[1]));for(c=c>=0?c:Math.max(0,d+c);c<d;c++)if(c in b&&b[c]===a)return c;return-1};if(!Array.prototype.lastIndexOf||-1!=[0,1].lastIndexOf(0,-3))Array.prototype.lastIndexOf=function(a){var b=l&&h(this)==\"[object String]\"?this.split(\"\"):n(this),d=b.length>>>0;if(!d)return-1;var c=d-1;arguments.length>1&&(c=Math.min(c,v(arguments[1])));for(c=c>=0?c:d-Math.abs(c);c>=0;c--)if(c in b&&\na===b[c])return c;return-1};if(!Object.keys){var w=!0,x=\"toString toLocaleString valueOf hasOwnProperty isPrototypeOf propertyIsEnumerable constructor\".split(\" \"),A=x.length,r;for(r in{toString:null})w=!1;Object.keys=function(a){if(typeof a!=\"object\"&&typeof a!=\"function\"||a===null)throw new TypeError(\"Object.keys called on a non-object\");var b=[],d;for(d in a)t(a,d)&&b.push(d);if(w)for(d=0;d<A;d++){var c=x[d];t(a,c)&&b.push(c)}return b}}if(!Date.prototype.toISOString||-1===(new Date(-621987552E5)).toISOString().indexOf(\"-000001\"))Date.prototype.toISOString=\nfunction(){var a,b,d,c;if(!isFinite(this))throw new RangeError(\"Date.prototype.toISOString called on non-finite value.\");c=this.getUTCFullYear();a=this.getUTCMonth();c=c+Math.floor(a/12);a=[(a%12+12)%12+1,this.getUTCDate(),this.getUTCHours(),this.getUTCMinutes(),this.getUTCSeconds()];c=(c<0?\"-\":c>9999?\"+\":\"\")+(\"00000\"+Math.abs(c)).slice(0<=c&&c<=9999?-4:-6);for(b=a.length;b--;){d=a[b];d<10&&(a[b]=\"0\"+d)}return c+\"-\"+a.slice(0,2).join(\"-\")+\"T\"+a.slice(2).join(\":\")+\".\"+(\"000\"+this.getUTCMilliseconds()).slice(-3)+\n\"Z\"};r=!1;try{r=Date.prototype.toJSON&&null===(new Date(NaN)).toJSON()&&-1!==(new Date(-621987552E5)).toJSON().indexOf(\"-000001\")&&Date.prototype.toJSON.call({toISOString:function(){return true}})}catch(H){}r||(Date.prototype.toJSON=function(){var a=Object(this),b;a:if(s(a))b=a;else{b=a.valueOf;if(typeof b===\"function\"){b=b.call(a);if(s(b))break a}b=a.toString;if(typeof b===\"function\"){b=b.call(a);if(s(b))break a}throw new TypeError;}if(typeof b===\"number\"&&!isFinite(b))return null;b=a.toISOString;\nif(typeof b!=\"function\")throw new TypeError(\"toISOString property is not callable\");return b.call(a)});var g=Date,m=function(a,b,d,c,e,f,h){var i=arguments.length;if(this instanceof g){i=i==1&&String(a)===a?new g(m.parse(a)):i>=7?new g(a,b,d,c,e,f,h):i>=6?new g(a,b,d,c,e,f):i>=5?new g(a,b,d,c,e):i>=4?new g(a,b,d,c):i>=3?new g(a,b,d):i>=2?new g(a,b):i>=1?new g(a):new g;i.constructor=m;return i}return g.apply(this,arguments)},u=function(a,b){var d=b>1?1:0;return B[b]+Math.floor((a-1969+d)/4)-Math.floor((a-\n1901+d)/100)+Math.floor((a-1601+d)/400)+365*(a-1970)},C=RegExp(\"^(\\\\d{4}|[+-]\\\\d{6})(?:-(\\\\d{2})(?:-(\\\\d{2})(?:T(\\\\d{2}):(\\\\d{2})(?::(\\\\d{2})(?:\\\\.(\\\\d{3}))?)?(Z|(?:([-+])(\\\\d{2}):(\\\\d{2})))?)?)?)?$\"),B=[0,31,59,90,120,151,181,212,243,273,304,334,365],j;for(j in g)m[j]=g[j];m.now=g.now;m.UTC=g.UTC;m.prototype=g.prototype;m.prototype.constructor=m;m.parse=function(a){var b=C.exec(a);if(b){var d=Number(b[1]),c=Number(b[2]||1)-1,e=Number(b[3]||1)-1,f=Number(b[4]||0),h=Number(b[5]||0),i=Number(b[6]||\n0),j=Number(b[7]||0),m=!b[4]||b[8]?0:Number(new g(1970,0)),k=b[9]===\"-\"?1:-1,l=Number(b[10]||0),b=Number(b[11]||0);if(f<(h>0||i>0||j>0?24:25)&&h<60&&i<60&&j<1E3&&c>-1&&c<12&&l<24&&b<60&&e>-1&&e<u(d,c+1)-u(d,c)){d=((u(d,c)+e)*24+f+l*k)*60;d=((d+h+b*k)*60+i)*1E3+j+m;if(-864E13<=d&&d<=864E13)return d}return NaN}return g.parse.apply(this,arguments)};Date=m;Date.now||(Date.now=function(){return(new Date).getTime()});if(\"0\".split(void 0,0).length){var D=String.prototype.split;String.prototype.split=function(a,\nb){return a===void 0&&b===0?[]:D.apply(this,arguments)}}if(\"\".substr&&\"b\"!==\"0b\".substr(-1)){var E=String.prototype.substr;String.prototype.substr=function(a,b){return E.call(this,a<0?(a=this.length+a)<0?0:a:a,b)}}j=\"\\t\\n\\x0B\\f\\r \\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029\\ufeff\";if(!String.prototype.trim||j.trim()){j=\"[\"+j+\"]\";var F=RegExp(\"^\"+j+j+\"*\"),G=RegExp(j+j+\"*$\");String.prototype.trim=function(){if(this===void 0||this===\nnull)throw new TypeError(\"can't convert \"+this+\" to object\");return String(this).replace(F,\"\").replace(G,\"\")}}var n=function(a){if(a==null)throw new TypeError(\"can't convert \"+a+\" to object\");return Object(a)}});","\n/**\n * @license\n * Lo-Dash 1.2.0 (Custom Build) lodash.com/license\n * Build: `lodash -o ./dist/lodash.compat.js`\n * Underscore.js 1.4.4 underscorejs.org/LICENSE\n */\n;(function(n){function t(r){function a(n){return n&&typeof n==\"object\"&&!Z(n)&&Qt.call(n,\"__wrapped__\")?n:new U(n)}function F(n){var t=n.length,e=t>=l;if(e)for(var r={},u=-1;++u<t;){var a=f+n[u];(r[a]||(r[a]=[])).push(n[u])}return function(t){if(e){var u=f+t;return r[u]&&-1<_t(r[u],t)}return-1<_t(n,t)}}function R(n){return n.charCodeAt(0)}function T(n,t){var e=n.b,r=t.b;if(n=n.a,t=t.a,n!==t){if(n>t||typeof n==\"undefined\")return 1;if(n<t||typeof t==\"undefined\")return-1}return e<r?-1:1}function D(n,t,e,r){function u(){var r=arguments,l=o?this:t;\nreturn a||(n=t[i]),e.length&&(r=r.length?(r=le.call(r),f?r.concat(e):e.concat(r)):e),this instanceof u?(V.prototype=n.prototype,l=new V,V.prototype=null,r=n.apply(l,r),et(r)?r:l):n.apply(l,r)}var a=tt(n),o=!e,i=t;if(o){var f=r;e=t}else if(!a){if(!r)throw new Dt;t=n}return u}function z(){for(var n,t={g:C,b:\"k(m)\",c:\"\",e:\"m\",f:\"\",h:\"\",i:!0,j:!!de},e=0;n=arguments[e];e++)for(var r in n)t[r]=n[r];if(n=t.a,t.d=/^[^,]+/.exec(n)[0],e=$t,r=\"var i,m=\"+t.d+\",u=\"+t.e+\";if(!m)return u;\"+t.h+\";\",t.b?(r+=\"var n=m.length;i=-1;if(\"+t.b+\"){\",ve.unindexedChars&&(r+=\"if(l(m)){m=m.split('')}\"),r+=\"while(++i<n){\"+t.f+\"}}else{\"):ve.nonEnumArgs&&(r+=\"var n=m.length;i=-1;if(n&&j(m)){while(++i<n){i+='';\"+t.f+\"}}else{\"),ve.enumPrototypes&&(r+=\"var v=typeof m=='function';\"),t.i&&t.j)r+=\"var s=-1,t=r[typeof m]?o(m):[],n=t.length;while(++s<n){i=t[s];\",ve.enumPrototypes&&(r+=\"if(!(v&&i=='prototype')){\"),r+=t.f,ve.enumPrototypes&&(r+=\"}\"),r+=\"}\";\nelse if(r+=\"for(i in m){\",(ve.enumPrototypes||t.i)&&(r+=\"if(\",ve.enumPrototypes&&(r+=\"!(v&&i=='prototype')\"),ve.enumPrototypes&&t.i&&(r+=\"&&\"),t.i&&(r+=\"h.call(m,i)\"),r+=\"){\"),r+=t.f+\";\",(ve.enumPrototypes||t.i)&&(r+=\"}\"),r+=\"}\",ve.nonEnumShadows){r+=\"var f=m.constructor;\";for(var u=0;7>u;u++)r+=\"i='\"+t.g[u]+\"';if(\",\"constructor\"==t.g[u]&&(r+=\"!(f&&f.prototype===m)&&\"),r+=\"h.call(m,i)){\"+t.f+\"}\"}return(t.b||ve.nonEnumArgs)&&(r+=\"}\"),r+=t.c+\";return u\",e(\"h,j,k,l,o,p,r\",\"return function(\"+n+\"){\"+r+\"}\")(Qt,Q,Z,ut,de,a,$)\n}function L(n){return\"\\\\\"+q[n]}function K(n){return _e[n]}function M(n){return typeof n.toString!=\"function\"&&typeof(n+\"\")==\"string\"}function U(n){this.__wrapped__=n}function V(){}function G(n){var t=!1;if(!n||Zt.call(n)!=A||!ve.argsClass&&Q(n))return t;var e=n.constructor;return(tt(e)?e instanceof e:ve.nodeClass||!M(n))?ve.ownLast?(ke(n,function(n,e,r){return t=Qt.call(r,e),!1}),!0===t):(ke(n,function(n,e){t=e}),!1===t||Qt.call(n,t)):t}function H(n,t,e){t||(t=0),typeof e==\"undefined\"&&(e=n?n.length:0);\nvar r=-1;e=e-t||0;for(var u=It(0>e?0:e);++r<e;)u[r]=n[t+r];return u}function J(n){return we[n]}function Q(n){return Zt.call(n)==j}function W(n,t,r,u,o,i){var f=n;if(typeof t==\"function\"&&(u=r,r=t,t=!1),typeof r==\"function\"){if(r=typeof u==\"undefined\"?r:a.createCallback(r,u,1),f=r(f),typeof f!=\"undefined\")return f;f=n}if(u=et(f)){var l=Zt.call(f);if(!N[l]||!ve.nodeClass&&M(f))return f;var c=Z(f)}if(!u||!t)return u?c?H(f):Ce({},f):f;switch(u=se[l],l){case x:case O:return new u(+f);case S:case P:return new u(f);\ncase I:return u(f.source,h.exec(f))}for(o||(o=[]),i||(i=[]),l=o.length;l--;)if(o[l]==n)return i[l];return f=c?u(f.length):{},c&&(Qt.call(n,\"index\")&&(f.index=n.index),Qt.call(n,\"input\")&&(f.input=n.input)),o.push(n),i.push(f),(c?pt:xe)(n,function(n,u){f[u]=W(n,t,r,e,o,i)}),f}function X(n){var t=[];return ke(n,function(n,e){tt(n)&&t.push(e)}),t.sort()}function Y(n){for(var t=-1,e=de(n),r=e.length,u={};++t<r;){var a=e[t];u[n[a]]=a}return u}function Z(n){return ve.argsObject&&n instanceof It||(te?te(n):Zt.call(n)==k)\n}function nt(n,t,e,r,u,o){var f=e===i;if(typeof e==\"function\"&&!f){e=a.createCallback(e,r,2);var l=e(n,t);if(typeof l!=\"undefined\")return!!l}if(n===t)return 0!==n||1/n==1/t;var c=typeof n,p=typeof t;if(n===n&&(!n||\"function\"!=c&&\"object\"!=c)&&(!t||\"function\"!=p&&\"object\"!=p))return!1;if(null==n||null==t)return n===t;if(p=Zt.call(n),c=Zt.call(t),p==j&&(p=A),c==j&&(c=A),p!=c)return!1;switch(p){case x:case O:return+n==+t;case S:return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case I:case P:return n==Tt(t)}if(c=p==k,!c){if(Qt.call(n,\"__wrapped__\")||Qt.call(t,\"__wrapped__\"))return nt(n.__wrapped__||n,t.__wrapped__||t,e,r,u,o);\nif(p!=A||!ve.nodeClass&&(M(n)||M(t)))return!1;var p=!ve.argsObject&&Q(n)?Ft:n.constructor,s=!ve.argsObject&&Q(t)?Ft:t.constructor;if(p!=s&&(!tt(p)||!(p instanceof p&&tt(s)&&s instanceof s)))return!1}for(u||(u=[]),o||(o=[]),p=u.length;p--;)if(u[p]==n)return o[p]==t;var v=0,l=!0;if(u.push(n),o.push(t),c){if(p=n.length,v=t.length,l=v==n.length,!l&&!f)return l;for(;v--;)if(c=p,s=t[v],f)for(;c--&&!(l=nt(n[c],s,e,r,u,o)););else if(!(l=nt(n[v],s,e,r,u,o)))break;return l}return ke(t,function(t,a,i){return Qt.call(i,a)?(v++,l=Qt.call(n,a)&&nt(n[a],t,e,r,u,o)):void 0\n}),l&&!f&&ke(n,function(n,t,e){return Qt.call(e,t)?l=-1<--v:void 0}),l}function tt(n){return typeof n==\"function\"}function et(n){return n?$[typeof n]:!1}function rt(n){return typeof n==\"number\"||Zt.call(n)==S}function ut(n){return typeof n==\"string\"||Zt.call(n)==P}function at(n,t,e){var r=arguments,u=0,o=2;if(!et(n))return n;if(e===i)var f=r[3],l=r[4],c=r[5];else l=[],c=[],typeof e!=\"number\"&&(o=r.length),3<o&&\"function\"==typeof r[o-2]?f=a.createCallback(r[--o-1],r[o--],2):2<o&&\"function\"==typeof r[o-1]&&(f=r[--o]);\nfor(;++u<o;)(Z(r[u])?pt:xe)(r[u],function(t,e){var r,u,a=t,o=n[e];if(t&&((u=Z(t))||Oe(t))){for(a=l.length;a--;)if(r=l[a]==t){o=c[a];break}if(!r){var p;f&&(a=f(o,t),p=typeof a!=\"undefined\")&&(o=a),p||(o=u?Z(o)?o:[]:Oe(o)?o:{}),l.push(t),c.push(o),p||(o=at(o,t,i,f,l,c))}}else f&&(a=f(o,t),typeof a==\"undefined\"&&(a=t)),typeof a!=\"undefined\"&&(o=a);n[e]=o});return n}function ot(n){for(var t=-1,e=de(n),r=e.length,u=It(r);++t<r;)u[t]=n[e[t]];return u}function it(n,t,e){var r=-1,u=n?n.length:0,a=!1;return e=(0>e?ae(0,u+e):e)||0,typeof u==\"number\"?a=-1<(ut(n)?n.indexOf(t,e):_t(n,t,e)):be(n,function(n){return++r<e?void 0:!(a=n===t)\n}),a}function ft(n,t,e){var r=!0;if(t=a.createCallback(t,e),Z(n)){e=-1;for(var u=n.length;++e<u&&(r=!!t(n[e],e,n)););}else be(n,function(n,e,u){return r=!!t(n,e,u)});return r}function lt(n,t,e){var r=[];if(t=a.createCallback(t,e),Z(n)){e=-1;for(var u=n.length;++e<u;){var o=n[e];t(o,e,n)&&r.push(o)}}else be(n,function(n,e,u){t(n,e,u)&&r.push(n)});return r}function ct(n,t,e){if(t=a.createCallback(t,e),!Z(n)){var r;return be(n,function(n,e,u){return t(n,e,u)?(r=n,!1):void 0}),r}e=-1;for(var u=n.length;++e<u;){var o=n[e];\nif(t(o,e,n))return o}}function pt(n,t,e){if(t&&typeof e==\"undefined\"&&Z(n)){e=-1;for(var r=n.length;++e<r&&!1!==t(n[e],e,n););}else be(n,t,e);return n}function st(n,t,e){var r=-1,u=n?n.length:0,o=It(typeof u==\"number\"?u:0);if(t=a.createCallback(t,e),Z(n))for(;++r<u;)o[r]=t(n[r],r,n);else be(n,function(n,e,u){o[++r]=t(n,e,u)});return o}function vt(n,t,e){var r=-1/0,u=r;if(!t&&Z(n)){e=-1;for(var o=n.length;++e<o;){var i=n[e];i>u&&(u=i)}}else t=!t&&ut(n)?R:a.createCallback(t,e),be(n,function(n,e,a){e=t(n,e,a),e>r&&(r=e,u=n)\n});return u}function gt(n,t,e,r){var u=3>arguments.length;if(t=a.createCallback(t,r,4),Z(n)){var o=-1,i=n.length;for(u&&(e=n[++o]);++o<i;)e=t(e,n[o],o,n)}else be(n,function(n,r,a){e=u?(u=!1,n):t(e,n,r,a)});return e}function ht(n,t,e,r){var u=n,o=n?n.length:0,i=3>arguments.length;if(typeof o!=\"number\")var f=de(n),o=f.length;else ve.unindexedChars&&ut(n)&&(u=n.split(\"\"));return t=a.createCallback(t,r,4),pt(n,function(n,r,a){r=f?f[--o]:--o,e=i?(i=!1,u[r]):t(e,u[r],r,a)}),e}function yt(n,t,e){var r;if(t=a.createCallback(t,e),Z(n)){e=-1;\nfor(var u=n.length;++e<u&&!(r=t(n[e],e,n)););}else be(n,function(n,e,u){return!(r=t(n,e,u))});return!!r}function mt(n){for(var t=-1,e=n?n.length:0,r=Gt.apply(zt,le.call(arguments,1)),r=F(r),u=[];++t<e;){var a=n[t];r(a)||u.push(a)}return u}function dt(n,t,e){if(n){var r=0,u=n.length;if(typeof t!=\"number\"&&null!=t){var o=-1;for(t=a.createCallback(t,e);++o<u&&t(n[o],o,n);)r++}else if(r=t,null==r||e)return n[0];return H(n,0,oe(ae(0,r),u))}}function bt(n,t,e,r){var u=-1,o=n?n.length:0,i=[];for(typeof t!=\"boolean\"&&null!=t&&(r=e,e=t,t=!1),null!=e&&(e=a.createCallback(e,r));++u<o;)r=n[u],e&&(r=e(r,u,n)),Z(r)?Wt.apply(i,t?r:bt(r)):i.push(r);\nreturn i}function _t(n,t,e){var r=-1,u=n?n.length:0;if(typeof e==\"number\")r=(0>e?ae(0,u+e):e||0)-1;else if(e)return r=Ct(n,t),n[r]===t?r:-1;for(;++r<u;)if(n[r]===t)return r;return-1}function wt(n,t,e){if(typeof t!=\"number\"&&null!=t){var r=0,u=-1,o=n?n.length:0;for(t=a.createCallback(t,e);++u<o&&t(n[u],u,n);)r++}else r=null==t||e?1:ae(0,t);return H(n,r)}function Ct(n,t,e,r){var u=0,o=n?n.length:u;for(e=e?a.createCallback(e,r,1):Et,t=e(t);u<o;)r=u+o>>>1,e(n[r])<t?u=r+1:o=r;return u}function jt(n,t,e,r){var u=-1,o=n?n.length:0,i=[],c=i;\ntypeof t!=\"boolean\"&&null!=t&&(r=e,e=t,t=!1);var p=!t&&o>=l;if(p)var s={};for(null!=e&&(c=[],e=a.createCallback(e,r));++u<o;){r=n[u];var v=e?e(r,u,n):r;if(p)var g=f+v,g=s[g]?!(c=s[g]):c=s[g]=[];(t?!u||c[c.length-1]!==v:g||0>_t(c,v))&&((e||p)&&c.push(v),i.push(r))}return i}function kt(n,t){for(var e=-1,r=n?n.length:0,u={};++e<r;){var a=n[e];t?u[a]=t[e]:u[a[0]]=a[1]}return u}function xt(n,t){return ve.fastBind||ne&&2<arguments.length?ne.call.apply(ne,arguments):D(n,t,le.call(arguments,2))}function Ot(n){var t=le.call(arguments,1);\nreturn Yt(function(){n.apply(e,t)},1)}function Et(n){return n}function St(n){pt(X(n),function(t){var e=a[t]=n[t];a.prototype[t]=function(){var n=this.__wrapped__,t=[n];return Wt.apply(t,arguments),t=e.apply(a,t),n&&typeof n==\"object\"&&n==t?this:new U(t)}})}function At(){return this.__wrapped__}r=r?B.defaults(n.Object(),r,B.pick(n,w)):n;var It=r.Array,Pt=r.Boolean,Nt=r.Date,$t=r.Function,qt=r.Math,Bt=r.Number,Ft=r.Object,Rt=r.RegExp,Tt=r.String,Dt=r.TypeError,zt=It(),Lt=Ft(),Kt=r._,Mt=Rt(\"^\"+Tt(Lt.valueOf).replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\").replace(/valueOf|for [^\\]]+/g,\".+?\")+\"$\"),Ut=qt.ceil,Vt=r.clearTimeout,Gt=zt.concat,Ht=qt.floor,Jt=Mt.test(Jt=Ft.getPrototypeOf)&&Jt,Qt=Lt.hasOwnProperty,Wt=zt.push,Xt=r.setImmediate,Yt=r.setTimeout,Zt=Lt.toString,ne=Mt.test(ne=Zt.bind)&&ne,te=Mt.test(te=It.isArray)&&te,ee=r.isFinite,re=r.isNaN,ue=Mt.test(ue=Ft.keys)&&ue,ae=qt.max,oe=qt.min,ie=r.parseInt,fe=qt.random,le=zt.slice,ce=Mt.test(r.attachEvent),pe=ne&&!/\\n|true/.test(ne+ce),se={};\nse[k]=It,se[x]=Pt,se[O]=Nt,se[A]=Ft,se[S]=Bt,se[I]=Rt,se[P]=Tt;var ve=a.support={};(function(){var n=function(){this.x=1},t={0:1,length:1},e=[];n.prototype={valueOf:1,y:1};for(var r in new n)e.push(r);for(r in arguments);ve.argsObject=arguments.constructor==Ft&&!(arguments instanceof It),ve.argsClass=Q(arguments),ve.enumPrototypes=n.propertyIsEnumerable(\"prototype\"),ve.fastBind=ne&&!pe,ve.ownLast=\"x\"!=e[0],ve.nonEnumArgs=0!=r,ve.nonEnumShadows=!/valueOf/.test(e),ve.spliceObjects=(zt.splice.call(t,0,1),!t[0]),ve.unindexedChars=\"xx\"!=\"x\"[0]+Ft(\"x\")[0];\ntry{ve.nodeClass=!(Zt.call(document)==A&&!({toString:0}+\"\"))}catch(u){ve.nodeClass=!0}})(1),a.templateSettings={escape:/<%-([\\s\\S]+?)%>/g,evaluate:/<%([\\s\\S]+?)%>/g,interpolate:y,variable:\"\",imports:{_:a}};var ge={a:\"q,w,g\",h:\"var a=arguments,b=0,c=typeof g=='number'?2:a.length;while(++b<c){m=a[b];if(m&&r[typeof m]){\",f:\"if(typeof u[i]=='undefined')u[i]=m[i]\",c:\"}}\"},he={a:\"e,d,x\",h:\"d=d&&typeof x=='undefined'?d:p.createCallback(d,x)\",b:\"typeof n=='number'\",f:\"if(d(m[i],i,e)===false)return u\"},ye={h:\"if(!r[typeof m])return u;\"+he.h,b:!1};\nU.prototype=a.prototype,ve.argsClass||(Q=function(n){return n?Qt.call(n,\"callee\"):!1});var me=z({a:\"q\",e:\"[]\",h:\"if(!(r[typeof q]))return u\",f:\"u.push(i)\",b:!1}),de=ue?function(n){return et(n)?ve.enumPrototypes&&typeof n==\"function\"||ve.nonEnumArgs&&n.length&&Q(n)?me(n):ue(n):[]}:me,be=z(he),_e={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\"},we=Y(_e),Ce=z(ge,{h:ge.h.replace(\";\",\";if(c>3&&typeof a[c-2]=='function'){var d=p.createCallback(a[--c-1],a[c--],2);}else if(c>2&&typeof a[c-1]=='function'){d=a[--c];}\"),f:\"u[i]=d?d(u[i],m[i]):m[i]\"}),je=z(ge),ke=z(he,ye,{i:!1}),xe=z(he,ye);\ntt(/x/)&&(tt=function(n){return n instanceof $t||Zt.call(n)==E});var Oe=Jt?function(n){if(!n||Zt.call(n)!=A||!ve.argsClass&&Q(n))return!1;var t=n.valueOf,e=typeof t==\"function\"&&(e=Jt(t))&&Jt(e);return e?n==e||Jt(n)==e:G(n)}:G;pe&&u&&typeof Xt==\"function\"&&(Ot=xt(Xt,r));var Ee=8==ie(\"08\")?ie:function(n,t){return ie(ut(n)?n.replace(m,\"\"):n,t||0)};return a.after=function(n,t){return 1>n?t():function(){return 1>--n?t.apply(this,arguments):void 0}},a.assign=Ce,a.at=function(n){var t=-1,e=Gt.apply(zt,le.call(arguments,1)),r=e.length,u=It(r);\nfor(ve.unindexedChars&&ut(n)&&(n=n.split(\"\"));++t<r;)u[t]=n[e[t]];return u},a.bind=xt,a.bindAll=function(n){for(var t=1<arguments.length?Gt.apply(zt,le.call(arguments,1)):X(n),e=-1,r=t.length;++e<r;){var u=t[e];n[u]=xt(n[u],n)}return n},a.bindKey=function(n,t){return D(n,t,le.call(arguments,2),i)},a.compact=function(n){for(var t=-1,e=n?n.length:0,r=[];++t<e;){var u=n[t];u&&r.push(u)}return r},a.compose=function(){var n=arguments;return function(){for(var t=arguments,e=n.length;e--;)t=[n[e].apply(this,t)];\nreturn t[0]}},a.countBy=function(n,t,e){var r={};return t=a.createCallback(t,e),pt(n,function(n,e,u){e=Tt(t(n,e,u)),Qt.call(r,e)?r[e]++:r[e]=1}),r},a.createCallback=function(n,t,e){if(null==n)return Et;var r=typeof n;if(\"function\"!=r){if(\"object\"!=r)return function(t){return t[n]};var u=de(n);return function(t){for(var e=u.length,r=!1;e--&&(r=nt(t[u[e]],n[u[e]],i)););return r}}return typeof t!=\"undefined\"?1===e?function(e){return n.call(t,e)}:2===e?function(e,r){return n.call(t,e,r)}:4===e?function(e,r,u,a){return n.call(t,e,r,u,a)\n}:function(e,r,u){return n.call(t,e,r,u)}:n},a.debounce=function(n,t,e){function r(){i=null,f&&(a=n.apply(o,u))}var u,a,o,i,f=!0;if(!0===e)var l=!0,f=!1;else e&&$[typeof e]&&(l=e.leading,f=\"trailing\"in e?e.trailing:f);return function(){var e=l&&!i;return u=arguments,o=this,Vt(i),i=Yt(r,t),e&&(a=n.apply(o,u)),a}},a.defaults=je,a.defer=Ot,a.delay=function(n,t){var r=le.call(arguments,2);return Yt(function(){n.apply(e,r)},t)},a.difference=mt,a.filter=lt,a.flatten=bt,a.forEach=pt,a.forIn=ke,a.forOwn=xe,a.functions=X,a.groupBy=function(n,t,e){var r={};\nreturn t=a.createCallback(t,e),pt(n,function(n,e,u){e=Tt(t(n,e,u)),(Qt.call(r,e)?r[e]:r[e]=[]).push(n)}),r},a.initial=function(n,t,e){if(!n)return[];var r=0,u=n.length;if(typeof t!=\"number\"&&null!=t){var o=u;for(t=a.createCallback(t,e);o--&&t(n[o],o,n);)r++}else r=null==t||e?1:t||r;return H(n,0,oe(ae(0,u-r),u))},a.intersection=function(n){var t=arguments,e=t.length,r={0:{}},u=-1,a=n?n.length:0,o=a>=l,i=[],c=i;n:for(;++u<a;){var p=n[u];if(o)var s=f+p,s=r[0][s]?!(c=r[0][s]):c=r[0][s]=[];if(s||0>_t(c,p)){o&&c.push(p);\nfor(var v=e;--v;)if(!(r[v]||(r[v]=F(t[v])))(p))continue n;i.push(p)}}return i},a.invert=Y,a.invoke=function(n,t){var e=le.call(arguments,2),r=-1,u=typeof t==\"function\",a=n?n.length:0,o=It(typeof a==\"number\"?a:0);return pt(n,function(n){o[++r]=(u?t:n[t]).apply(n,e)}),o},a.keys=de,a.map=st,a.max=vt,a.memoize=function(n,t){var e={};return function(){var r=f+(t?t.apply(this,arguments):arguments[0]);return Qt.call(e,r)?e[r]:e[r]=n.apply(this,arguments)}},a.merge=at,a.min=function(n,t,e){var r=1/0,u=r;\nif(!t&&Z(n)){e=-1;for(var o=n.length;++e<o;){var i=n[e];i<u&&(u=i)}}else t=!t&&ut(n)?R:a.createCallback(t,e),be(n,function(n,e,a){e=t(n,e,a),e<r&&(r=e,u=n)});return u},a.omit=function(n,t,e){var r=typeof t==\"function\",u={};if(r)t=a.createCallback(t,e);else var o=Gt.apply(zt,le.call(arguments,1));return ke(n,function(n,e,a){(r?!t(n,e,a):0>_t(o,e))&&(u[e]=n)}),u},a.once=function(n){var t,e;return function(){return t?e:(t=!0,e=n.apply(this,arguments),n=null,e)}},a.pairs=function(n){for(var t=-1,e=de(n),r=e.length,u=It(r);++t<r;){var a=e[t];\nu[t]=[a,n[a]]}return u},a.partial=function(n){return D(n,le.call(arguments,1))},a.partialRight=function(n){return D(n,le.call(arguments,1),null,i)},a.pick=function(n,t,e){var r={};if(typeof t!=\"function\")for(var u=-1,o=Gt.apply(zt,le.call(arguments,1)),i=et(n)?o.length:0;++u<i;){var f=o[u];f in n&&(r[f]=n[f])}else t=a.createCallback(t,e),ke(n,function(n,e,u){t(n,e,u)&&(r[e]=n)});return r},a.pluck=st,a.range=function(n,t,e){n=+n||0,e=+e||1,null==t&&(t=n,n=0);var r=-1;t=ae(0,Ut((t-n)/e));for(var u=It(t);++r<t;)u[r]=n,n+=e;\nreturn u},a.reject=function(n,t,e){return t=a.createCallback(t,e),lt(n,function(n,e,r){return!t(n,e,r)})},a.rest=wt,a.shuffle=function(n){var t=-1,e=n?n.length:0,r=It(typeof e==\"number\"?e:0);return pt(n,function(n){var e=Ht(fe()*(++t+1));r[t]=r[e],r[e]=n}),r},a.sortBy=function(n,t,e){var r=-1,u=n?n.length:0,o=It(typeof u==\"number\"?u:0);for(t=a.createCallback(t,e),pt(n,function(n,e,u){o[++r]={a:t(n,e,u),b:r,c:n}}),u=o.length,o.sort(T);u--;)o[u]=o[u].c;return o},a.tap=function(n,t){return t(n),n},a.throttle=function(n,t,e){function r(){f=new Nt,i=null,c&&(a=n.apply(o,u))\n}var u,a,o,i,f=0,l=!0,c=!0;return!1===e?l=!1:e&&$[typeof e]&&(l=\"leading\"in e?e.leading:l,c=\"trailing\"in e?e.trailing:c),function(){var e=new Nt;!i&&!l&&(f=e);var c=t-(e-f);return u=arguments,o=this,0<c?i||(i=Yt(r,c)):(Vt(i),i=null,f=e,a=n.apply(o,u)),a}},a.times=function(n,t,e){n=-1<(n=+n)?n:0;var r=-1,u=It(n);for(t=a.createCallback(t,e,1);++r<n;)u[r]=t(r);return u},a.toArray=function(n){return n&&typeof n.length==\"number\"?ve.unindexedChars&&ut(n)?n.split(\"\"):H(n):ot(n)},a.union=function(n){return Z(n)||(arguments[0]=n?le.call(n):zt),jt(Gt.apply(zt,arguments))\n},a.uniq=jt,a.unzip=function(n){for(var t=-1,e=n?n.length:0,r=e?vt(st(n,\"length\")):0,u=It(r);++t<e;)for(var a=-1,o=n[t];++a<r;)(u[a]||(u[a]=It(e)))[t]=o[a];return u},a.values=ot,a.where=lt,a.without=function(n){return mt(n,le.call(arguments,1))},a.wrap=function(n,t){return function(){var e=[n];return Wt.apply(e,arguments),t.apply(this,e)}},a.zip=function(n){for(var t=-1,e=n?vt(st(arguments,\"length\")):0,r=It(e);++t<e;)r[t]=st(arguments,t);return r},a.zipObject=kt,a.collect=st,a.drop=wt,a.each=pt,a.extend=Ce,a.methods=X,a.object=kt,a.select=lt,a.tail=wt,a.unique=jt,St(a),a.clone=W,a.cloneDeep=function(n,t,e){return W(n,!0,t,e)\n},a.contains=it,a.escape=function(n){return null==n?\"\":Tt(n).replace(b,K)},a.every=ft,a.find=ct,a.findIndex=function(n,t,e){var r=-1,u=n?n.length:0;for(t=a.createCallback(t,e);++r<u;)if(t(n[r],r,n))return r;return-1},a.findKey=function(n,t,e){var r;return t=a.createCallback(t,e),xe(n,function(n,e,u){return t(n,e,u)?(r=e,!1):void 0}),r},a.has=function(n,t){return n?Qt.call(n,t):!1},a.identity=Et,a.indexOf=_t,a.isArguments=Q,a.isArray=Z,a.isBoolean=function(n){return!0===n||!1===n||Zt.call(n)==x},a.isDate=function(n){return n instanceof Nt||Zt.call(n)==O\n},a.isElement=function(n){return n?1===n.nodeType:!1},a.isEmpty=function(n){var t=!0;if(!n)return t;var e=Zt.call(n),r=n.length;return e==k||e==P||(ve.argsClass?e==j:Q(n))||e==A&&typeof r==\"number\"&&tt(n.splice)?!r:(xe(n,function(){return t=!1}),t)},a.isEqual=nt,a.isFinite=function(n){return ee(n)&&!re(parseFloat(n))},a.isFunction=tt,a.isNaN=function(n){return rt(n)&&n!=+n},a.isNull=function(n){return null===n},a.isNumber=rt,a.isObject=et,a.isPlainObject=Oe,a.isRegExp=function(n){return n instanceof Rt||Zt.call(n)==I\n},a.isString=ut,a.isUndefined=function(n){return typeof n==\"undefined\"},a.lastIndexOf=function(n,t,e){var r=n?n.length:0;for(typeof e==\"number\"&&(r=(0>e?ae(0,r+e):oe(e,r-1))+1);r--;)if(n[r]===t)return r;return-1},a.mixin=St,a.noConflict=function(){return r._=Kt,this},a.parseInt=Ee,a.random=function(n,t){return null==n&&null==t&&(t=1),n=+n||0,null==t&&(t=n,n=0),n+Ht(fe()*((+t||0)-n+1))},a.reduce=gt,a.reduceRight=ht,a.result=function(n,t){var r=n?n[t]:e;return tt(r)?n[t]():r},a.runInContext=t,a.size=function(n){var t=n?n.length:0;\nreturn typeof t==\"number\"?t:de(n).length},a.some=yt,a.sortedIndex=Ct,a.template=function(n,t,r){var u=a.templateSettings;n||(n=\"\"),r=je({},r,u);var o,i=je({},r.imports,u.imports),u=de(i),i=ot(i),f=0,l=r.interpolate||d,v=\"__p+='\",l=Rt((r.escape||d).source+\"|\"+l.source+\"|\"+(l===y?g:d).source+\"|\"+(r.evaluate||d).source+\"|$\",\"g\");n.replace(l,function(t,e,r,u,a,i){return r||(r=u),v+=n.slice(f,i).replace(_,L),e&&(v+=\"'+__e(\"+e+\")+'\"),a&&(o=!0,v+=\"';\"+a+\";__p+='\"),r&&(v+=\"'+((__t=(\"+r+\"))==null?'':__t)+'\"),f=i+t.length,t\n}),v+=\"';\\n\",l=r=r.variable,l||(r=\"obj\",v=\"with(\"+r+\"){\"+v+\"}\"),v=(o?v.replace(c,\"\"):v).replace(p,\"$1\").replace(s,\"$1;\"),v=\"function(\"+r+\"){\"+(l?\"\":r+\"||(\"+r+\"={});\")+\"var __t,__p='',__e=_.escape\"+(o?\",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}\":\";\")+v+\"return __p}\";try{var h=$t(u,\"return \"+v).apply(e,i)}catch(m){throw m.source=v,m}return t?h(t):(h.source=v,h)},a.unescape=function(n){return null==n?\"\":Tt(n).replace(v,J)},a.uniqueId=function(n){var t=++o;return Tt(null==n?\"\":n)+t\n},a.all=ft,a.any=yt,a.detect=ct,a.foldl=gt,a.foldr=ht,a.include=it,a.inject=gt,xe(a,function(n,t){a.prototype[t]||(a.prototype[t]=function(){var t=[this.__wrapped__];return Wt.apply(t,arguments),n.apply(a,t)})}),a.first=dt,a.last=function(n,t,e){if(n){var r=0,u=n.length;if(typeof t!=\"number\"&&null!=t){var o=u;for(t=a.createCallback(t,e);o--&&t(n[o],o,n);)r++}else if(r=t,null==r||e)return n[u-1];return H(n,ae(0,u-r))}},a.take=dt,a.head=dt,xe(a,function(n,t){a.prototype[t]||(a.prototype[t]=function(t,e){var r=n(this.__wrapped__,t,e);\nreturn null==t||e&&typeof t!=\"function\"?r:new U(r)})}),a.VERSION=\"1.2.0\",a.prototype.toString=function(){return Tt(this.__wrapped__)},a.prototype.value=At,a.prototype.valueOf=At,be([\"join\",\"pop\",\"shift\"],function(n){var t=zt[n];a.prototype[n]=function(){return t.apply(this.__wrapped__,arguments)}}),be([\"push\",\"reverse\",\"sort\",\"unshift\"],function(n){var t=zt[n];a.prototype[n]=function(){return t.apply(this.__wrapped__,arguments),this}}),be([\"concat\",\"slice\",\"splice\"],function(n){var t=zt[n];a.prototype[n]=function(){return new U(t.apply(this.__wrapped__,arguments))\n}}),ve.spliceObjects||be([\"pop\",\"shift\",\"splice\"],function(n){var t=zt[n],e=\"splice\"==n;a.prototype[n]=function(){var n=this.__wrapped__,r=t.apply(n,arguments);return 0===n.length&&delete n[0],e?new U(r):r}}),a}var e,r=typeof exports==\"object\"&&exports,u=typeof module==\"object\"&&module&&module.exports==r&&module,a=typeof global==\"object\"&&global;(a.global===a||a.window===a)&&(n=a);var o=0,i={},f=+new Date+\"\",l=200,c=/\\b__p\\+='';/g,p=/\\b(__p\\+=)''\\+/g,s=/(__e\\(.*?\\)|\\b__t\\))\\+'';/g,v=/&(?:amp|lt|gt|quot|#39);/g,g=/\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g,h=/\\w*$/,y=/<%=([\\s\\S]+?)%>/g,m=/^0+(?=.$)/,d=/($^)/,b=/[&<>\"']/g,_=/['\\n\\r\\t\\u2028\\u2029\\\\]/g,w=\"Array Boolean Date Function Math Number Object RegExp String _ attachEvent clearTimeout isFinite isNaN parseInt setImmediate setTimeout\".split(\" \"),C=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \"),j=\"[object Arguments]\",k=\"[object Array]\",x=\"[object Boolean]\",O=\"[object Date]\",E=\"[object Function]\",S=\"[object Number]\",A=\"[object Object]\",I=\"[object RegExp]\",P=\"[object String]\",N={};\nN[E]=!1,N[j]=N[k]=N[x]=N[O]=N[S]=N[A]=N[I]=N[P]=!0;var $={\"boolean\":!1,\"function\":!0,object:!0,number:!1,string:!1,undefined:!1},q={\"\\\\\":\"\\\\\",\"'\":\"'\",\"\\n\":\"n\",\"\\r\":\"r\",\"\t\":\"t\",\"\\u2028\":\"u2028\",\"\\u2029\":\"u2029\"},B=t();typeof define==\"function\"&&typeof define.amd==\"object\"&&define.amd?(n._=B,define('_',[],function(){return B})):r&&!r.nodeType?u?(u.exports=B)._=B:r._=B:n._=B})(this);","\n/*! jQuery v1.9.1 -ajax,-ajax/script,-ajax/jsonp,-ajax/xhr,-effects,-offset,-dimensions | (c) 2005, 2012 jQuery Foundation, Inc. | jquery.org/license\n//@ sourceMappingURL=jquery.min.map\n*/(function(e,t){var n,r,i=typeof t,o=e.document,a=e.location,s=e.jQuery,l=e.$,u={},c=[],d=\"1.9.1 -ajax,-ajax/script,-ajax/jsonp,-ajax/xhr,-effects,-offset,-dimensions\",p=c.concat,f=c.push,h=c.slice,g=c.indexOf,m=u.toString,y=u.hasOwnProperty,v=d.trim,b=function(e,t){return new b.fn.init(e,t,r)},x=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,N=/\\S+/g,w=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,T=/^(?:(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,C=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,k=/^[\\],:{}\\s]*$/,E=/(?:^|:|,)(?:\\s*\\[)+/g,A=/\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,S=/\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g,D=/^-ms-/,L=/-([\\da-z])/gi,H=function(e,t){return t.toUpperCase()},j=function(e){(o.addEventListener||\"load\"===e.type||\"complete\"===o.readyState)&&(B(),b.ready())},B=function(){o.addEventListener?(o.removeEventListener(\"DOMContentLoaded\",j,!1),e.removeEventListener(\"load\",j,!1)):(o.detachEvent(\"onreadystatechange\",j),e.detachEvent(\"onload\",j))};b.fn=b.prototype={jquery:d,constructor:b,init:function(e,n,r){var i,a;if(!e)return this;if(\"string\"==typeof e){if(i=\"<\"===e.charAt(0)&&\">\"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:T.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof b?n[0]:n,b.merge(this,b.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:o,!0)),C.test(i[1])&&b.isPlainObject(n))for(i in n)b.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(a=o.getElementById(i[2]),a&&a.parentNode){if(a.id!==i[2])return r.find(e);this.length=1,this[0]=a}return this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):b.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),b.makeArray(e,this))},selector:\"\",length:0,size:function(){return this.length},toArray:function(){return h.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return b.each(this,e,t)},ready:function(e){return b.ready.promise().done(e),this},slice:function(){return this.pushStack(h.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(b.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:[].sort,splice:[].splice},b.fn.init.prototype=b.fn,b.extend=b.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},l=1,u=arguments.length,c=!1;for(\"boolean\"==typeof s&&(c=s,s=arguments[1]||{},l=2),\"object\"==typeof s||b.isFunction(s)||(s={}),u===l&&(s=this,--l);u>l;l++)if(null!=(o=arguments[l]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(b.isPlainObject(r)||(n=b.isArray(r)))?(n?(n=!1,a=e&&b.isArray(e)?e:[]):a=e&&b.isPlainObject(e)?e:{},s[i]=b.extend(c,a,r)):r!==t&&(s[i]=r));return s},b.extend({noConflict:function(t){return e.$===b&&(e.$=l),t&&e.jQuery===b&&(e.jQuery=s),b},isReady:!1,readyWait:1,holdReady:function(e){e?b.readyWait++:b.ready(!0)},ready:function(e){if(e===!0?!--b.readyWait:!b.isReady){if(!o.body)return setTimeout(b.ready);b.isReady=!0,e!==!0&&--b.readyWait>0||(n.resolveWith(o,[b]),b.fn.trigger&&b(o).trigger(\"ready\").off(\"ready\"))}},isFunction:function(e){return\"function\"===b.type(e)},isArray:Array.isArray||function(e){return\"array\"===b.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?u[m.call(e)]||\"object\":typeof e},isPlainObject:function(e){if(!e||\"object\"!==b.type(e)||e.nodeType||b.isWindow(e))return!1;try{if(e.constructor&&!y.call(e,\"constructor\")&&!y.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(n){return!1}var r;for(r in e);return r===t||y.call(e,r)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||\"string\"!=typeof e)return null;\"boolean\"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=b.buildFragment([e],t,i),i&&b(i).remove(),b.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:\"string\"==typeof n&&(n=b.trim(n),n&&k.test(n.replace(A,\"@\").replace(S,\"]\").replace(E,\"\")))?Function(\"return \"+n)():(b.error(\"Invalid JSON: \"+n),t)},parseXML:function(n){var r,i;if(!n||\"string\"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,\"text/xml\")):(r=new ActiveXObject(\"Microsoft.XMLDOM\"),r.async=\"false\",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName(\"parsererror\").length||b.error(\"Invalid XML: \"+n),r},noop:function(){},globalEval:function(t){t&&b.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(D,\"ms-\").replace(L,H)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:v&&!v.call(\"\\ufeff\\u00a0\")?function(e){return null==e?\"\":v.call(e)}:function(e){return null==e?\"\":(e+\"\").replace(w,\"\")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?b.merge(n,\"string\"==typeof e?[e]:e):f.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(g)return g.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if(\"number\"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return p.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return\"string\"==typeof n&&(o=e[n],n=e,e=o),b.isFunction(e)?(r=h.call(arguments,2),i=function(){return e.apply(n||this,r.concat(h.call(arguments)))},i.guid=e.guid=e.guid||b.guid++,i):t},access:function(e,n,r,i,o,a,s){var l=0,u=e.length,c=null==r;if(\"object\"===b.type(r)){o=!0;for(l in r)b.access(e,n,l,r[l],!0,a,s)}else if(i!==t&&(o=!0,b.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(b(e),n)})),n))for(;u>l;l++)n(e[l],r,s?i:i.call(e[l],l,n(e[l],r)));return o?e:c?n.call(e):u?n(e[0],r):a},now:function(){return(new Date).getTime()}}),b.ready.promise=function(t){if(!n)if(n=b.Deferred(),\"complete\"===o.readyState)setTimeout(b.ready);else if(o.addEventListener)o.addEventListener(\"DOMContentLoaded\",j,!1),e.addEventListener(\"load\",j,!1);else{o.attachEvent(\"onreadystatechange\",j),e.attachEvent(\"onload\",j);var r=!1;try{r=null==e.frameElement&&o.documentElement}catch(i){}r&&r.doScroll&&function a(){if(!b.isReady){try{r.doScroll(\"left\")}catch(e){return setTimeout(a,50)}B(),b.ready()}}()}return n.promise(t)},b.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(e,t){u[\"[object \"+t+\"]\"]=t.toLowerCase()});function M(e){var t=e.length,n=b.type(e);return b.isWindow(e)?!1:1===e.nodeType&&t?!0:\"array\"===n||\"function\"!==n&&(0===t||\"number\"==typeof t&&t>0&&t-1 in e)}r=b(o);var _={};function O(e){var t=_[e]={};return b.each(e.match(N)||[],function(e,n){t[n]=!0}),t}b.Callbacks=function(e){e=\"string\"==typeof e?_[e]||O(e):b.extend({},e);var n,r,i,o,a,s,l=[],u=!e.once&&[],c=function(t){for(r=e.memory&&t,i=!0,a=s||0,s=0,o=l.length,n=!0;l&&o>a;a++)if(l[a].apply(t[0],t[1])===!1&&e.stopOnFalse){r=!1;break}n=!1,l&&(u?u.length&&c(u.shift()):r?l=[]:d.disable())},d={add:function(){if(l){var t=l.length;(function i(t){b.each(t,function(t,n){var r=b.type(n);\"function\"===r?e.unique&&d.has(n)||l.push(n):n&&n.length&&\"string\"!==r&&i(n)})})(arguments),n?o=l.length:r&&(s=t,c(r))}return this},remove:function(){return l&&b.each(arguments,function(e,t){var r;while((r=b.inArray(t,l,r))>-1)l.splice(r,1),n&&(o>=r&&o--,a>=r&&a--)}),this},has:function(e){return e?b.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],this},disable:function(){return l=u=r=t,this},disabled:function(){return!l},lock:function(){return u=t,r||d.disable(),this},locked:function(){return!u},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],!l||i&&!u||(n?u.push(t):c(t)),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!i}};return d},b.extend({Deferred:function(e){var t=[[\"resolve\",\"done\",b.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",b.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",b.Callbacks(\"memory\")]],n=\"pending\",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return b.Deferred(function(n){b.each(t,function(t,o){var a=o[0],s=b.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&b.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a+\"With\"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?b.extend(e,r):r}},i={};return r.pipe=r.then,b.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+\"With\"](this===i?r:this,arguments),this},i[o[0]+\"With\"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=h.call(arguments),r=n.length,i=1!==r||e&&b.isFunction(e.promise)?r:0,o=1===i?e:b.Deferred(),a=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?h.call(arguments):r,n===s?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},s,l,u;if(r>1)for(s=Array(r),l=Array(r),u=Array(r);r>t;t++)n[t]&&b.isFunction(n[t].promise)?n[t].promise().done(a(t,u,n)).fail(o.reject).progress(a(t,l,s)):--i;return i||o.resolveWith(u,n),o.promise()}}),b.support=function(){var t,n,r,a,s,l,u,c,d,p,f=o.createElement(\"div\");if(f.setAttribute(\"className\",\"t\"),f.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",n=f.getElementsByTagName(\"*\"),r=f.getElementsByTagName(\"a\")[0],!n||!r||!n.length)return{};s=o.createElement(\"select\"),u=s.appendChild(o.createElement(\"option\")),a=f.getElementsByTagName(\"input\")[0],r.style.cssText=\"top:1px;float:left;opacity:.5\",t={getSetAttribute:\"t\"!==f.className,leadingWhitespace:3===f.firstChild.nodeType,tbody:!f.getElementsByTagName(\"tbody\").length,htmlSerialize:!!f.getElementsByTagName(\"link\").length,style:/top/.test(r.getAttribute(\"style\")),hrefNormalized:\"/a\"===r.getAttribute(\"href\"),opacity:/^0.5/.test(r.style.opacity),cssFloat:!!r.style.cssFloat,checkOn:!!a.value,optSelected:u.selected,enctype:!!o.createElement(\"form\").enctype,html5Clone:\"<:nav></:nav>\"!==o.createElement(\"nav\").cloneNode(!0).outerHTML,boxModel:\"CSS1Compat\"===o.compatMode,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},a.checked=!0,t.noCloneChecked=a.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!u.disabled;try{delete f.test}catch(h){t.deleteExpando=!1}a=o.createElement(\"input\"),a.setAttribute(\"value\",\"\"),t.input=\"\"===a.getAttribute(\"value\"),a.value=\"t\",a.setAttribute(\"type\",\"radio\"),t.radioValue=\"t\"===a.value,a.setAttribute(\"checked\",\"t\"),a.setAttribute(\"name\",\"t\"),l=o.createDocumentFragment(),l.appendChild(a),t.appendChecked=a.checked,t.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,f.attachEvent&&(f.attachEvent(\"onclick\",function(){t.noCloneEvent=!1}),f.cloneNode(!0).click());for(p in{submit:!0,change:!0,focusin:!0})f.setAttribute(c=\"on\"+p,\"t\"),t[p+\"Bubbles\"]=c in e||f.attributes[c].expando===!1;return f.style.backgroundClip=\"content-box\",f.cloneNode(!0).style.backgroundClip=\"\",t.clearCloneStyle=\"content-box\"===f.style.backgroundClip,b(function(){var n,r,a,s=\"padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;\",l=o.getElementsByTagName(\"body\")[0];l&&(n=o.createElement(\"div\"),n.style.cssText=\"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\",l.appendChild(n).appendChild(f),f.innerHTML=\"<table><tr><td></td><td>t</td></tr></table>\",a=f.getElementsByTagName(\"td\"),a[0].style.cssText=\"padding:0;margin:0;border:0;display:none\",d=0===a[0].offsetHeight,a[0].style.display=\"\",a[1].style.display=\"none\",t.reliableHiddenOffsets=d&&0===a[0].offsetHeight,f.innerHTML=\"\",f.style.cssText=\"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\",t.boxSizing=4===f.offsetWidth,t.doesNotIncludeMarginInBodyOffset=1!==l.offsetTop,e.getComputedStyle&&(t.pixelPosition=\"1%\"!==(e.getComputedStyle(f,null)||{}).top,t.boxSizingReliable=\"4px\"===(e.getComputedStyle(f,null)||{width:\"4px\"}).width,r=f.appendChild(o.createElement(\"div\")),r.style.cssText=f.style.cssText=s,r.style.marginRight=r.style.width=\"0\",f.style.width=\"1px\",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),typeof f.style.zoom!==i&&(f.innerHTML=\"\",f.style.cssText=s+\"width:1px;padding:1px;display:inline;zoom:1\",t.inlineBlockNeedsLayout=3===f.offsetWidth,f.style.display=\"block\",f.innerHTML=\"<div></div>\",f.firstChild.style.width=\"5px\",t.shrinkWrapBlocks=3!==f.offsetWidth,t.inlineBlockNeedsLayout&&(l.style.zoom=1)),l.removeChild(n),n=f=a=r=null)}),n=s=l=u=r=a=null,t}();var F=/(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,P=/([A-Z])/g;function q(e,n,r,i){if(b.acceptData(e)){var o,a,s=b.expando,l=\"string\"==typeof n,u=e.nodeType,d=u?b.cache:e,p=u?e[s]:e[s]&&s;if(p&&d[p]&&(i||d[p].data)||!l||r!==t)return p||(u?e[s]=p=c.pop()||b.guid++:p=s),d[p]||(d[p]={},u||(d[p].toJSON=b.noop)),(\"object\"==typeof n||\"function\"==typeof n)&&(i?d[p]=b.extend(d[p],n):d[p].data=b.extend(d[p].data,n)),o=d[p],i||(o.data||(o.data={}),o=o.data),r!==t&&(o[b.camelCase(n)]=r),l?(a=o[n],null==a&&(a=o[b.camelCase(n)])):a=o,a}}function W(e,t,n){if(b.acceptData(e)){var r,i,o,a=e.nodeType,s=a?b.cache:e,l=a?e[b.expando]:b.expando;if(s[l]){if(t&&(o=n?s[l]:s[l].data)){b.isArray(t)?t=t.concat(b.map(t,b.camelCase)):t in o?t=[t]:(t=b.camelCase(t),t=t in o?[t]:t.split(\" \"));for(r=0,i=t.length;i>r;r++)delete o[t[r]];if(!(n?I:b.isEmptyObject)(o))return}(n||(delete s[l].data,I(s[l])))&&(a?b.cleanData([e],!0):b.support.deleteExpando||s!=s.window?delete s[l]:s[l]=null)}}}b.extend({cache:{},expando:\"jQuery\"+(d+Math.random()).replace(/\\D/g,\"\"),noData:{embed:!0,object:\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\",applet:!0},hasData:function(e){return e=e.nodeType?b.cache[e[b.expando]]:e[b.expando],!!e&&!I(e)},data:function(e,t,n){return q(e,t,n)},removeData:function(e,t){return W(e,t)},_data:function(e,t,n){return q(e,t,n,!0)},_removeData:function(e,t){return W(e,t,!0)},acceptData:function(e){if(e.nodeType&&1!==e.nodeType&&9!==e.nodeType)return!1;var t=e.nodeName&&b.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute(\"classid\")===t}}),b.fn.extend({data:function(e,n){var r,i,o=this[0],a=0,s=null;if(e===t){if(this.length&&(s=b.data(o),1===o.nodeType&&!b._data(o,\"parsedAttrs\"))){for(r=o.attributes;r.length>a;a++)i=r[a].name,i.indexOf(\"data-\")||(i=b.camelCase(i.slice(5)),$(o,i,s[i]));b._data(o,\"parsedAttrs\",!0)}return s}return\"object\"==typeof e?this.each(function(){b.data(this,e)}):b.access(this,function(n){return n===t?o?$(o,e,b.data(o,e)):null:(this.each(function(){b.data(this,e,n)}),t)},null,n,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){b.removeData(this,e)})}});function $(e,n,r){if(r===t&&1===e.nodeType){var i=\"data-\"+n.replace(P,\"-$1\").toLowerCase();if(r=e.getAttribute(i),\"string\"==typeof r){try{r=\"true\"===r?!0:\"false\"===r?!1:\"null\"===r?null:+r+\"\"===r?+r:F.test(r)?b.parseJSON(r):r}catch(o){}b.data(e,n,r)}else r=t}return r}function I(e){var t;for(t in e)if((\"data\"!==t||!b.isEmptyObject(e[t]))&&\"toJSON\"!==t)return!1;return!0}b.extend({queue:function(e,n,r){var i;return e?(n=(n||\"fx\")+\"queue\",i=b._data(e,n),r&&(!i||b.isArray(r)?i=b._data(e,n,b.makeArray(r)):i.push(r)),i||[]):t},dequeue:function(e,t){t=t||\"fx\";var n=b.queue(e,t),r=n.length,i=n.shift(),o=b._queueHooks(e,t),a=function(){b.dequeue(e,t)};\"inprogress\"===i&&(i=n.shift(),r--),o.cur=i,i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return b._data(e,n)||b._data(e,n,{empty:b.Callbacks(\"once memory\").add(function(){b._removeData(e,t+\"queue\"),b._removeData(e,n)})})}}),b.fn.extend({queue:function(e,n){var r=2;return\"string\"!=typeof e&&(n=e,e=\"fx\",r--),r>arguments.length?b.queue(this[0],e):n===t?this:this.each(function(){var t=b.queue(this,e,n);b._queueHooks(this,e),\"fx\"===e&&\"inprogress\"!==t[0]&&b.dequeue(this,e)})},dequeue:function(e){return this.each(function(){b.dequeue(this,e)})},delay:function(e,t){return e=b.fx?b.fx.speeds[e]||e:e,t=t||\"fx\",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,n){var r,i=1,o=b.Deferred(),a=this,s=this.length,l=function(){--i||o.resolveWith(a,[a])};\"string\"!=typeof e&&(n=e,e=t),e=e||\"fx\";while(s--)r=b._data(a[s],e+\"queueHooks\"),r&&r.empty&&(i++,r.empty.add(l));return l(),o.promise(n)}});var R,z,X=/[\\t\\r\\n]/g,U=/\\r/g,V=/^(?:input|select|textarea|button|object)$/i,J=/^(?:a|area)$/i,Q=/^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,Y=/^(?:checked|selected)$/i,K=b.support.getSetAttribute,G=b.support.input;b.fn.extend({attr:function(e,t){return b.access(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){b.removeAttr(this,e)})},prop:function(e,t){return b.access(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return e=b.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,o,a=0,s=this.length,l=\"string\"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).addClass(e.call(this,t,this.className))});if(l)for(t=(e||\"\").match(N)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(X,\" \"):\" \")){o=0;while(i=t[o++])0>r.indexOf(\" \"+i+\" \")&&(r+=i+\" \");n.className=b.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,a=0,s=this.length,l=0===arguments.length||\"string\"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).removeClass(e.call(this,t,this.className))});if(l)for(t=(e||\"\").match(N)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(X,\" \"):\"\")){o=0;while(i=t[o++])while(r.indexOf(\" \"+i+\" \")>=0)r=r.replace(\" \"+i+\" \",\" \");n.className=e?b.trim(r):\"\"}return this},toggleClass:function(e,t){var n=typeof e,r=\"boolean\"==typeof t;return b.isFunction(e)?this.each(function(n){b(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if(\"string\"===n){var o,a=0,s=b(this),l=t,u=e.match(N)||[];while(o=u[a++])l=r?l:!s.hasClass(o),s[l?\"addClass\":\"removeClass\"](o)}else(n===i||\"boolean\"===n)&&(this.className&&b._data(this,\"__className__\",this.className),this.className=this.className||e===!1?\"\":b._data(this,\"__className__\")||\"\")})},hasClass:function(e){var t=\" \"+e+\" \",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(\" \"+this[n].className+\" \").replace(X,\" \").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,o=this[0];{if(arguments.length)return i=b.isFunction(e),this.each(function(n){var o,a=b(this);1===this.nodeType&&(o=i?e.call(this,n,a.val()):e,null==o?o=\"\":\"number\"==typeof o?o+=\"\":b.isArray(o)&&(o=b.map(o,function(e){return null==e?\"\":e+\"\"})),r=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()],r&&\"set\"in r&&r.set(this,o,\"value\")!==t||(this.value=o))});if(o)return r=b.valHooks[o.type]||b.valHooks[o.nodeName.toLowerCase()],r&&\"get\"in r&&(n=r.get(o,\"value\"))!==t?n:(n=o.value,\"string\"==typeof n?n.replace(U,\"\"):null==n?\"\":n)}}}),b.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o=\"select-one\"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,l=0>i?s:o?i:0;for(;s>l;l++)if(n=r[l],!(!n.selected&&l!==i||(b.support.optDisabled?n.disabled:null!==n.getAttribute(\"disabled\"))||n.parentNode.disabled&&b.nodeName(n.parentNode,\"optgroup\"))){if(t=b(n).val(),o)return t;a.push(t)}return a},set:function(e,t){var n=b.makeArray(t);return b(e).find(\"option\").each(function(){this.selected=b.inArray(b(this).val(),n)>=0}),n.length||(e.selectedIndex=-1),n}}},attr:function(e,n,r){var o,a,s,l=e.nodeType;if(e&&3!==l&&8!==l&&2!==l)return typeof e.getAttribute===i?b.prop(e,n,r):(a=1!==l||!b.isXMLDoc(e),a&&(n=n.toLowerCase(),o=b.attrHooks[n]||(Q.test(n)?z:R)),r===t?o&&a&&\"get\"in o&&null!==(s=o.get(e,n))?s:(typeof e.getAttribute!==i&&(s=e.getAttribute(n)),null==s?t:s):null!==r?o&&a&&\"set\"in o&&(s=o.set(e,r,n))!==t?s:(e.setAttribute(n,r+\"\"),r):(b.removeAttr(e,n),t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(N);if(o&&1===e.nodeType)while(n=o[i++])r=b.propFix[n]||n,Q.test(n)?!K&&Y.test(n)?e[b.camelCase(\"default-\"+n)]=e[r]=!1:e[r]=!1:b.attr(e,n,\"\"),e.removeAttribute(K?n:r)},attrHooks:{type:{set:function(e,t){if(!b.support.radioValue&&\"radio\"===t&&b.nodeName(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},propFix:{tabindex:\"tabIndex\",readonly:\"readOnly\",\"for\":\"htmlFor\",\"class\":\"className\",maxlength:\"maxLength\",cellspacing:\"cellSpacing\",cellpadding:\"cellPadding\",rowspan:\"rowSpan\",colspan:\"colSpan\",usemap:\"useMap\",frameborder:\"frameBorder\",contenteditable:\"contentEditable\"},prop:function(e,n,r){var i,o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return a=1!==s||!b.isXMLDoc(e),a&&(n=b.propFix[n]||n,o=b.propHooks[n]),r!==t?o&&\"set\"in o&&(i=o.set(e,r,n))!==t?i:e[n]=r:o&&\"get\"in o&&null!==(i=o.get(e,n))?i:e[n]},propHooks:{tabIndex:{get:function(e){var n=e.getAttributeNode(\"tabindex\");return n&&n.specified?parseInt(n.value,10):V.test(e.nodeName)||J.test(e.nodeName)&&e.href?0:t}}}}),z={get:function(e,n){var r=b.prop(e,n),i=\"boolean\"==typeof r&&e.getAttribute(n),o=\"boolean\"==typeof r?G&&K?null!=i:Y.test(n)?e[b.camelCase(\"default-\"+n)]:!!i:e.getAttributeNode(n);return o&&o.value!==!1?n.toLowerCase():t},set:function(e,t,n){return t===!1?b.removeAttr(e,n):G&&K||!Y.test(n)?e.setAttribute(!K&&b.propFix[n]||n,n):e[b.camelCase(\"default-\"+n)]=e[n]=!0,n}},G&&K||(b.attrHooks.value={get:function(e,n){var r=e.getAttributeNode(n);return b.nodeName(e,\"input\")?e.defaultValue:r&&r.specified?r.value:t},set:function(e,n,r){return b.nodeName(e,\"input\")?(e.defaultValue=n,t):R&&R.set(e,n,r)}}),K||(R=b.valHooks.button={get:function(e,n){var r=e.getAttributeNode(n);return r&&(\"id\"===n||\"name\"===n||\"coords\"===n?\"\"!==r.value:r.specified)?r.value:t},set:function(e,n,r){var i=e.getAttributeNode(r);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(r)),i.value=n+=\"\",\"value\"===r||n===e.getAttribute(r)?n:t}},b.attrHooks.contenteditable={get:R.get,set:function(e,t,n){R.set(e,\"\"===t?!1:t,n)}},b.each([\"width\",\"height\"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{set:function(e,r){return\"\"===r?(e.setAttribute(n,\"auto\"),r):t}})})),b.support.hrefNormalized||(b.each([\"href\",\"src\",\"width\",\"height\"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{get:function(e){var r=e.getAttribute(n,2);return null==r?t:r}})}),b.each([\"href\",\"src\"],function(e,t){b.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}})),b.support.style||(b.attrHooks.style={get:function(e){return e.style.cssText||t},set:function(e,t){return e.style.cssText=t+\"\"}}),b.support.optSelected||(b.propHooks.selected=b.extend(b.propHooks.selected,{get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),b.support.enctype||(b.propFix.enctype=\"encoding\"),b.support.checkOn||b.each([\"radio\",\"checkbox\"],function(){b.valHooks[this]={get:function(e){return null===e.getAttribute(\"value\")?\"on\":e.value}}}),b.each([\"radio\",\"checkbox\"],function(){b.valHooks[this]=b.extend(b.valHooks[this],{set:function(e,n){return b.isArray(n)?e.checked=b.inArray(b(e).val(),n)>=0:t}})});var Z=/^(?:input|select|textarea)$/i,et=/^key/,tt=/^(?:mouse|contextmenu)|click/,nt=/^(?:focusinfocus|focusoutblur)$/,rt=/^([^.]*)(?:\\.(.+)|)$/;function it(){return!0}function ot(){return!1}b.event={global:{},add:function(e,n,r,o,a){var s,l,u,c,d,p,f,h,g,m,y,v=b._data(e);if(v){r.handler&&(c=r,r=c.handler,a=c.selector),r.guid||(r.guid=b.guid++),(l=v.events)||(l=v.events={}),(p=v.handle)||(p=v.handle=function(e){return typeof b===i||e&&b.event.triggered===e.type?t:b.event.dispatch.apply(p.elem,arguments)},p.elem=e),n=(n||\"\").match(N)||[\"\"],u=n.length;while(u--)s=rt.exec(n[u])||[],g=y=s[1],m=(s[2]||\"\").split(\".\").sort(),d=b.event.special[g]||{},g=(a?d.delegateType:d.bindType)||g,d=b.event.special[g]||{},f=b.extend({type:g,origType:y,data:o,handler:r,guid:r.guid,selector:a,needsContext:a&&b.expr.match.needsContext.test(a),namespace:m.join(\".\")},c),(h=l[g])||(h=l[g]=[],h.delegateCount=0,d.setup&&d.setup.call(e,o,m,p)!==!1||(e.addEventListener?e.addEventListener(g,p,!1):e.attachEvent&&e.attachEvent(\"on\"+g,p))),d.add&&(d.add.call(e,f),f.handler.guid||(f.handler.guid=r.guid)),a?h.splice(h.delegateCount++,0,f):h.push(f),b.event.global[g]=!0;e=null}},remove:function(e,t,n,r,i){var o,a,s,l,u,c,d,p,f,h,g,m=b.hasData(e)&&b._data(e);if(m&&(c=m.events)){t=(t||\"\").match(N)||[\"\"],u=t.length;while(u--)if(s=rt.exec(t[u])||[],f=g=s[1],h=(s[2]||\"\").split(\".\").sort(),f){d=b.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,p=c[f]||[],s=s[2]&&RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),l=o=p.length;while(o--)a=p[o],!i&&g!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&(\"**\"!==r||!a.selector)||(p.splice(o,1),a.selector&&p.delegateCount--,d.remove&&d.remove.call(e,a));l&&!p.length&&(d.teardown&&d.teardown.call(e,h,m.handle)!==!1||b.removeEvent(e,f,m.handle),delete c[f])}else for(f in c)b.event.remove(e,f+t[u],n,r,!0);b.isEmptyObject(c)&&(delete m.handle,b._removeData(e,\"events\"))}},trigger:function(n,r,i,a){var s,l,u,c,d,p,f,h=[i||o],g=y.call(n,\"type\")?n.type:n,m=y.call(n,\"namespace\")?n.namespace.split(\".\"):[];if(u=p=i=i||o,3!==i.nodeType&&8!==i.nodeType&&!nt.test(g+b.event.triggered)&&(g.indexOf(\".\")>=0&&(m=g.split(\".\"),g=m.shift(),m.sort()),l=0>g.indexOf(\":\")&&\"on\"+g,n=n[b.expando]?n:new b.Event(g,\"object\"==typeof n&&n),n.isTrigger=!0,n.namespace=m.join(\".\"),n.namespace_re=n.namespace?RegExp(\"(^|\\\\.)\"+m.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,n.result=t,n.target||(n.target=i),r=null==r?[n]:b.makeArray(r,[n]),d=b.event.special[g]||{},a||!d.trigger||d.trigger.apply(i,r)!==!1)){if(!a&&!d.noBubble&&!b.isWindow(i)){for(c=d.delegateType||g,nt.test(c+g)||(u=u.parentNode);u;u=u.parentNode)h.push(u),p=u;p===(i.ownerDocument||o)&&h.push(p.defaultView||p.parentWindow||e)}f=0;while((u=h[f++])&&!n.isPropagationStopped())n.type=f>1?c:d.bindType||g,s=(b._data(u,\"events\")||{})[n.type]&&b._data(u,\"handle\"),s&&s.apply(u,r),s=l&&u[l],s&&b.acceptData(u)&&s.apply&&s.apply(u,r)===!1&&n.preventDefault();if(n.type=g,!(a||n.isDefaultPrevented()||d._default&&d._default.apply(i.ownerDocument,r)!==!1||\"click\"===g&&b.nodeName(i,\"a\")||!b.acceptData(i)||!l||!i[g]||b.isWindow(i))){p=i[l],p&&(i[l]=null),b.event.triggered=g;try{i[g]()}catch(v){}b.event.triggered=t,p&&(i[l]=p)}return n.result}},dispatch:function(e){e=b.event.fix(e);var n,r,i,o,a,s=[],l=h.call(arguments),u=(b._data(this,\"events\")||{})[e.type]||[],c=b.event.special[e.type]||{};if(l[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){s=b.event.handlers.call(this,e,u),n=0;while((o=s[n++])&&!e.isPropagationStopped()){e.currentTarget=o.elem,a=0;while((i=o.handlers[a++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,r=((b.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l),r!==t&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,n){var r,i,o,a,s=[],l=n.delegateCount,u=e.target;if(l&&u.nodeType&&(!e.button||\"click\"!==e.type))for(;u!=this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||\"click\"!==e.type)){for(o=[],a=0;l>a;a++)i=n[a],r=i.selector+\" \",o[r]===t&&(o[r]=i.needsContext?b(r,this).index(u)>=0:b.find(r,this,null,[u]).length),o[r]&&o.push(i);o.length&&s.push({elem:u,handlers:o})}return n.length>l&&s.push({elem:this,handlers:n.slice(l)}),s},fix:function(e){if(e[b.expando])return e;var t,n,r,i=e.type,a=e,s=this.fixHooks[i];s||(this.fixHooks[i]=s=tt.test(i)?this.mouseHooks:et.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new b.Event(a),t=r.length;while(t--)n=r[t],e[n]=a[n];return e.target||(e.target=a.srcElement||o),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,a):e},props:\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:\"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(e,n){var r,i,a,s=n.button,l=n.fromElement;return null==e.pageX&&null!=n.clientX&&(i=e.target.ownerDocument||o,a=i.documentElement,r=i.body,e.pageX=n.clientX+(a&&a.scrollLeft||r&&r.scrollLeft||0)-(a&&a.clientLeft||r&&r.clientLeft||0),e.pageY=n.clientY+(a&&a.scrollTop||r&&r.scrollTop||0)-(a&&a.clientTop||r&&r.clientTop||0)),!e.relatedTarget&&l&&(e.relatedTarget=l===e.target?n.toElement:l),e.which||s===t||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},click:{trigger:function(){return b.nodeName(this,\"input\")&&\"checkbox\"===this.type&&this.click?(this.click(),!1):t}},focus:{trigger:function(){if(this!==o.activeElement&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:\"focusin\"},blur:{trigger:function(){return this===o.activeElement&&this.blur?(this.blur(),!1):t},delegateType:\"focusout\"},beforeunload:{postDispatch:function(e){e.result!==t&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=b.extend(new b.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?b.event.trigger(i,null,t):b.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},b.removeEvent=o.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r=\"on\"+t;e.detachEvent&&(typeof e[r]===i&&(e[r]=null),e.detachEvent(r,n))},b.Event=function(e,n){return this instanceof b.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?it:ot):this.type=e,n&&b.extend(this,n),this.timeStamp=e&&e.timeStamp||b.now(),this[b.expando]=!0,t):new b.Event(e,n)},b.Event.prototype={isDefaultPrevented:ot,isPropagationStopped:ot,isImmediatePropagationStopped:ot,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=it,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=it,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=it,this.stopPropagation()}},b.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\"},function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;\nreturn(!i||i!==r&&!b.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),b.support.submitBubbles||(b.event.special.submit={setup:function(){return b.nodeName(this,\"form\")?!1:(b.event.add(this,\"click._submit keypress._submit\",function(e){var n=e.target,r=b.nodeName(n,\"input\")||b.nodeName(n,\"button\")?n.form:t;r&&!b._data(r,\"submitBubbles\")&&(b.event.add(r,\"submit._submit\",function(e){e._submit_bubble=!0}),b._data(r,\"submitBubbles\",!0))}),t)},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&b.event.simulate(\"submit\",this.parentNode,e,!0))},teardown:function(){return b.nodeName(this,\"form\")?!1:(b.event.remove(this,\"._submit\"),t)}}),b.support.changeBubbles||(b.event.special.change={setup:function(){return Z.test(this.nodeName)?((\"checkbox\"===this.type||\"radio\"===this.type)&&(b.event.add(this,\"propertychange._change\",function(e){\"checked\"===e.originalEvent.propertyName&&(this._just_changed=!0)}),b.event.add(this,\"click._change\",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),b.event.simulate(\"change\",this,e,!0)})),!1):(b.event.add(this,\"beforeactivate._change\",function(e){var t=e.target;Z.test(t.nodeName)&&!b._data(t,\"changeBubbles\")&&(b.event.add(t,\"change._change\",function(e){!this.parentNode||e.isSimulated||e.isTrigger||b.event.simulate(\"change\",this.parentNode,e,!0)}),b._data(t,\"changeBubbles\",!0))}),t)},handle:function(e){var n=e.target;return this!==n||e.isSimulated||e.isTrigger||\"radio\"!==n.type&&\"checkbox\"!==n.type?e.handleObj.handler.apply(this,arguments):t},teardown:function(){return b.event.remove(this,\"._change\"),!Z.test(this.nodeName)}}),b.support.focusinBubbles||b.each({focus:\"focusin\",blur:\"focusout\"},function(e,t){var n=0,r=function(e){b.event.simulate(t,e.target,b.event.fix(e),!0)};b.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),b.fn.extend({on:function(e,n,r,i,o){var a,s;if(\"object\"==typeof e){\"string\"!=typeof n&&(r=r||n,n=t);for(a in e)this.on(a,n,r,e[a],o);return this}if(null==r&&null==i?(i=n,r=n=t):null==i&&(\"string\"==typeof n?(i=r,r=t):(i=r,r=n,n=t)),i===!1)i=ot;else if(!i)return this;return 1===o&&(s=i,i=function(e){return b().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=b.guid++)),this.each(function(){b.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,b(e.delegateTarget).off(i.namespace?i.origType+\".\"+i.namespace:i.origType,i.selector,i.handler),this;if(\"object\"==typeof e){for(o in e)this.off(o,n,e[o]);return this}return(n===!1||\"function\"==typeof n)&&(r=n,n=t),r===!1&&(r=ot),this.each(function(){b.event.remove(this,e,r,n)})},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},trigger:function(e,t){return this.each(function(){b.event.trigger(e,t,this)})},triggerHandler:function(e,n){var r=this[0];return r?b.event.trigger(e,n,r,!0):t}}),function(e,t){var n,r,i,o,a,s,l,u,c,d,p,f,h,g,m,y,v,x=\"sizzle\"+-new Date,N=e.document,w={},T=0,C=0,k=it(),E=it(),A=it(),S=typeof t,D=1<<31,L=[],H=L.pop,j=L.push,B=L.slice,M=L.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},_=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",O=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",F=O.replace(\"w\",\"w#\"),P=\"([*^$|!~]?=)\",q=\"\\\\[\"+_+\"*(\"+O+\")\"+_+\"*(?:\"+P+_+\"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\"+F+\")|)|)\"+_+\"*\\\\]\",W=\":(\"+O+\")(?:\\\\(((['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+q.replace(3,8)+\")*)|.*)\\\\)|)\",$=RegExp(\"^\"+_+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+_+\"+$\",\"g\"),I=RegExp(\"^\"+_+\"*,\"+_+\"*\"),R=RegExp(\"^\"+_+\"*([\\\\x20\\\\t\\\\r\\\\n\\\\f>+~])\"+_+\"*\"),z=RegExp(W),X=RegExp(\"^\"+F+\"$\"),U={ID:RegExp(\"^#(\"+O+\")\"),CLASS:RegExp(\"^\\\\.(\"+O+\")\"),NAME:RegExp(\"^\\\\[name=['\\\"]?(\"+O+\")['\\\"]?\\\\]\"),TAG:RegExp(\"^(\"+O.replace(\"w\",\"w*\")+\")\"),ATTR:RegExp(\"^\"+q),PSEUDO:RegExp(\"^\"+W),CHILD:RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+_+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+_+\"*(?:([+-]|)\"+_+\"*(\\\\d+)|))\"+_+\"*\\\\)|)\",\"i\"),needsContext:RegExp(\"^\"+_+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+_+\"*((?:-\\\\d)?\\\\d*)\"+_+\"*\\\\)|)(?=[^-]|$)\",\"i\")},V=/[\\x20\\t\\r\\n\\f]*[+~]/,J=/^[^{]+\\{\\s*\\[native code/,Q=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,Y=/^(?:input|select|textarea|button)$/i,K=/^h\\d$/i,G=/'|\\\\/g,Z=/\\=[\\x20\\t\\r\\n\\f]*([^'\"\\]]*)[\\x20\\t\\r\\n\\f]*\\]/g,et=/\\\\([\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|.)/g,tt=function(e,t){var n=\"0x\"+t-65536;return n!==n?t:0>n?String.fromCharCode(n+65536):String.fromCharCode(55296|n>>10,56320|1023&n)};try{B.call(N.documentElement.childNodes,0)[0].nodeType}catch(nt){B=function(e){var t,n=[];while(t=this[e++])n.push(t);return n}}function rt(e){return J.test(e+\"\")}function it(){var e,t=[];return e=function(n,r){return t.push(n+=\" \")>i.cacheLength&&delete e[t.shift()],e[n]=r}}function ot(e){return e[x]=!0,e}function at(e){var t=d.createElement(\"div\");try{return e(t)}catch(n){return!1}finally{t=null}}function st(e,t,n,r){var i,o,a,s,l,u,p,g,m,v;if((t?t.ownerDocument||t:N)!==d&&c(t),t=t||d,n=n||[],!e||\"string\"!=typeof e)return n;if(1!==(s=t.nodeType)&&9!==s)return[];if(!f&&!r){if(i=Q.exec(e))if(a=i[1]){if(9===s){if(o=t.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&y(t,o)&&o.id===a)return n.push(o),n}else{if(i[2])return j.apply(n,B.call(t.getElementsByTagName(e),0)),n;if((a=i[3])&&w.getByClassName&&t.getElementsByClassName)return j.apply(n,B.call(t.getElementsByClassName(a),0)),n}if(w.qsa&&!h.test(e)){if(p=!0,g=x,m=t,v=9===s&&e,1===s&&\"object\"!==t.nodeName.toLowerCase()){u=pt(e),(p=t.getAttribute(\"id\"))?g=p.replace(G,\"\\\\$&\"):t.setAttribute(\"id\",g),g=\"[id='\"+g+\"'] \",l=u.length;while(l--)u[l]=g+ft(u[l]);m=V.test(e)&&t.parentNode||t,v=u.join(\",\")}if(v)try{return j.apply(n,B.call(m.querySelectorAll(v),0)),n}catch(b){}finally{p||t.removeAttribute(\"id\")}}}return Nt(e.replace($,\"$1\"),t,n,r)}a=st.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?\"HTML\"!==t.nodeName:!1},c=st.setDocument=function(e){var n=e?e.ownerDocument||e:N;return n!==d&&9===n.nodeType&&n.documentElement?(d=n,p=n.documentElement,f=a(n),w.tagNameNoComments=at(function(e){return e.appendChild(n.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),w.attributes=at(function(e){e.innerHTML=\"<select></select>\";var t=typeof e.lastChild.getAttribute(\"multiple\");return\"boolean\"!==t&&\"string\"!==t}),w.getByClassName=at(function(e){return e.innerHTML=\"<div class='hidden e'></div><div class='hidden'></div>\",e.getElementsByClassName&&e.getElementsByClassName(\"e\").length?(e.lastChild.className=\"e\",2===e.getElementsByClassName(\"e\").length):!1}),w.getByName=at(function(e){e.id=x+0,e.innerHTML=\"<a name='\"+x+\"'></a><div name='\"+x+\"'></div>\",p.insertBefore(e,p.firstChild);var t=n.getElementsByName&&n.getElementsByName(x).length===2+n.getElementsByName(x+0).length;return w.getIdNotName=!n.getElementById(x),p.removeChild(e),t}),i.attrHandle=at(function(e){return e.innerHTML=\"<a href='#'></a>\",e.firstChild&&typeof e.firstChild.getAttribute!==S&&\"#\"===e.firstChild.getAttribute(\"href\")})?{}:{href:function(e){return e.getAttribute(\"href\",2)},type:function(e){return e.getAttribute(\"type\")}},w.getIdNotName?(i.find.ID=function(e,t){if(typeof t.getElementById!==S&&!f){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){return e.getAttribute(\"id\")===t}}):(i.find.ID=function(e,n){if(typeof n.getElementById!==S&&!f){var r=n.getElementById(e);return r?r.id===e||typeof r.getAttributeNode!==S&&r.getAttributeNode(\"id\").value===e?[r]:t:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){var n=typeof e.getAttributeNode!==S&&e.getAttributeNode(\"id\");return n&&n.value===t}}),i.find.TAG=w.tagNameNoComments?function(e,n){return typeof n.getElementsByTagName!==S?n.getElementsByTagName(e):t}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.NAME=w.getByName&&function(e,n){return typeof n.getElementsByName!==S?n.getElementsByName(name):t},i.find.CLASS=w.getByClassName&&function(e,n){return typeof n.getElementsByClassName===S||f?t:n.getElementsByClassName(e)},g=[],h=[\":focus\"],(w.qsa=rt(n.querySelectorAll))&&(at(function(e){e.innerHTML=\"<select><option selected=''></option></select>\",e.querySelectorAll(\"[selected]\").length||h.push(\"\\\\[\"+_+\"*(?:checked|disabled|ismap|multiple|readonly|selected|value)\"),e.querySelectorAll(\":checked\").length||h.push(\":checked\")}),at(function(e){e.innerHTML=\"<input type='hidden' i=''/>\",e.querySelectorAll(\"[i^='']\").length&&h.push(\"[*^$]=\"+_+\"*(?:\\\"\\\"|'')\"),e.querySelectorAll(\":enabled\").length||h.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),h.push(\",.*:\")})),(w.matchesSelector=rt(m=p.matchesSelector||p.mozMatchesSelector||p.webkitMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&at(function(e){w.disconnectedMatch=m.call(e,\"div\"),m.call(e,\"[s!='']:x\"),g.push(\"!=\",W)}),h=RegExp(h.join(\"|\")),g=RegExp(g.join(\"|\")),y=rt(p.contains)||p.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},v=p.compareDocumentPosition?function(e,t){var r;return e===t?(l=!0,0):(r=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t))?1&r||e.parentNode&&11===e.parentNode.nodeType?e===n||y(N,e)?-1:t===n||y(N,t)?1:0:4&r?-1:1:e.compareDocumentPosition?-1:1}:function(e,t){var r,i=0,o=e.parentNode,a=t.parentNode,s=[e],u=[t];if(e===t)return l=!0,0;if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:0;if(o===a)return lt(e,t);r=e;while(r=r.parentNode)s.unshift(r);r=t;while(r=r.parentNode)u.unshift(r);while(s[i]===u[i])i++;return i?lt(s[i],u[i]):s[i]===N?-1:u[i]===N?1:0},l=!1,[0,0].sort(v),w.detectDuplicates=l,d):d},st.matches=function(e,t){return st(e,null,null,t)},st.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&c(e),t=t.replace(Z,\"='$1']\"),!(!w.matchesSelector||f||g&&g.test(t)||h.test(t)))try{var n=m.call(e,t);if(n||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(r){}return st(t,d,null,[e]).length>0},st.contains=function(e,t){return(e.ownerDocument||e)!==d&&c(e),y(e,t)},st.attr=function(e,t){var n;return(e.ownerDocument||e)!==d&&c(e),f||(t=t.toLowerCase()),(n=i.attrHandle[t])?n(e):f||w.attributes?e.getAttribute(t):((n=e.getAttributeNode(t))||e.getAttribute(t))&&e[t]===!0?t:n&&n.specified?n.value:null},st.error=function(e){throw Error(\"Syntax error, unrecognized expression: \"+e)},st.uniqueSort=function(e){var t,n=[],r=1,i=0;if(l=!w.detectDuplicates,e.sort(v),l){for(;t=e[r];r++)t===e[r-1]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e};function lt(e,t){var n=t&&e,r=n&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function ut(e){return function(t){var n=t.nodeName.toLowerCase();return\"input\"===n&&t.type===e}}function ct(e){return function(t){var n=t.nodeName.toLowerCase();return(\"input\"===n||\"button\"===n)&&t.type===e}}function dt(e){return ot(function(t){return t=+t,ot(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}o=st.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=st.selectors={cacheLength:50,createPseudo:ot,match:U,find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(et,tt),e[3]=(e[4]||e[5]||\"\").replace(et,tt),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||st.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&st.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return U.CHILD.test(e[0])?null:(e[4]?e[2]=e[4]:n&&z.test(n)&&(t=pt(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){return\"*\"===e?function(){return!0}:(e=e.replace(et,tt).toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(e){var t=k[e+\" \"];return t||(t=RegExp(\"(^|\"+_+\")\"+e+\"(\"+_+\"|$)\"))&&k(e,function(e){return t.test(e.className||typeof e.getAttribute!==S&&e.getAttribute(\"class\")||\"\")})},ATTR:function(e,t,n){return function(r){var i=st.attr(r,e);return null==i?\"!=\"===t:t?(i+=\"\",\"=\"===t?i===n:\"!=\"===t?i!==n:\"^=\"===t?n&&0===i.indexOf(n):\"*=\"===t?n&&i.indexOf(n)>-1:\"$=\"===t?n&&i.slice(-n.length)===n:\"~=\"===t?(\" \"+i+\" \").indexOf(n)>-1:\"|=\"===t?i===n||i.slice(0,n.length+1)===n+\"-\":!1):!0}},CHILD:function(e,t,n,r,i){var o=\"nth\"!==e.slice(0,3),a=\"last\"!==e.slice(-4),s=\"of-type\"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,p,f,h,g=o!==a?\"nextSibling\":\"previousSibling\",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!l&&!s;if(m){if(o){while(g){d=t;while(d=d[g])if(s?d.nodeName.toLowerCase()===y:1===d.nodeType)return!1;h=g=\"only\"===e&&!h&&\"nextSibling\"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){c=m[x]||(m[x]={}),u=c[e]||[],f=u[0]===T&&u[1],p=u[0]===T&&u[2],d=f&&m.childNodes[f];while(d=++f&&d&&d[g]||(p=f=0)||h.pop())if(1===d.nodeType&&++p&&d===t){c[e]=[T,f,p];break}}else if(v&&(u=(t[x]||(t[x]={}))[e])&&u[0]===T)p=u[1];else while(d=++f&&d&&d[g]||(p=f=0)||h.pop())if((s?d.nodeName.toLowerCase()===y:1===d.nodeType)&&++p&&(v&&((d[x]||(d[x]={}))[e]=[T,p]),d===t))break;return p-=i,p===r||0===p%r&&p/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||st.error(\"unsupported pseudo: \"+e);return r[x]?r(t):r.length>1?(n=[e,e,\"\",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ot(function(e,n){var i,o=r(e,t),a=o.length;while(a--)i=M.call(e,o[a]),e[i]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ot(function(e){var t=[],n=[],r=s(e.replace($,\"$1\"));return r[x]?ot(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:ot(function(e){return function(t){return st(e,t).length>0}}),contains:ot(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:ot(function(e){return X.test(e||\"\")||st.error(\"unsupported lang: \"+e),e=e.replace(et,tt).toLowerCase(),function(t){var n;do if(n=f?t.getAttribute(\"xml:lang\")||t.getAttribute(\"lang\"):t.lang)return n=n.toLowerCase(),n===e||0===n.indexOf(e+\"-\");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>\"@\"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||t.toLowerCase()===e.type)},first:dt(function(){return[0]}),last:dt(function(e,t){return[t-1]}),eq:dt(function(e,t,n){return[0>n?n+t:n]}),even:dt(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:dt(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:dt(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:dt(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}};for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[n]=ut(n);for(n in{submit:!0,reset:!0})i.pseudos[n]=ct(n);function pt(e,t){var n,r,o,a,s,l,u,c=E[e+\" \"];if(c)return t?0:c.slice(0);s=e,l=[],u=i.preFilter;while(s){(!n||(r=I.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=R.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace($,\" \")}),s=s.slice(n.length));for(a in i.filter)!(r=U[a].exec(s))||u[a]&&!(r=u[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?st.error(e):E(e,l).slice(0)}function ft(e){var t=0,n=e.length,r=\"\";for(;n>t;t++)r+=e[t].value;return r}function ht(e,t,n){var i=t.dir,o=n&&\"parentNode\"===i,a=C++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,s){var l,u,c,d=T+\" \"+a;if(s){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,s))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[x]||(t[x]={}),(u=c[i])&&u[0]===d){if((l=u[1])===!0||l===r)return l===!0}else if(u=c[i]=[d],u[1]=e(t,n,s)||r,u[1]===!0)return!0}}function gt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function mt(e,t,n,r,i){var o,a=[],s=0,l=e.length,u=null!=t;for(;l>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),u&&t.push(s));return a}function yt(e,t,n,r,i,o){return r&&!r[x]&&(r=yt(r)),i&&!i[x]&&(i=yt(i,o)),ot(function(o,a,s,l){var u,c,d,p=[],f=[],h=a.length,g=o||xt(t||\"*\",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:mt(g,p,e,s,l),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,l),r){u=mt(y,f),r(u,[],s,l),c=u.length;while(c--)(d=u[c])&&(y[f[c]]=!(m[f[c]]=d))}if(o){if(i||e){if(i){u=[],c=y.length;while(c--)(d=y[c])&&u.push(m[c]=d);i(null,y=[],u,l)}c=y.length;while(c--)(d=y[c])&&(u=i?M.call(o,d):p[c])>-1&&(o[u]=!(a[u]=d))}}else y=mt(y===a?y.splice(h,y.length):y),i?i(null,a,y,l):j.apply(a,y)})}function vt(e){var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[\" \"],l=a?1:0,c=ht(function(e){return e===t},s,!0),d=ht(function(e){return M.call(t,e)>-1},s,!0),p=[function(e,n,r){return!a&&(r||n!==u)||((t=n).nodeType?c(e,n,r):d(e,n,r))}];for(;o>l;l++)if(n=i.relative[e[l].type])p=[ht(gt(p),n)];else{if(n=i.filter[e[l].type].apply(null,e[l].matches),n[x]){for(r=++l;o>r;r++)if(i.relative[e[r].type])break;return yt(l>1&&gt(p),l>1&&ft(e.slice(0,l-1)).replace($,\"$1\"),n,r>l&&vt(e.slice(l,r)),o>r&&vt(e=e.slice(r)),o>r&&ft(e))}p.push(n)}return gt(p)}function bt(e,t){var n=0,o=t.length>0,a=e.length>0,s=function(s,l,c,p,f){var h,g,m,y=[],v=0,b=\"0\",x=s&&[],N=null!=f,w=u,C=s||a&&i.find.TAG(\"*\",f&&l.parentNode||l),k=T+=null==w?1:Math.random()||.1;for(N&&(u=l!==d&&l,r=n);null!=(h=C[b]);b++){if(a&&h){g=0;while(m=e[g++])if(m(h,l,c)){p.push(h);break}N&&(T=k,r=++n)}o&&((h=!m&&h)&&v--,s&&x.push(h))}if(v+=b,o&&b!==v){g=0;while(m=t[g++])m(x,y,l,c);if(s){if(v>0)while(b--)x[b]||y[b]||(y[b]=H.call(p));y=mt(y)}j.apply(p,y),N&&!s&&y.length>0&&v+t.length>1&&st.uniqueSort(p)}return N&&(T=k,u=w),x};return o?ot(s):s}s=st.compile=function(e,t){var n,r=[],i=[],o=A[e+\" \"];if(!o){t||(t=pt(e)),n=t.length;while(n--)o=vt(t[n]),o[x]?r.push(o):i.push(o);o=A(e,bt(i,r))}return o};function xt(e,t,n){var r=0,i=t.length;for(;i>r;r++)st(e,t[r],n);return n}function Nt(e,t,n,r){var o,a,l,u,c,d=pt(e);if(!r&&1===d.length){if(a=d[0]=d[0].slice(0),a.length>2&&\"ID\"===(l=a[0]).type&&9===t.nodeType&&!f&&i.relative[a[1].type]){if(t=i.find.ID(l.matches[0].replace(et,tt),t)[0],!t)return n;e=e.slice(a.shift().value.length)}o=U.needsContext.test(e)?0:a.length;while(o--){if(l=a[o],i.relative[u=l.type])break;if((c=i.find[u])&&(r=c(l.matches[0].replace(et,tt),V.test(a[0].type)&&t.parentNode||t))){if(a.splice(o,1),e=r.length&&ft(a),!e)return j.apply(n,B.call(r,0)),n;break}}}return s(e,d)(r,t,f,n,V.test(e)),n}i.pseudos.nth=i.pseudos.eq;function wt(){}i.filters=wt.prototype=i.pseudos,i.setFilters=new wt,c(),st.attr=b.attr,b.find=st,b.expr=st.selectors,b.expr[\":\"]=b.expr.pseudos,b.unique=st.uniqueSort,b.text=st.getText,b.isXMLDoc=st.isXML,b.contains=st.contains}(e);var at=/Until$/,st=/^(?:parents|prev(?:Until|All))/,lt=/^.[^:#\\[\\.,]*$/,ut=b.expr.match.needsContext,ct={children:!0,contents:!0,next:!0,prev:!0};b.fn.extend({find:function(e){var t,n,r,i=this.length;if(\"string\"!=typeof e)return r=this,this.pushStack(b(e).filter(function(){for(t=0;i>t;t++)if(b.contains(r[t],this))return!0}));for(n=[],t=0;i>t;t++)b.find(e,this[t],n);return n=this.pushStack(i>1?b.unique(n):n),n.selector=(this.selector?this.selector+\" \":\"\")+e,n},has:function(e){var t,n=b(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(b.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(pt(this,e,!1))},filter:function(e){return this.pushStack(pt(this,e,!0))},is:function(e){return!!e&&(\"string\"==typeof e?ut.test(e)?b(e,this.context).index(this[0])>=0:b.filter(e,this).length>0:this.filter(e).length>0)},closest:function(e,t){var n,r=0,i=this.length,o=[],a=ut.test(e)||\"string\"!=typeof e?b(e,t||this.context):0;for(;i>r;r++){n=this[r];while(n&&n.ownerDocument&&n!==t&&11!==n.nodeType){if(a?a.index(n)>-1:b.find.matchesSelector(n,e)){o.push(n);break}n=n.parentNode}}return this.pushStack(o.length>1?b.unique(o):o)},index:function(e){return e?\"string\"==typeof e?b.inArray(this[0],b(e)):b.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n=\"string\"==typeof e?b(e,t):b.makeArray(e&&e.nodeType?[e]:e),r=b.merge(this.get(),n);return this.pushStack(b.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.fn.andSelf=b.fn.addBack;function dt(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return b.dir(e,\"parentNode\")},parentsUntil:function(e,t,n){return b.dir(e,\"parentNode\",n)},next:function(e){return dt(e,\"nextSibling\")},prev:function(e){return dt(e,\"previousSibling\")},nextAll:function(e){return b.dir(e,\"nextSibling\")},prevAll:function(e){return b.dir(e,\"previousSibling\")},nextUntil:function(e,t,n){return b.dir(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return b.dir(e,\"previousSibling\",n)},siblings:function(e){return b.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return b.sibling(e.firstChild)},contents:function(e){return b.nodeName(e,\"iframe\")?e.contentDocument||e.contentWindow.document:b.merge([],e.childNodes)}},function(e,t){b.fn[e]=function(n,r){var i=b.map(this,t,n);return at.test(e)||(r=n),r&&\"string\"==typeof r&&(i=b.filter(r,i)),i=this.length>1&&!ct[e]?b.unique(i):i,this.length>1&&st.test(e)&&(i=i.reverse()),this.pushStack(i)}}),b.extend({filter:function(e,t,n){return n&&(e=\":not(\"+e+\")\"),1===t.length?b.find.matchesSelector(t[0],e)?[t[0]]:[]:b.find.matches(e,t)},dir:function(e,n,r){var i=[],o=e[n];while(o&&9!==o.nodeType&&(r===t||1!==o.nodeType||!b(o).is(r)))1===o.nodeType&&i.push(o),o=o[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function pt(e,t,n){if(t=t||0,b.isFunction(t))return b.grep(e,function(e,r){var i=!!t.call(e,r,e);return i===n});if(t.nodeType)return b.grep(e,function(e){return e===t===n});if(\"string\"==typeof t){var r=b.grep(e,function(e){return 1===e.nodeType});if(lt.test(t))return b.filter(t,r,!n);t=b.filter(t,r)}return b.grep(e,function(e){return b.inArray(e,t)>=0===n})}function ft(e){var t=ht.split(\"|\"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}var ht=\"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",gt=/ jQuery\\d+=\"(?:null|\\d+)\"/g,mt=RegExp(\"<(?:\"+ht+\")[\\\\s/>]\",\"i\"),yt=/^\\s+/,vt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,bt=/<([\\w:]+)/,xt=/<tbody/i,Nt=/<|&#?\\w+;/,wt=/<(?:script|style|link)/i,Tt=/^(?:checkbox|radio)$/i,Ct=/checked\\s*(?:[^=]|=\\s*.checked.)/i,kt=/^$|\\/(?:java|ecma)script/i,Et=/^true\\/(.*)/,At=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,St={option:[1,\"<select multiple='multiple'>\",\"</select>\"],legend:[1,\"<fieldset>\",\"</fieldset>\"],area:[1,\"<map>\",\"</map>\"],param:[1,\"<object>\",\"</object>\"],thead:[1,\"<table>\",\"</table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],col:[2,\"<table><tbody></tbody><colgroup>\",\"</colgroup></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:b.support.htmlSerialize?[0,\"\",\"\"]:[1,\"X<div>\",\"</div>\"]},Dt=ft(o),Lt=Dt.appendChild(o.createElement(\"div\"));St.optgroup=St.option,St.tbody=St.tfoot=St.colgroup=St.caption=St.thead,St.th=St.td,b.fn.extend({text:function(e){return b.access(this,function(e){return e===t?b.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},wrapAll:function(e){if(b.isFunction(e))return this.each(function(t){b(this).wrapAll(e.call(this,t))});if(this[0]){var t=b(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&1===e.firstChild.nodeType)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return b.isFunction(e)?this.each(function(t){b(this).wrapInner(e.call(this,t))}):this.each(function(){var t=b(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b.isFunction(e);return this.each(function(n){b(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){b.nodeName(this,\"body\")||b(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.appendChild(e)})},prepend:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.insertBefore(e,this.firstChild)})},before:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=0;for(;null!=(n=this[r]);r++)(!e||b.filter(e,[n]).length>0)&&(t||1!==n.nodeType||b.cleanData(Ft(n)),n.parentNode&&(t&&b.contains(n.ownerDocument,n)&&Mt(Ft(n,\"script\")),n.parentNode.removeChild(n)));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++){1===e.nodeType&&b.cleanData(Ft(e,!1));while(e.firstChild)e.removeChild(e.firstChild);e.options&&b.nodeName(e,\"select\")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return b.clone(this,e,t)})},html:function(e){return b.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return 1===n.nodeType?n.innerHTML.replace(gt,\"\"):t;if(!(\"string\"!=typeof e||wt.test(e)||!b.support.htmlSerialize&&mt.test(e)||!b.support.leadingWhitespace&&yt.test(e)||St[(bt.exec(e)||[\"\",\"\"])[1].toLowerCase()])){e=e.replace(vt,\"<$1></$2>\");try{for(;i>r;r++)n=this[r]||{},1===n.nodeType&&(b.cleanData(Ft(n,!1)),n.innerHTML=e);n=0}catch(o){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(e){var t=b.isFunction(e);return t||\"string\"==typeof e||(e=b(e).not(this).detach()),this.domManip([e],!0,function(e){var t=this.nextSibling,n=this.parentNode;n&&(b(this).remove(),n.insertBefore(e,t))})},detach:function(e){return this.remove(e,!0)},domManip:function(e,n,r){e=p.apply([],e);var i,o,a,s,l,u,c=0,d=this.length,f=this,h=d-1,g=e[0],m=b.isFunction(g);if(m||!(1>=d||\"string\"!=typeof g||b.support.checkClone)&&Ct.test(g))return this.each(function(i){var o=f.eq(i);m&&(e[0]=g.call(this,i,n?o.html():t)),o.domManip(e,n,r)});if(d&&(u=b.buildFragment(e,this[0].ownerDocument,!1,this),i=u.firstChild,1===u.childNodes.length&&(u=i),i)){for(n=n&&b.nodeName(i,\"tr\"),s=b.map(Ft(u,\"script\"),jt),a=s.length;d>c;c++)o=u,c!==h&&(o=b.clone(o,!0,!0),a&&b.merge(s,Ft(o,\"script\"))),r.call(n&&b.nodeName(this[c],\"table\")?Ht(this[c],\"tbody\"):this[c],o,c);if(a)for(l=s[s.length-1].ownerDocument,b.map(s,Bt),c=0;a>c;c++)o=s[c],kt.test(o.type||\"\")&&!b._data(o,\"globalEval\")&&b.contains(l,o)&&(o.src?b.ajax({url:o.src,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0}):b.globalEval((o.text||o.textContent||o.innerHTML||\"\").replace(At,\"\")));u=i=null}return this}});function Ht(e,t){return e.getElementsByTagName(t)[0]||e.appendChild(e.ownerDocument.createElement(t))}function jt(e){var t=e.getAttributeNode(\"type\");return e.type=(t&&t.specified)+\"/\"+e.type,e}function Bt(e){var t=Et.exec(e.type);return t?e.type=t[1]:e.removeAttribute(\"type\"),e}function Mt(e,t){var n,r=0;for(;null!=(n=e[r]);r++)b._data(n,\"globalEval\",!t||b._data(t[r],\"globalEval\"))}function _t(e,t){if(1===t.nodeType&&b.hasData(e)){var n,r,i,o=b._data(e),a=b._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)b.event.add(t,n,s[n][r])}a.data&&(a.data=b.extend({},a.data))}}function Ot(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!b.support.noCloneEvent&&t[b.expando]){i=b._data(t);for(r in i.events)b.removeEvent(t,r,i.handle);t.removeAttribute(b.expando)}\"script\"===n&&t.text!==e.text?(jt(t).text=e.text,Bt(t)):\"object\"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),b.support.html5Clone&&e.innerHTML&&!b.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):\"input\"===n&&Tt.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):\"option\"===n?t.defaultSelected=t.selected=e.defaultSelected:(\"input\"===n||\"textarea\"===n)&&(t.defaultValue=e.defaultValue)}}b.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,t){b.fn[e]=function(e){var n,r=0,i=[],o=b(e),a=o.length-1;for(;a>=r;r++)n=r===a?this:this.clone(!0),b(o[r])[t](n),f.apply(i,n.get());return this.pushStack(i)}});function Ft(e,n){var r,o,a=0,s=typeof e.getElementsByTagName!==i?e.getElementsByTagName(n||\"*\"):typeof e.querySelectorAll!==i?e.querySelectorAll(n||\"*\"):t;if(!s)for(s=[],r=e.childNodes||e;null!=(o=r[a]);a++)!n||b.nodeName(o,n)?s.push(o):b.merge(s,Ft(o,n));return n===t||n&&b.nodeName(e,n)?b.merge([e],s):s}function Pt(e){Tt.test(e.type)&&(e.defaultChecked=e.checked)}b.extend({clone:function(e,t,n){var r,i,o,a,s,l=b.contains(e.ownerDocument,e);if(b.support.html5Clone||b.isXMLDoc(e)||!mt.test(\"<\"+e.nodeName+\">\")?o=e.cloneNode(!0):(Lt.innerHTML=e.outerHTML,Lt.removeChild(o=Lt.firstChild)),!(b.support.noCloneEvent&&b.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(r=Ft(o),s=Ft(e),a=0;null!=(i=s[a]);++a)r[a]&&Ot(i,r[a]);if(t)if(n)for(s=s||Ft(e),r=r||Ft(o),a=0;null!=(i=s[a]);a++)_t(i,r[a]);else _t(e,o);return r=Ft(o,\"script\"),r.length>0&&Mt(r,!l&&Ft(e,\"script\")),r=s=i=null,o},buildFragment:function(e,t,n,r){var i,o,a,s,l,u,c,d=e.length,p=ft(t),f=[],h=0;for(;d>h;h++)if(o=e[h],o||0===o)if(\"object\"===b.type(o))b.merge(f,o.nodeType?[o]:o);else if(Nt.test(o)){s=s||p.appendChild(t.createElement(\"div\")),l=(bt.exec(o)||[\"\",\"\"])[1].toLowerCase(),c=St[l]||St._default,s.innerHTML=c[1]+o.replace(vt,\"<$1></$2>\")+c[2],i=c[0];while(i--)s=s.lastChild;if(!b.support.leadingWhitespace&&yt.test(o)&&f.push(t.createTextNode(yt.exec(o)[0])),!b.support.tbody){o=\"table\"!==l||xt.test(o)?\"<table>\"!==c[1]||xt.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;while(i--)b.nodeName(u=o.childNodes[i],\"tbody\")&&!u.childNodes.length&&o.removeChild(u)\n}b.merge(f,s.childNodes),s.textContent=\"\";while(s.firstChild)s.removeChild(s.firstChild);s=p.lastChild}else f.push(t.createTextNode(o));s&&p.removeChild(s),b.support.appendChecked||b.grep(Ft(f,\"input\"),Pt),h=0;while(o=f[h++])if((!r||-1===b.inArray(o,r))&&(a=b.contains(o.ownerDocument,o),s=Ft(p.appendChild(o),\"script\"),a&&Mt(s),n)){i=0;while(o=s[i++])kt.test(o.type||\"\")&&n.push(o)}return s=null,p},cleanData:function(e,t){var n,r,o,a,s=0,l=b.expando,u=b.cache,d=b.support.deleteExpando,p=b.event.special;for(;null!=(n=e[s]);s++)if((t||b.acceptData(n))&&(o=n[l],a=o&&u[o])){if(a.events)for(r in a.events)p[r]?b.event.remove(n,r):b.removeEvent(n,r,a.handle);u[o]&&(delete u[o],d?delete n[l]:typeof n.removeAttribute!==i?n.removeAttribute(l):n[l]=null,c.push(o))}}});var qt,Wt,$t,It=/alpha\\([^)]*\\)/i,Rt=/opacity\\s*=\\s*([^)]*)/,zt=/^(top|right|bottom|left)$/,Xt=/^(none|table(?!-c[ea]).+)/,Ut=/^margin/,Vt=RegExp(\"^(\"+x+\")(.*)$\",\"i\"),Jt=RegExp(\"^(\"+x+\")(?!px)[a-z%]+$\",\"i\"),Qt=RegExp(\"^([+-])=(\"+x+\")\",\"i\"),Yt={BODY:\"block\"},Kt={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Gt={letterSpacing:0,fontWeight:400},Zt=[\"Top\",\"Right\",\"Bottom\",\"Left\"],en=[\"Webkit\",\"O\",\"Moz\",\"ms\"];function tn(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=en.length;while(i--)if(t=en[i]+n,t in e)return t;return r}function nn(e,t){return e=t||e,\"none\"===b.css(e,\"display\")||!b.contains(e.ownerDocument,e)}function rn(e,t){var n,r,i,o=[],a=0,s=e.length;for(;s>a;a++)r=e[a],r.style&&(o[a]=b._data(r,\"olddisplay\"),n=r.style.display,t?(o[a]||\"none\"!==n||(r.style.display=\"\"),\"\"===r.style.display&&nn(r)&&(o[a]=b._data(r,\"olddisplay\",ln(r.nodeName)))):o[a]||(i=nn(r),(n&&\"none\"!==n||!i)&&b._data(r,\"olddisplay\",i?n:b.css(r,\"display\"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&\"none\"!==r.style.display&&\"\"!==r.style.display||(r.style.display=t?o[a]||\"\":\"none\"));return e}b.fn.extend({css:function(e,n){return b.access(this,function(e,n,r){var i,o,a={},s=0;if(b.isArray(n)){for(o=Wt(e),i=n.length;i>s;s++)a[n[s]]=b.css(e,n[s],!1,o);return a}return r!==t?b.style(e,n,r):b.css(e,n)},e,n,arguments.length>1)},show:function(){return rn(this,!0)},hide:function(){return rn(this)},toggle:function(e){var t=\"boolean\"==typeof e;return this.each(function(){(t?e:nn(this))?b(this).show():b(this).hide()})}}),b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=$t(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":b.support.cssFloat?\"cssFloat\":\"styleFloat\"},style:function(e,n,r,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,s,l=b.camelCase(n),u=e.style;if(n=b.cssProps[l]||(b.cssProps[l]=tn(u,l)),s=b.cssHooks[n]||b.cssHooks[l],r===t)return s&&\"get\"in s&&(o=s.get(e,!1,i))!==t?o:u[n];if(a=typeof r,\"string\"===a&&(o=Qt.exec(r))&&(r=(o[1]+1)*o[2]+parseFloat(b.css(e,n)),a=\"number\"),!(null==r||\"number\"===a&&isNaN(r)||(\"number\"!==a||b.cssNumber[l]||(r+=\"px\"),b.support.clearCloneStyle||\"\"!==r||0!==n.indexOf(\"background\")||(u[n]=\"inherit\"),s&&\"set\"in s&&(r=s.set(e,r,i))===t)))try{u[n]=r}catch(c){}}},css:function(e,n,r,i){var o,a,s,l=b.camelCase(n);return n=b.cssProps[l]||(b.cssProps[l]=tn(e.style,l)),s=b.cssHooks[n]||b.cssHooks[l],s&&\"get\"in s&&(a=s.get(e,!0,r)),a===t&&(a=$t(e,n,i)),\"normal\"===a&&n in Gt&&(a=Gt[n]),\"\"===r||r?(o=parseFloat(a),r===!0||b.isNumeric(o)?o||0:a):a},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),e.getComputedStyle?(Wt=function(t){return e.getComputedStyle(t,null)},$t=function(e,n,r){var i,o,a,s=r||Wt(e),l=s?s.getPropertyValue(n)||s[n]:t,u=e.style;return s&&(\"\"!==l||b.contains(e.ownerDocument,e)||(l=b.style(e,n)),Jt.test(l)&&Ut.test(n)&&(i=u.width,o=u.minWidth,a=u.maxWidth,u.minWidth=u.maxWidth=u.width=l,l=s.width,u.width=i,u.minWidth=o,u.maxWidth=a)),l}):o.documentElement.currentStyle&&(Wt=function(e){return e.currentStyle},$t=function(e,n,r){var i,o,a,s=r||Wt(e),l=s?s[n]:t,u=e.style;return null==l&&u&&u[n]&&(l=u[n]),Jt.test(l)&&!zt.test(n)&&(i=u.left,o=e.runtimeStyle,a=o&&o.left,a&&(o.left=e.currentStyle.left),u.left=\"fontSize\"===n?\"1em\":l,l=u.pixelLeft+\"px\",u.left=i,a&&(o.left=a)),\"\"===l?\"auto\":l});function on(e,t,n){var r=Vt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||\"px\"):t}function an(e,t,n,r,i){var o=n===(r?\"border\":\"content\")?4:\"width\"===t?1:0,a=0;for(;4>o;o+=2)\"margin\"===n&&(a+=b.css(e,n+Zt[o],!0,i)),r?(\"content\"===n&&(a-=b.css(e,\"padding\"+Zt[o],!0,i)),\"margin\"!==n&&(a-=b.css(e,\"border\"+Zt[o]+\"Width\",!0,i))):(a+=b.css(e,\"padding\"+Zt[o],!0,i),\"padding\"!==n&&(a+=b.css(e,\"border\"+Zt[o]+\"Width\",!0,i)));return a}function sn(e,t,n){var r=!0,i=\"width\"===t?e.offsetWidth:e.offsetHeight,o=Wt(e),a=b.support.boxSizing&&\"border-box\"===b.css(e,\"boxSizing\",!1,o);if(0>=i||null==i){if(i=$t(e,t,o),(0>i||null==i)&&(i=e.style[t]),Jt.test(i))return i;r=a&&(b.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+an(e,t,n||(a?\"border\":\"content\"),r,o)+\"px\"}function ln(e){var t=o,n=Yt[e];return n||(n=un(e,t),\"none\"!==n&&n||(qt=(qt||b(\"<iframe frameborder='0' width='0' height='0'/>\").css(\"cssText\",\"display:block !important\")).appendTo(t.documentElement),t=(qt[0].contentWindow||qt[0].contentDocument).document,t.write(\"<!doctype html><html><body>\"),t.close(),n=un(e,t),qt.detach()),Yt[e]=n),n}function un(e,t){var n=b(t.createElement(e)).appendTo(t.body),r=b.css(n[0],\"display\");return n.remove(),r}b.each([\"height\",\"width\"],function(e,n){b.cssHooks[n]={get:function(e,r,i){return r?0===e.offsetWidth&&Xt.test(b.css(e,\"display\"))?b.swap(e,Kt,function(){return sn(e,n,i)}):sn(e,n,i):t},set:function(e,t,r){var i=r&&Wt(e);return on(e,t,r?an(e,n,r,b.support.boxSizing&&\"border-box\"===b.css(e,\"boxSizing\",!1,i),i):0)}}}),b.support.opacity||(b.cssHooks.opacity={get:function(e,t){return Rt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||\"\")?.01*parseFloat(RegExp.$1)+\"\":t?\"1\":\"\"},set:function(e,t){var n=e.style,r=e.currentStyle,i=b.isNumeric(t)?\"alpha(opacity=\"+100*t+\")\":\"\",o=r&&r.filter||n.filter||\"\";n.zoom=1,(t>=1||\"\"===t)&&\"\"===b.trim(o.replace(It,\"\"))&&n.removeAttribute&&(n.removeAttribute(\"filter\"),\"\"===t||r&&!r.filter)||(n.filter=It.test(o)?o.replace(It,i):o+\" \"+i)}}),b(function(){b.support.reliableMarginRight||(b.cssHooks.marginRight={get:function(e,n){return n?b.swap(e,{display:\"inline-block\"},$t,[e,\"marginRight\"]):t}}),!b.support.pixelPosition&&b.fn.position&&b.each([\"top\",\"left\"],function(e,n){b.cssHooks[n]={get:function(e,r){return r?(r=$t(e,n),Jt.test(r)?b(e).position()[n]+\"px\":r):t}}})}),b.expr&&b.expr.filters&&(b.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight||!b.support.reliableHiddenOffsets&&\"none\"===(e.style&&e.style.display||b.css(e,\"display\"))},b.expr.filters.visible=function(e){return!b.expr.filters.hidden(e)}),b.each({margin:\"\",padding:\"\",border:\"Width\"},function(e,t){b.cssHooks[e+t]={expand:function(n){var r=0,i={},o=\"string\"==typeof n?n.split(\" \"):[n];for(;4>r;r++)i[e+Zt[r]+t]=o[r]||o[r-2]||o[0];return i}},Ut.test(e)||(b.cssHooks[e+t].set=on)});var cn=/%20/g,dn=/\\[\\]$/,pn=/\\r?\\n/g,fn=/^(?:submit|button|image|reset|file)$/i,hn=/^(?:input|select|textarea|keygen)/i;b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=b.prop(this,\"elements\");return e?b.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!b(this).is(\":disabled\")&&hn.test(this.nodeName)&&!fn.test(e)&&(this.checked||!Tt.test(e))}).map(function(e,t){var n=b(this).val();return null==n?null:b.isArray(n)?b.map(n,function(e){return{name:t.name,value:e.replace(pn,\"\\r\\n\")}}):{name:t.name,value:n.replace(pn,\"\\r\\n\")}}).get()}}),b.param=function(e,n){var r,i=[],o=function(e,t){t=b.isFunction(t)?t():null==t?\"\":t,i[i.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(t)};if(n===t&&(n=b.ajaxSettings&&b.ajaxSettings.traditional),b.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,function(){o(this.name,this.value)});else for(r in e)gn(r,e[r],n,o);return i.join(\"&\").replace(cn,\"+\")};function gn(e,t,n,r){var i;if(b.isArray(t))b.each(t,function(t,i){n||dn.test(e)?r(e,i):gn(e+\"[\"+(\"object\"==typeof i?t:\"\")+\"]\",i,n,r)});else if(n||\"object\"!==b.type(t))r(e,t);else for(i in t)gn(e+\"[\"+i+\"]\",t[i],n,r)}b.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(e,t){b.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),b.fn.hover=function(e,t){return this.mouseenter(e).mouseleave(t||e)},e.jQuery=e.$=b,\"function\"==typeof define&&define.amd&&define.amd.jQuery&&define(\"jquery\",[],function(){return b})})(window);","\n(function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define('Chitin',['_', 'jquery', 'exports'], function(_, $, exports) {\n            // Export global even in AMD case in case this script is loaded with\n            // others that may still expect a global Chitin.\n            root.Chitin = factory(root, exports, _, $);\n        });\n    } else {\n        // Browser globals\n        root.Chitin = factory(root, {}, root._, (root.jQuery || root.Zepto));\n  }\n}(this, function (root, Chitin, _, $) {\n    'use strict';\n\n    /**\n     * @author <a href=\"mailto:doctor.hogart@gmail.com\">Konstantin Kitmanov</a>\n     * May be freely distributed under the MIT license.\n     */\n\n    // conflict management\n    var previousChitin = root.Chitin;\n\n    Chitin.noConflict = function () {\n        root.Chitin = previousChitin;\n        return this;\n    };\n\n    // `extend` code below borrowed from Backbone.js. 'Coz it's awesome!\n\n    var extend = function (protoProps, staticProps) {\n        var parent = this;\n        var child;\n\n        // The constructor function for the new subclass is either defined by you\n        // (the \"constructor\" property in your `extend` definition), or defaulted\n        // by us to simply call the parent's constructor.\n        if (protoProps && _.has(protoProps, 'constructor')) {\n            child = protoProps.constructor;\n        } else {\n            child = function () {\n                return parent.apply(this, arguments);\n            };\n        }\n\n        // Add static properties to the constructor function, if supplied.\n        _.extend(child, parent, staticProps);\n\n        // Set the prototype chain to inherit from `parent`, without calling\n        // `parent`'s constructor function.\n        var Surrogate = function () {\n            this.constructor = child;\n        };\n        Surrogate.prototype = parent.prototype;\n        child.prototype = new Surrogate;\n\n        // Add prototype properties (instance properties) to the subclass,\n        // if supplied.\n        if (protoProps) {\n            _.extend(child.prototype, protoProps);\n        }\n\n        // Set a convenience property in case the parent's prototype is needed\n        // later.\n        child.__super__ = parent.prototype;\n\n        return child;\n    };\n\n    // Events code below borrowed from Backbone.js. 'Coz it's awesome!\n\n    // Regular expression used to split event strings.\n    var eventSplitter = /\\s+/,\n        slice = [].slice,\n        reEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n    // Implement fancy features of the Events API such as multiple event\n    // names `\"change blur\"` and jQuery-style event maps `{change: action}`\n    // in terms of the existing API.\n    var eventsApi = function (obj, action, name, rest) {\n        if (!name) return true;\n        if (typeof name === 'object') {\n            for (var key in name) {\n                obj[action].apply(obj, [key, name[key]].concat(rest));\n            }\n        } else if (eventSplitter.test(name)) {\n            var names = name.split(eventSplitter);\n            for (var i = 0, l = names.length; i < l; i++) {\n                obj[action].apply(obj, [names[i]].concat(rest));\n            }\n        } else {\n            return true;\n        }\n    };\n\n    // Optimized internal dispatch function for triggering events. Tries to\n    // keep the usual cases speedy (most Backbone events have 3 arguments).\n    var triggerEvents = function (events, args) {\n        var ev, i = -1, l = events.length;\n        switch (args.length) {\n            case 0:\n                while (++i < l) (ev = events[i]).callback.call(ev.ctx);\n                return;\n            case 1:\n                while (++i < l) (ev = events[i]).callback.call(ev.ctx, args[0]);\n                return;\n            case 2:\n                while (++i < l) (ev = events[i]).callback.call(ev.ctx, args[0], args[1]);\n                return;\n            case 3:\n                while (++i < l) (ev = events[i]).callback.call(ev.ctx, args[0], args[1], args[2]);\n                return;\n            default:\n                while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);\n        }\n    };\n\n    // A module that can be mixed in to *any object* in order to provide it with\n    // custom events. You may bind with `on` or remove with `off` callback\n    // functions to an event; `trigger`-ing an event fires all callbacks in\n    // succession.\n    var Events = {\n\n        // Bind one or more space separated events, or an events map,\n        // to a `callback` function. Passing `\"all\"` will bind the callback to\n        // all events fired.\n        on: function (name, callback, context) {\n            if (!(eventsApi(this, 'on', name, [callback, context]) && callback)) return this;\n            this._events || (this._events = {});\n            var list = this._events[name] || (this._events[name] = []);\n            list.push({callback: callback, context: context, ctx: context || this});\n            return this;\n        },\n\n        // Bind events to only be triggered a single time. After the first time\n        // the callback is invoked, it will be removed.\n        once: function (name, callback, context) {\n            if (!(eventsApi(this, 'once', name, [callback, context]) && callback)) return this;\n            var self = this;\n            var once = _.once(function () {\n                self.off(name, once);\n                callback.apply(this, arguments);\n            });\n            once._callback = callback;\n            this.on(name, once, context);\n            return this;\n        },\n\n        // Remove one or many callbacks. If `context` is null, removes all\n        // callbacks with that function. If `callback` is null, removes all\n        // callbacks for the event. If `name` is null, removes all bound\n        // callbacks for all events.\n        off: function (name, callback, context) {\n            var list, ev, events, names, i, l, j, k;\n            if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;\n            if (!name && !callback && !context) {\n                this._events = {};\n                return this;\n            }\n\n            names = name ? [name] : _.keys(this._events);\n            for (i = 0, l = names.length; i < l; i++) {\n                name = names[i];\n                if (list = this._events[name]) {\n                    events = [];\n                    if (callback || context) {\n                        for (j = 0, k = list.length; j < k; j++) {\n                            ev = list[j];\n                            if ((callback && callback !== ev.callback &&\n                                callback !== ev.callback._callback) ||\n                                (context && context !== ev.context)) {\n                                events.push(ev);\n                            }\n                        }\n                    }\n                    this._events[name] = events;\n                }\n            }\n\n            return this;\n        },\n\n        // Trigger one or many events, firing all bound callbacks. Callbacks are\n        // passed the same arguments as `trigger` is, apart from the event name\n        // (unless you're listening on `\"all\"`, which will cause your callback to\n        // receive the true name of the event as the first argument).\n        trigger: function (name) {\n            if (!this._events) return this;\n            var args = slice.call(arguments, 1);\n            if (!eventsApi(this, 'trigger', name, args)) return this;\n            var events = this._events[name];\n            var allEvents = this._events.all;\n            if (events) triggerEvents(events, args);\n            if (allEvents) triggerEvents(allEvents, arguments);\n            return this;\n        },\n\n        // An inversion-of-control version of `on`. Tell *this* object to listen to\n        // an event in another object ... keeping track of what it's listening to.\n        listenTo: function (obj, name, callback) {\n            var listeners = this._listeners || (this._listeners = {});\n            var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));\n            listeners[id] = obj;\n            obj.on(name, typeof name === 'object' ? this : callback, this);\n            return this;\n        },\n\n        // Tell this object to stop listening to either specific events ... or\n        // to every object it's currently listening to.\n        stopListening: function (obj, name, callback) {\n            var listeners = this._listeners;\n            if (!listeners) return;\n            if (obj) {\n                obj.off(name, typeof name === 'object' ? this : callback, this);\n                if (!name && !callback) delete listeners[obj._listenerId];\n            } else {\n                if (typeof name === 'object') callback = this;\n                for (var id in listeners) {\n                    listeners[id].off(name, callback, this);\n                }\n                this._listeners = {};\n            }\n            return this;\n        }\n    };\n\n    // Root of hierarchy. Automatically calls initialize method\n    // which combines this.defaults and passed options into this.params\n    var Abstract = Chitin.Abstract = function (options) {\n        this.initialize(options);\n    };\n\n    Abstract.prototype = {\n        initialize: function (options) {\n            this.params = _.extend({}, this.defaults || {}, options || {});\n        }\n    };\n\n    Abstract.extend = extend;\n\n    // Root «class» with built-in Events.\n    var Observable = Chitin.Observable = Abstract.extend();\n    _.extend(Observable.prototype, Events);\n\n\n    var Widget = Chitin.Widget = Observable.extend({\n        $: function (selector) {\n            return this.$el.find(selector);\n        },\n\n        // override this method to change how you find your templates\n        _getTplNode: function (tpl) {\n            return $('script.js-tpl-' + tpl)\n        },\n\n        // override this method to change how do you operate your templates\n        getTemplate: function () {\n            var tpl = _.result(this, 'tpl');\n            if (!tpl) {\n                throw new Error('No tpl property defined');\n            }\n\n            var tplNode = this._getTplNode(tpl);\n            if (tplNode.length !== 1) {\n                throw new Error('Invalid tpl selector: \"' + tpl + '\" — no such nodes or too many.');\n            }\n\n            return _.template(tplNode.html());\n        },\n\n        render: function (data) {\n            this.$el.html(this.template(data));\n\n            this.onRender();\n        },\n\n        onRender: function () {\n            this.delegateEvents();\n            this._ensureUI();\n        },\n\n        _delegateEvents: function (events) {\n            var emitter = this.$el;\n            this._undelegateEvents();\n\n            for (var key in events) {\n                var method = events[key];\n                if (!_.isFunction(method)) {\n                    method = this[events[key]];\n                }\n                if (!method) {\n                    throw new Error('Method \"' + events[key] + '\" does not exist');\n                }\n                var match = key.match(reEventSplitter),\n                    eventName = match[1],\n                    selector = match[2];\n                method = _.bind(method, this);\n                eventName += '.delegateEvents' + this.cid;\n                if (selector === '') {\n                    emitter.on(eventName, method);\n                } else {\n                    emitter.on(eventName, selector, method);\n                }\n            }\n        },\n\n        _undelegateEvents: function() {\n            this.$el.off('.delegateEvents' + this.cid);\n        },\n\n        delegateEvents: function (events) {\n            if (!(events || (events = _.result(this, 'events')))) return;\n\n            this._delegateEvents(events);\n        },\n\n        delegateBusEvents: function (busEvents) {\n            this.stopListening(this.bus);\n\n            if (!(busEvents || (busEvents = _.result(this, 'busEvents')))) return;\n\n            _.each(busEvents, function (method, eventName) {\n                var fn;\n\n                if (_.isFunction(method)) {\n                    fn = method\n                } else if (_.isString(method) && this[method]) {\n                    fn = this[method]\n                } else {\n                    throw new Error('Method \"' + method + '\" does not exist or invalid')\n                }\n\n                this.listenTo(this.bus, eventName, fn)\n            }, this);\n        },\n\n        ensureSubWidgets: function (subWidgets) {\n            if (!(subWidgets || (subWidgets = _.result(this, 'subWidgets')))) return;\n\n            var cls,\n                options;\n            _.each(subWidgets, function (widgetClass, selector) {\n                if (_.isArray(widgetClass)) {\n                    cls = widgetClass[0];\n                    options = {};\n\n                    if (_.isFunction(widgetClass[1])) {\n                        options = widgetClass[1].call(this)\n                    } else if (_.isString(widgetClass[1])) {\n                        options = this[widgetClass[1]]\n                    }\n                } else {\n                    cls = widgetClass;\n                    options = {};\n                }\n                this.registerChild(selector, cls, options);\n            }, this);\n        },\n\n        _ensureUI: function (ui) {\n            ui || (ui = _.result(this, '_ui'));\n\n            if (!ui) { // nothing to do here anymore\n                return;\n            }\n\n            this.ui = {};\n\n            _.each(ui, function (selector, name) {\n                this.ui[name] = this.$(selector);\n            }, this)\n        },\n\n        registerChild: function (selector, widgetClass, options) {\n            this.children[selector] = new widgetClass(\n                _.extend({\n                    el: this.$(selector),\n                    bus: this.bus\n                }, options)\n            );\n        },\n\n        unregisterChild: function (name) {\n            var child = this.children[name];\n            if (child) {\n                child.destroy();\n                delete this.children[name];\n            }\n        },\n\n        initialize: function(options) {\n            Widget.__super__.initialize.call(this, options);\n\n            this.cid = _.uniqueId('widget');\n            this.$el = $(options.el);\n            this.template = this.getTemplate();\n\n            this.bus = this.params.bus;\n            this.delegateEvents();\n            this.delegateBusEvents();\n\n            this.children = {};\n        },\n\n        destroy: function () {\n            this._undelegateEvents();\n            this.off();\n            this.stopListening();\n\n            _.each(this.children, function (child, name) {\n                this.unregisterChild(name);\n            }, this);\n\n            this.$el.html('');\n        }\n    });\n\n    var Application = Chitin.Application = Observable.extend({\n        defaults: {\n            immediateStart: true,\n            rootWidget: Widget,\n            rootNode: 'html'\n        },\n\n        initialize: function (options) {\n            Application.__super__.initialize.call(this, options);\n\n            this.params.immediateStart && this.start();\n        },\n\n        start: function () {\n            this.root = new this.params.rootWidget({\n                bus: this,\n                el: this.params.rootNode\n            });\n\n            return this;\n        }\n    });\n\n    return Chitin;\n}));","\ndefine(\n    'Storable',[\n        'Chitin',\n        '_'\n    ],\n    function (Chitin, _) {\n        /**\n         * Something storable in localStorage via {@link Storage}\n         * @class Storable\n         */\n        var Storable = Chitin.Observable.extend({\n            initialize: function (options) {\n                Storable.__super__.initialize.call(this, options);\n\n                this.storage = new this.params.storage({key: this.params.key});\n                this.attrs = _.extend({}, this.params.attrs, this.storage.loadDump());\n            },\n\n            get: function (key, defaultVal) {\n                return key in this.attrs ? this.attrs[key] : defaultVal;\n            },\n\n            set: function (attrs, options) {\n                _.extend(this.attrs, attrs);\n                this.save();\n\n                options || (options = {silent: false});\n\n                if (!options.silent) {\n                    this.trigger('update');\n                }\n\n                return this;\n            },\n\n            reset: function (options) {\n                this.attrs = {};\n                this.save();\n\n                options || (options = {silent: false});\n\n                if (!options.silent) {\n                    this.trigger('update');\n                }\n\n                return this;\n            },\n\n            save: function () {\n                this.storage.save(this.attrs);\n            }\n        });\n\n        return Storable;\n    }\n);","\ndefine(\n    'Storage',[\n        'Chitin'\n    ],\n    function (Chitin) {\n        /**\n         * Abstract storage (in localStorage)\n         * @class Storage\n         */\n        var Storage = Chitin.Abstract.extend({\n            defaults: {\n                defaultVal: {}\n            },\n\n            initialize: function (options) {\n                Storage.__super__.initialize.call(this, options);\n            },\n\n            save: function (data) {\n                localStorage.setItem(this.params.key, JSON.stringify(data));\n            },\n\n            loadDump: function() {\n                var loaded = localStorage.getItem(this.params.key),\n                    result = this.params.defaultVal;\n\n                if (loaded) {\n                    try {\n                        result = JSON.parse(loaded)\n                    }\n                    catch(e) {}\n                }\n\n                return result;\n            }\n        });\n\n        return Storage;\n    }\n);","\ndefine(\n    'Decks',[\n        'Storable',\n        'Storage',\n        '_'\n    ],\n    function (Storable, Storage, _) {\n        /**\n         * Storing decks in appropriate way\n         * @extends Storable\n         * @class Decks\n         */\n        var Decks = Storable.extend({\n            defaults: {\n                key: 'decks',\n                attrs: [],\n                storage: Storage\n            },\n\n            initialize: function (options) {\n                Storable.__super__.initialize.call(this, options);\n\n                this.storage = new this.params.storage({key: this.params.key, defaultVal: []});\n\n                this.attrs = [];\n                this.builtIns = options.attrs;\n                this.attrs.push.apply(this.attrs, this.builtIns);\n\n                var dump = this.storage.loadDump();\n\n                this.attrs.push.apply(this.attrs, dump);\n            },\n\n            save: function () {\n                var attrs = _.filter(\n                    this.attrs,\n                    function (deck) {\n                        return !(!deck || deck.builtIn);\n                    }\n                );\n\n                this.storage.save(attrs);\n\n                this.attrs = [];\n                this.attrs.push.apply(this.attrs, this.builtIns);\n                this.attrs.push.apply(this.attrs, attrs);\n            },\n\n            deleteDeck: function (deckIndex, options) {\n                this.attrs[deckIndex] = null;\n\n                options = options || {silent: false};\n                if (!options.silent) {\n                    this.save();\n\n                    this.trigger('update');\n                }\n            }\n        }, {\n            createDeck: function () {\n                return {\n                    name: '',\n                    description: '',\n                    tags: [],\n                    content: [],\n                    testable: false,\n\n                    isNew: true\n                }\n            }\n        });\n\n        return Decks;\n    }\n);","\ndefine(\n    'Preferences',[\n        'Storable',\n        'Storage'\n    ],\n    function (Storable, Storage) {\n        /**\n         * @extends {Storable}\n         * @class Preferences\n         */\n        var Preferences = Storable.extend({\n            defaults: {\n                key: 'prefs',\n                storage: Storage,\n                attrs: {\n                    showCorrections: true,\n                    showExamples: true,\n                    showTranscriptions: true,\n                    hiddenDecks: {}\n                }\n            },\n\n            getPair: function () {\n                var pair = this.attrs.pair;\n                if (!pair) {\n                    return false\n                }\n\n                if (pair.native && pair.learn) {\n                    return pair.native + '-' + pair.learn\n                } else {\n                    return false;\n                }\n            },\n\n            setPair: function (data) {\n                if (data.native && data.learn) {\n                    this.set({pair: {native: data.native, learn: data.learn}});\n                }\n            },\n\n            hideDeck: function (deckId) {\n                this.attrs.hiddenDecks[deckId] = true;\n                this.save();\n            },\n\n            unhideDeck: function (deckId) {\n                delete this.attrs.hiddenDecks[deckId];\n                this.save();\n            }\n        });\n\n        return Preferences;\n    }\n);","\ndefine(\n    'Widget/Abstract',[\n        'Chitin',\n        '_'\n    ],\n    function (Chitin, _) {\n        var widgetPrototype = {\n            render: function (data) {\n                var bus = this.bus,\n                    prefAttrs = bus.prefs.attrs,\n                    pair = prefAttrs.pair,\n\n                    commons = {\n                        locale: bus.locale,\n                        lang: {\n                            'interface': prefAttrs.interface,\n                            learn: pair ? pair.learn : '',\n                            native: pair ? pair.native : ''\n                        }\n                    };\n\n                data = _.extend(\n                    data,\n                    commons\n                );\n\n                WidgetAbstract.__super__.render.call(this, data);\n            }\n        };\n\n        if ('ontouchend' in document) {\n            widgetPrototype.delegateEvents = function (events) {\n                if (!(events || (events = _.result(this, 'events')))) return;\n\n                var touchEvents = {};\n                _.each(events, function (value, key) {\n                    var k = key;\n                    if (key.substr(0, 6) == 'click ') {\n                        k = key.replace(/^click /, 'touchend ');\n                    }\n\n                    touchEvents[k] = value\n                });\n\n                this._delegateEvents(touchEvents);\n            }\n        }\n\n        /**\n         * @class\n         */\n        var WidgetAbstract = Chitin.Widget.extend(widgetPrototype);\n\n        return WidgetAbstract;\n    }\n);","\ndefine(\n    'Widget/LangSelect',[\n        'Widget/Abstract'\n    ],\n    function (WidgetAbstract) {\n        var WidgetLangSelect = WidgetAbstract.extend({\n            tpl: 'langSelect',\n\n            initialize: function (options) {\n                WidgetLangSelect.__super__.initialize.call(this, options);\n\n                this.render({\n                    lang: this.bus.lang,\n                    langs: {\n                        en: 'English',\n                        ru: 'Русский'\n                    }\n                });\n            }\n        });\n\n        return WidgetLangSelect;\n    }\n);","\n(function($) {\n    'use strict';\n\n    /**\n     * @author <a href=\"mailto:doctor.hogart@gmail.com\">Konstantin Kitmanov</a>\n     * May be freely distributed under the MIT license.\n     */\n\n    /**\n     * Converts form data to JSON\n     * can also dehydrate converted data — pass dehydrationMap as hash of fieldName: conversionFn and enjoy\n     * @param {Object} [dehydrationMap={}]\n     */\n    $.fn.form2JSON = function(dehydrationMap) {\n        dehydrationMap = dehydrationMap || {};\n\n        var serialized = this.serializeArray(),\n            result = {},\n            chunk;\n\n        for (var i = 0, len = serialized.length; i < len; i++) {\n            chunk = serialized[i];\n\n            if (chunk.name in dehydrationMap) {\n                chunk.value = dehydrationMap[chunk.name](chunk.value);\n            }\n\n            if (result[chunk.name]) {\n                if (!$.isArray(result[chunk.name])) {\n                    result[chunk.name] = [result[chunk.name]];\n                }\n\n                result[chunk.name].push(chunk.value);\n            }\n            else {\n                result[chunk.name] = chunk.value;\n            }\n        }\n\n        return result;\n    };\n})(jQuery);\ndefine(\"lib/vendor/jquery.form2JSON\", function(){});\n","\ndefine(\n    'Widget/Pristine',[\n        'Widget/Abstract',\n        'Widget/LangSelect',\n        'lib/vendor/jquery.form2JSON'\n    ],\n    function (WidgetAbstract, WidgetLangSelect) {\n        'use strict';\n\n        var Pristine = WidgetAbstract.extend({\n            tpl: 'pristine',\n\n            events: {\n                'submit form': 'onSubmit'\n            },\n\n            subWidgets: {\n                '.js-changeLang': WidgetLangSelect\n            },\n\n            initialize: function (options) {\n                Pristine.__super__.initialize.call(this, options);\n\n                this.render({});\n                this.ensureSubWidgets();\n            },\n\n            onSubmit: function (evt) {\n                evt.preventDefault();\n\n                var data = this.$('form').form2JSON();\n\n                this.bus.trigger('languagesChosen', data);\n            }\n        });\n\n        return Pristine;\n    }\n);","\ndefine(\n    'Widget/Nav',[\n        'Widget/Abstract'\n    ],\n    function (WidgetAbstract) {\n        'use strict';\n\n        var WidgetNav = WidgetAbstract.extend({\n            tpl: 'nav',\n\n            events: {\n                'click .js-deckItem': 'onDeckClick',\n                'click .js-addDeck': 'onAddDeck',\n                'click .js-settingsItem': 'onSettings',\n                'click .js-decksItem': 'onDeckList',\n                'click dl': 'onDlClick',\n                'click .js-help': 'onHelp'\n            },\n\n            initialize: function (options) {\n                WidgetNav.__super__.initialize.call(this, options);\n\n                this.listenTo(this.bus.decks, 'update', this.rr);\n\n                this.active = false;\n\n                this.rr();\n            },\n\n            rr: function () {\n                this.decks = this.params.decks.attrs;\n\n                this.render({\n                    hiddenDecks: this.bus.prefs.attrs.hiddenDecks,\n                    decks: this.decks\n                });\n            },\n\n            onDeckClick: function (evt) {\n                evt.preventDefault();\n                evt.stopPropagation();\n\n                var target = $(evt.target).closest('li'),\n                    index = parseInt(target.attr('data-id')),\n                    deck = [index, this.decks[index]];\n\n                this._toggleDD(false);\n                this.bus.trigger('displayDeck', deck);\n            },\n\n            onAddDeck: function (evt) {\n                evt.preventDefault();\n\n                this._toggleDD(false);\n                this.bus.trigger('addDeck');\n            },\n\n            onSettings: function (evt) {\n                evt.preventDefault();\n\n                this._toggleDD(false);\n                this.bus.trigger('displaySettings');\n            },\n\n            onDeckList: function (evt) {\n                evt.preventDefault();\n                evt.stopPropagation();\n\n                var target = $(evt.target).closest('.js-decksItem');\n\n                if (target.hasClass('js-header')) {\n                    if (document.documentElement.clientWidth >= 980) {\n                        this.bus.trigger('displayDecks');\n                    } else {\n                        this._toggleDD(!this.active);\n                    }\n                } else {\n                    this._toggleDD(false);\n                    this.bus.trigger('displayDecks');\n                }\n            },\n\n            onDlClick: function (evt) {\n                if (document.documentElement.clientWidth < 980 && !this.active) {\n                    this._toggleDD(!this.active);\n                }\n            },\n\n            onHelp: function (evt) {\n                evt.preventDefault();\n\n                this._toggleDD(false);\n                this.bus.trigger('displayStart');\n            },\n\n            _toggleDD: function (show) {\n                this.active = !!show;\n                this.$el.toggleClass('active', !!show);\n            }\n        });\n\n        return WidgetNav;\n    }\n);","\ndefine(\n    'Widget/Start',[\n        'Widget/Abstract'\n    ],\n    function (WidgetAbstract) {\n        'use strict';\n\n        var WidgetStart = WidgetAbstract.extend({\n            tpl: 'start',\n\n            _ui: {\n                toggled: '.js-content, .js-hide, .js-show'\n            },\n\n            events: {\n                'click button': 'triggerVerbosity'\n            },\n\n            initialize: function (options) {\n                WidgetStart.__super__.initialize.call(this, options);\n\n                this.verbosity = this.bus.prefs.get('showHelp', true);\n\n                this.render({\n                    verbosity: this.verbosity\n                });\n            },\n\n            triggerVerbosity: function () {\n                this.verbosity = !this.verbosity;\n\n                this.ui.toggled.toggleClass('hidden');\n\n                this.bus.prefs.set({showHelp: this.verbosity});\n            }\n        });\n\n        return WidgetStart;\n    }\n);","\ndefine(\n    'Widget/EditCard',[\n        'Widget/Abstract'\n    ],\n\n    function (WidgetAbstract) {\n        'use strict';\n\n        /**\n         *\n         * @class\n         * @extends WidgetAbstract\n         */\n        var WidgetEditCard = WidgetAbstract.extend(/** @lends WidgetEditCard.prototype*/ {\n            tpl: 'editCard',\n\n            events: {\n                'click .js-toggleAdd': 'onToggleAdd',\n                'click .js-confirm': 'onConfirm',\n                'click .js-cancel': 'onReset',\n                'click .js-delete': 'onDelete'\n            },\n\n            /**\n             * @constructor\n             * @param {Object} options\n             * @param {Object} options.deck\n             * @param {Object} options.card\n             */\n            initialize: function (options) {\n                WidgetEditCard.__super__.initialize.call(this, options);\n\n                this.deck = this.params.deck;\n\n                this.parent = this.params.parent;\n\n                if ('index' in this.params) {\n                    this.index = Number(this.params.index)\n                } else {\n                    this.index = null;\n                }\n\n                // temp storage for when toggling visibility\n                this.stored = {\n                    cardq: '',\n                    carda: '',\n                    cardeg: '',\n                    cardipa: ''\n                };\n\n                this.rr();\n            },\n\n            rr: function () {\n                var data = {\n                    disabled: this.params.deck.builtIn ? 'disabled=\"disabled\"' : '',\n                    card: this.params.card || {},\n                    isAdd: !!this.params.isAdd\n                };\n\n                this.render(data);\n            },\n\n            show: function () {\n                this.$el.removeClass('hidden');\n\n                _.each(this.stored, function (val, key) {\n                    this.$('input[name=\"' + key + '\"]').val(val);\n                }, this)\n            },\n\n            hide: function () {\n                this.stored = this.$el.form2JSON();\n\n                this.$('input').val('');\n                this.$el.addClass('hidden');\n            },\n\n            onToggleAdd: function (evt) {\n                var btn = $(evt.target).closest('.btn'),\n                    row = btn.closest('.row-fluid'),\n                    input = row.find('input');\n\n                if (row.hasClass('present')) {\n                    this.stored[input[0].name] = input.val(); // store temporarily\n                    input.val('');\n                } else {\n                    row.find('input').focus().val(this.stored[input[0].name]); // restore when show again\n                }\n\n                row.toggleClass('absent present');\n                btn.toggleClass('btn-danger');\n            },\n\n            onConfirm: function (evt) {\n                var card = {};\n\n                _.each(this.stored, function (value, key) {\n                    var val = this.$('input[name=\"' + key + '\"]').val().trim();\n\n                    if (val) {\n                        card[key.substr(4)] = val;\n                    }\n                }, this);\n\n                if (card.q && card.a) {\n                    this.parent.trigger('submit', card, this.index);\n                } else {\n                    alert(this.bus.locale.invalidCard);\n                }\n            },\n\n            onReset: function (evt) {\n                this.parent.trigger('cancel', this);\n            },\n\n            onDelete: function (evt) {\n                this.parent.trigger('delete', this.index);\n            }\n        });\n\n\n        return WidgetEditCard;\n    }\n);","\ndefine(\n    'Widget/EditDeckCards',[\n        'Widget/Abstract',\n        'Widget/EditCard'\n    ],\n\n    function (WidgetAbstract, WidgetEditCard) {\n        'use strict';\n\n        /**\n         *\n         * @class\n         * @extends WidgetAbstract\n         */\n        var WidgetEditDeckCards = WidgetAbstract.extend(/** @lends WidgetEditDeckCards.prototype*/ {\n            tpl: 'editDeckCards',\n\n            _ui: function () {\n                var ui = {};\n\n                if (!this.deck.builtIn) {\n                    ui['tbody'] = 'tbody';\n                }\n\n                return ui;\n            },\n\n            events: function () {\n                var events = {};\n\n                if (!this.deck.builtIn) {\n                    events['click tbody tr'] = 'onRowClick';\n                    events['click tfoot .js-add'] = 'onAddClick';\n                }\n\n                return events;\n            },\n\n            formSelector: '.js-formRow td',\n\n            /**\n             * @constructor\n             * @param {Object} options\n             * @param {Object} options.deck\n             */\n            initialize: function (options) {\n                this.deck = options.deck;\n\n                WidgetEditDeckCards.__super__.initialize.call(this, options);\n\n                this.rr();\n\n                this.formRowStub = $('<tr class=\"js-formRow\"><td colspan=\"4\"></td></tr>');\n\n                this.on('submit', this.onEditCard, this);\n                this.on('cancel', this.onEditCardCancel, this);\n                this.on('delete', this.onEditCardDelete, this);\n            },\n\n            rr: function () {\n                this.render({deck: this.deck});\n\n                this._ensureUI();\n            },\n\n            onRowClick: function (evt) {\n                var row = $(evt.target).closest('tr'),\n                    index = row.attr('data-id');\n\n                if (_.isUndefined(index)) {\n                    return;\n                }\n\n                var formRow = this.formRowStub.clone();\n\n                row.after(formRow);\n\n                row.addClass('hidden');\n\n                // TODO: fix registerChild in Chitin.js so it would accept elements too\n                // TODO: fix registerChild in Chitin.js so it would return created child\n                this.registerChild(\n                    this.formSelector + this.index,\n                    WidgetEditCard,\n                    {\n                        el: formRow.find('td'),\n                        deck: this.deck,\n                        card: this.deck.content[index],\n                        index: index,\n                        parent: this\n                    }\n                );\n            },\n\n            onEditCardCancel: function (form) {\n                var formRow = form.$el.parent('tr'),\n                    cardRow = formRow.prev(),\n                    index = Number(cardRow.attr('data-id'));\n\n                this.unregisterChild(this.formSelector + index);\n\n                cardRow.removeClass('hidden');\n                formRow.remove();\n            },\n\n            onEditCard: function (card, index) {\n                if (index !== null) {\n                    this.deck.content[index] = card\n                } else {\n                    this.deck.content.push(card);\n                }\n\n                this.rr();\n            },\n\n            onEditCardDelete: function (index) {\n                this.deck.content.splice(index, 1);\n\n                this.rr();\n            },\n\n            onAddClick: function (evt) {\n                var formRow = this.formRowStub.clone();\n                formRow.appendTo(this.ui.tbody);\n\n                this.registerChild(\n                    this.formSelector + 'new',\n                    WidgetEditCard,\n                    {\n                        el: formRow.find('td'),\n                        deck: this.deck,\n                        parent: this\n                    }\n                );\n            }\n        });\n\n        return WidgetEditDeckCards;\n    }\n);","\ndefine(\n    'Widget/EditDeck',[\n        'Widget/Abstract',\n        'Widget/EditDeckCards',\n        '_',\n        'lib/vendor/jquery.form2JSON'\n    ],\n    function (WidgetAbstract, WidgetEditDeckCards, _) {\n        'use strict';\n\n        var WidgetEditDeck = WidgetAbstract.extend({\n            tpl: 'editDeck',\n\n            _ui: {\n                frm: 'form',\n                cardList: '.js-cardList',\n\n                dumpDeck: '.js-dumpDeck',\n                dumpDeckDumpster: '.js-dumpDeck .js-dumpster',\n                dumpDeckTA: '.js-dumpDeck textarea',\n                dumpDeckDone: '.js-dumpDeck .js-done',\n\n                dumpCards: '.js-dumpCards',\n                dumpCardsDumpster: '.js-dumpCards .js-dumpster',\n                dumpCardsTA: '.js-dumpCards textarea',\n                dumpCardsDone: '.js-dumpCards .js-done'\n            },\n\n            events: {\n                'submit form': 'onSubmit',\n                'reset form': 'onReset',\n\n                'click .js-dump .js-import, .js-dump .js-export': 'toggleDumpster',\n                'click .js-dump .js-done': 'doneDumpster'\n            },\n\n            subWidgets: {\n                '.js-cardTable': [WidgetEditDeckCards, function () { return {deck: this.deck} }]\n            },\n\n            initialize: function (options) {\n                WidgetEditDeck.__super__.initialize.call(this, options);\n\n                this.deck = this.params.deck ? this.params.deck[1] : this.bus.createDeck();\n                this.id = this.params.deck ? this.params.deck[0] : null;\n\n                this.renderDeck();\n            },\n\n            renderDeck: function () {\n                var tplData = {\n                    deck: this.deck\n                };\n\n                tplData.cardsDump = _.map(this.deck.content, function (card) {\n                    return card.q + '\\t' + card.a\n                }).join('\\n');\n\n                this.render(tplData);\n\n                this.ensureSubWidgets();\n            },\n\n            onSubmit: function (evt) {\n                evt.preventDefault();\n\n                var deckRaw = this.ui.frm.form2JSON({\n                    tags: function (tags) {\n                        return _.map(tags.split(','), function (tag) {\n                            return tag.trim();\n                        })\n                    },\n\n                    testable: function (testable) { // checkbox voodoo\n                        return !!testable;\n                    }\n                });\n\n                if (_.isNull(this.id)) {\n                    _.extend(this.deck, deckRaw);\n                    this.bus.decks.attrs.push(this.deck);\n                    this.bus.decks.set({}); // trick to force save\n                } else {\n                    var deck = {};\n                    deck[this.id] = this.deck;\n\n                    this.bus.decks.set(deck);\n                }\n\n                this.bus.decks.trigger('update');\n\n                this.bus.trigger('displayStart');\n            },\n\n            onReset: function (evt) {\n                evt.preventDefault();\n\n                this.renderDeck();\n\n                return false;\n            },\n\n            toggleDumpster: function (evt) {\n                var trgt = $(evt.target),\n                    dumpster = trgt.closest('.js-dump').find('.js-dumpster');\n\n                trgt.toggleClass('active');\n                dumpster.toggleClass('hidden');\n            },\n\n            doneDumpster: function (evt) {\n                var trgt = $(evt.target),\n                    container = trgt.closest('.js-dump'),\n                    ta = container.find('textarea'),\n                    isDeck = container.hasClass('js-dumpDeck');\n\n                var content = ta.val().trim();\n\n                if (!content) {\n                    this.toggleDumpster(evt);\n                    return;\n                } else {\n                    if (isDeck) {\n                        var deckData;\n                        try {\n                            deckData = JSON.parse(content);\n                        } catch (e) {\n                            alert(this.bus.locale.invalidFormat);\n                            return\n                        }\n\n                        this.deck = _.extend(this.deck, deckData);\n                    } else {\n                        var cards = _.map(content.split('\\n'), function (line) {\n                            var parts = line.split(/\\t|    /mg);\n                            return {\n                                q: parts[0],\n                                a: parts[1]\n                            }\n                        });\n\n                        this.deck.content = _.extend(this.deck.content, cards);\n                    }\n\n                    this.renderDeck();\n\n                    return;\n                }\n            }\n        });\n\n        return WidgetEditDeck;\n    }\n);","\ndefine(\n    'Widget/DeckList',[\n        'Widget/Abstract',\n        '_'\n    ],\n    function (WidgetAbstract, _) {\n        'use strict';\n\n        var WidgetDeckList = WidgetAbstract.extend({\n            tpl: 'deckList',\n\n            events: {\n                'change .js-selectAll': 'selectAll',\n                'change tbody input[type=\"checkbox\"]': 'selectAny',\n                'click .js-hide': 'onHide',\n                'click .js-show': 'onShow',\n                'click .js-export': 'onExport',\n                'click .js-done': function () { this.ui.table.removeClass('deckList-full'); },\n                'click textarea': function () { this.ui.dump[0].select(); },\n\n                'click .js-editDeck': 'onEditDeck',\n                'click .js-hideDeck': 'onHideDeck',\n                'click .js-unhideDeck': 'onShowDeck'\n            },\n\n            _ui: {\n                table: 'table',\n                selectAll: '.js-selectAll',\n                boxes: 'tbody input[type=\"checkbox\"]',\n                buttons: 'thead button',\n                dump: 'textarea'\n            },\n\n            initialize: function (options) {\n                WidgetDeckList.__super__.initialize.call(this, options);\n\n                this.rr();\n\n                this.listenTo(this.bus.decks, 'update', this.rr);\n            },\n\n            rr: function () {\n                this.render({\n                    decks: this.bus.decks.attrs,\n                    hiddenDecks: this.bus.prefs.attrs.hiddenDecks\n                });\n            },\n\n            selectAll: function () {\n                var checked = this.ui.selectAll.prop('checked');\n\n                this.ui.boxes.prop('checked', checked);\n\n                this._enableButtons(checked);\n            },\n\n            selectAny: function () {\n                this._enableButtons(this._getChecked().length)\n            },\n\n            onHide: function () {\n                var checked = this._getChecked(),\n                    bus = this.bus,\n                    hideDeck = _.bind(this._hideDeck, this);\n\n                checked.each(function (index, node) {\n                    var deck = bus.decks.attrs[index];\n\n                    hideDeck(deck, index);\n                });\n\n                bus.decks.save();\n                bus.decks.trigger('update');\n            },\n\n            onShow: function () {\n                var checked = this._getChecked(),\n                    bus = this.bus;\n\n                checked.each(function (index, node) {\n                    var deck = bus.decks.attrs[index];\n                    if (deck.builtIn) {\n                        bus.unhideDeck(deck.id);\n                    }\n                });\n\n                bus.decks.trigger('update');\n            },\n\n            onExport: function () {\n                var checked = this._getChecked(),\n                    bus = this.bus,\n                    exportArr = [],\n                    exported = {};\n\n                checked.each(function (index, node) {\n                    exportArr.push(\n                        _.omit(bus.decks.attrs[index], ['builtIn', 'id'])\n                    );\n                });\n\n                exported[this.bus.pair] = exportArr;\n\n                this.ui.table.addClass('deckList-full');\n                this.ui.dump.val(JSON.stringify(exported));\n            },\n\n            onEditDeck: function (evt) {\n                var tr = $(evt.target).closest('tr'),\n                    id = parseInt(tr.attr('data-id')),\n                    deck = this.bus.decks.attrs[id];\n\n                this.bus.trigger('editDeck', [id, deck]);\n            },\n\n            onHideDeck: function (evt) {\n                var tr = $(evt.target).closest('tr'),\n                    id = parseInt(tr.attr('data-id')),\n                    deck = this.bus.decks.attrs[id];\n\n                this._hideDeck(deck, id);\n\n                this.bus.decks.save();\n                this.bus.decks.trigger('update');\n            },\n\n            onShowDeck: function (evt) {\n                var tr = $(evt.target).closest('tr'),\n                    id = parseInt(tr.attr('data-id')),\n                    deck = this.bus.decks.attrs[id];\n\n                this.bus.unhideDeck(deck.id);\n\n                this.bus.decks.save();\n                this.bus.decks.trigger('update');\n            },\n\n            _hideDeck: function (deck, index) {\n                if (deck.builtIn) {\n                    this.bus.hideDeck(deck.id);\n                } else {\n                    this.bus.decks.deleteDeck(index, {silent: true});\n                }\n            },\n\n            _enableButtons: function (enable) {\n                if (enable) {\n                    this.ui.buttons.prop('disabled', false);\n                } else {\n                    this.ui.buttons.prop('disabled', true);\n                }\n            },\n\n            _getChecked: function () {\n                return this.ui.boxes.filter(':checked');\n            }\n        });\n\n        return WidgetDeckList;\n    }\n);","\ndefine(\n    'Widget/Explore/Abstract',[\n        'Widget/Abstract'\n    ],\n    function (WidgetAbstract) {\n        'use strict';\n\n        var WidgetExploreAbstract = WidgetAbstract.extend({\n            _ui: {\n                items: '.js-card',\n                progress: '.js-progress'\n            },\n\n            initialize: function (options) {\n                WidgetExploreAbstract.__super__.initialize.call(this, options);\n\n                this.currentQuestion = 0;\n\n                this.cards = _.shuffle(_.cloneDeep(this.params.deck.content));\n                this.name = this.params.deck.name;\n\n                this.rr();\n            },\n\n            rr: function () {\n                this.render({\n                    name: this.name,\n                    cards: this.cards,\n                    current: this.currentQuestion,\n                    showExamples: this.bus.prefs.get('showExamples'),\n                    showTranscriptions: this.bus.prefs.get('showTranscriptions')\n                });\n                this._renderProgress();\n            },\n\n            /**\n             * @protected\n             */\n            _renderProgress: function () {\n                var width = 1;\n\n                width += Math.ceil(this.currentQuestion / this.cards.length * 99);\n\n                this.ui.progress.css({\n                    width: width + '%'\n                });\n\n                this.ui.progress.text(this.currentQuestion + '/' + this.cards.length)\n            },\n\n            next: function () {\n                this.ui.items.eq(this.currentQuestion).addClass('hidden');\n\n                this.currentQuestion++;\n\n                this._renderProgress();\n\n                if (this.currentQuestion == this.cards.length) {\n                    this.final();\n                }\n\n                this.ui.items.eq(this.currentQuestion).removeClass('hidden');\n            }\n        });\n\n        return WidgetExploreAbstract;\n    }\n);","\ndefine(\n    'Widget/Explore/Meditation',[\n        'Widget/Explore/Abstract'\n    ],\n    function (WidgetExploreAbstract) {\n        'use strict';\n\n        var WidgetExploreMeditation = WidgetExploreAbstract.extend({\n            tpl: 'testMeditation',\n\n            events: {\n                'click .js-next': 'next'\n            },\n\n            final: function () {\n                this.$el.trigger('meditationOver');\n            }\n        });\n\n        return WidgetExploreMeditation;\n    }\n);","\ndefine(\n    'Widget/Explore/Trial/Abstract',[\n        'Widget/Explore/Abstract'\n    ],\n    function (WidgetExploreAbstract) {\n        'use strict';\n\n        var WidgetTrialAbstract = WidgetExploreAbstract.extend({\n            events: {\n                'click .js-answer': 'onAnswer',\n                'click .js-skip': 'onSkip',\n                'click .js-next': 'next'\n            },\n\n            initialize: function (options) {\n                this.correct = 0;\n                this.wrong = 0;\n\n                WidgetTrialAbstract.__super__.initialize.call(this, options);\n\n                this.showCorrections = this.bus.prefs.get('showCorrections');\n                this.corrections = [];\n            },\n\n            isCorrect: function (answer, correctAnswer) {\n                if (this.caseSensitive) {\n                    return answer == correctAnswer\n                } else {\n                    return answer.toLowerCase() == correctAnswer.toLowerCase()\n                }\n            },\n\n            onAnswer: function (evt) {\n                var trgt = $(evt.target),\n                    li = trgt.closest('li'),\n                    answer = this.retrieveAnswer(li),\n                    correctAnswer = this.cards[this.currentQuestion].a;\n\n                if (this.isCorrect(answer, correctAnswer)) {\n                    this.correct++;\n                    this.next();\n                } else {\n                    this.wrong++;\n\n                    if (this.showCorrections) {\n                        this.renderCorrection(li, answer, correctAnswer);\n                    } else {\n                        this.next();\n                    }\n                }\n            },\n\n            renderCorrection: function (container, answer, correctAnswer) {\n                container.find('.js-correction').html(correctAnswer).removeClass('hidden');\n                container.find('.js-next').removeClass('hidden');\n                container.find('.js-answerBlock').addClass('hidden');\n                this.corrections.push({\n                    q: this.cards[this.currentQuestion].q,\n                    a: this.cards[this.currentQuestion].a,\n                    w: answer\n                });\n            },\n\n            onSkip: function () {\n                this.wrong++;\n\n                this.next();\n            },\n\n            final: function () {\n                var params = {\n                    wrong: this.wrong,\n                    correct: this.correct\n                };\n\n                if (this.corrections.length) {\n                    params.corrections = this.corrections\n                }\n\n                this.$el.trigger('testComplete', params);\n            }\n        });\n\n        return WidgetTrialAbstract;\n    }\n);","\ndefine(\n    'Widget/Explore/Trial/Test',[\n        'Widget/Explore/Trial/Abstract',\n        '_'\n    ],\n    function (WidgetExploreTrialAbstract, _) {\n        'use strict';\n\n        var WidgetTrialTest = WidgetExploreTrialAbstract.extend({\n            tpl: 'testTest',\n\n           /**\n            * Returns `amount` random unique entries from `arr`, excluding `excludeIndex`\n            * @param {Array} arr\n            * @param {Number} amount\n            * @param {Number} excludeIndex\n            * @return {Array}\n            * @private\n            */\n            _randEntries: function(arr, amount, excludeIndex) {\n                var result = [],\n                    randoms = [],\n                    maxRand = arr.length - 1,\n                    rand;\n\n                for (var i = 0; i < amount; i++) {\n                    do {\n                        rand = _.random(0, maxRand);\n                    } while (_.contains(randoms, rand) || rand == excludeIndex);\n\n                    result.push(arr[rand])\n                }\n\n                return result;\n            },\n\n            rr: function () {\n                var randEntries = this._randEntries,\n                    cards = this.cards,\n                    tests = _.map(cards, function (card, index ) {\n                        var test = {\n                                q: card.q\n                            },\n                            answers = _.pluck(randEntries(cards, 3, index), 'a');\n\n                        answers.push(card.a);\n\n                        test.a = _.shuffle(answers);\n\n                        return test;\n                    });\n\n                this.render({\n                    name: this.name,\n                    cards: tests,\n                    currentQuestion: this.currentQuestion\n                })\n            },\n\n            retrieveAnswer: function (container) {\n                return container.find('input:checked').val();\n            }\n        });\n\n        return WidgetTrialTest;\n    }\n);","\ndefine(\n    'Widget/Explore/Trial/Exam',[\n        'Widget/Explore/Trial/Abstract'\n    ],\n    function (WidgetExploreTrialAbstract) {\n        'use strict';\n\n        var WidgetExploreTrialExam = WidgetExploreTrialAbstract.extend({\n            tpl: 'testExam',\n\n            _ui: function () {\n                return _.extend(\n                    {},\n                    WidgetExploreTrialExam.__super__._ui,\n                    {\n                        qHeader: '.js-qHeader',\n                        qExample: '.js-qExample',\n                        input: 'input[type=\"text\"]',\n                        correction: '.js-correction',\n                        next: '.js-next',\n                        answerBlock: '.js-answerBlock'\n                    }\n                );\n            },\n\n            events: function () {\n                return _.extend(\n                    {},\n                    WidgetExploreTrialExam.__super__.events,\n                    {\n                        'keyup input[type=\"text\"]': function (evt) {\n                            if (evt.keyCode == 13) {\n                                this.onAnswer(evt);\n                            }\n                        }\n                    }\n                );\n            },\n\n            retrieveAnswer: function () {\n                return this.ui.input.val().trim();\n            },\n\n            renderCorrection: function (container, answer, correctAnswer) {\n                this.ui.correction.html(correctAnswer).removeClass('hidden');\n                this.ui.next.removeClass('hidden');\n                this.ui.answerBlock.addClass('hidden');\n\n                var card = this.cards[this.currentQuestion];\n                this.corrections.push({\n                    q: card.q,\n                    a: card.a,\n                    w: answer\n                });\n            },\n\n            next: function (evt) {\n                this.currentQuestion++;\n\n                this._renderProgress();\n\n                if (this.currentQuestion == this.cards.length) {\n                    this.final();\n                } else {\n                    this.ui.qHeader.text(this.cards[this.currentQuestion].q);\n                    var eg = this.cards[this.currentQuestion].eg;\n                    this.ui.qExample.text(\n                        (eg ? eg.replace(/\\[\\[answer\\]\\]/mg, '…') : '')\n                    );\n                    this.ui.input.val('');\n                    this.ui.input.focus();\n\n                    this.ui.correction.html('').addClass('hidden');\n                    this.ui.next.addClass('hidden');\n                    this.ui.answerBlock.removeClass('hidden');\n                }\n            }\n        });\n\n        return WidgetExploreTrialExam;\n    }\n);","\ndefine(\n    'Widget/Score',[\n        'Widget/Abstract'\n    ],\n    function (WidgetAbstract) {\n        'use strict';\n\n        var WidgetScore = WidgetAbstract.extend({\n            tpl: 'score',\n\n            initialize: function (options) {\n                WidgetScore.__super__.initialize.call(this, options);\n\n                this.render({\n                    congrats: this.params.congrats,\n                    wrong: this.params.wrong,\n                    correct: this.params.correct,\n                    testable: this.params.testable,\n                    corrections: this.params.corrections\n                });\n            }\n        });\n\n        return WidgetScore;\n    }\n);","\ndefine(\n    'Widget/Deck',[\n        'Widget/Abstract',\n        'Widget/Explore/Meditation',\n        'Widget/Explore/Trial/Test',\n        'Widget/Explore/Trial/Exam',\n        'Widget/Score',\n\n        'Widget/EditCard'\n    ],\n    function (WidgetAbstract, WidgetExploreMeditation, WidgetExploreTrialTest, WidgetExploreTrialExam, WidgetScore, WidgetEditCard) {\n        'use strict';\n\n        var WidgetDeck = WidgetAbstract.extend({\n            tpl: 'deck',\n\n            events: {\n                'click .js-startMeditation': 'onStartMeditation',\n                'click .js-startTest': 'onStartTest',\n                'click .js-startExam': 'onStartExam',\n\n                'change [name=\"showCorrections\"]': 'onShowCorrectionsChange',\n                'change [name=\"showExamples\"]': 'onShowExamplesChange',\n                'change [name=\"showTranscriptions\"]': 'onShowTranscriptionsChange',\n\n                'meditationOver .js-test': 'onMeditationComplete',\n                'testComplete .js-test': 'onTestComplete',\n\n                'click .js-editDeck': 'onEditDeck',\n                'click .js-deleteDeck': 'onDeleteDeck',\n                'click .js-hideDeck': 'onHideDeck',\n                'click .js-addCard': 'onAddCardClick'\n            },\n\n            _ui: {\n                score: '.js-score',\n                showCorrections: '[name=\"showCorrections\"]',\n                showExamples: '[name=\"showExamples\"]',\n                showTranscriptions: '[name=\"showTranscriptions\"]',\n                addCardForm: '.js-addCardForm',\n                addCardBtn: '.js-addCard'\n            },\n\n            subWidgets: {\n                '.js-addCardForm': [WidgetEditCard, function () { return {deck: this.deck, isAdd: true, parent: this} }]\n            },\n\n            initialize: function (options) {\n                WidgetDeck.__super__.initialize.call(this, options);\n\n                this.deck = this.params.deck[1]; // deck is sent as [id, deckObject]\n                this.testable = this.deck.testable && this.deck.content.length > 3;\n\n                this.rr();\n\n                this.on('submit', this.onNewCard, this);\n                this.on('cancel', this.onNewCardCancel, this);\n            },\n\n            rr: function () {\n                this.render({\n                    deck: this.deck,\n                    testable: this.testable,\n                    showCorrections: this.bus.prefs.get('showCorrections'),\n                    showExamples: this.bus.prefs.get('showExamples'),\n                    showTranscriptions: this.bus.prefs.get('showTranscriptions')\n                });\n\n                this.ensureSubWidgets();\n\n                this.setState('browsing');\n            },\n\n            onStartMeditation: function () {\n                this.displayExercise(WidgetExploreMeditation);\n            },\n\n            onStartTest: function () {\n                this.displayExercise(WidgetExploreTrialTest);\n            },\n\n            onStartExam: function () {\n                this.displayExercise(WidgetExploreTrialExam);\n            },\n\n            onMeditationComplete: function (evt) {\n                this.setState('scoring');\n                this.displayScore({congrats: true, testable: this.testable});\n            },\n\n            onTestComplete: function (evt, data) {\n                this.setState('scoring');\n                data.testable = this.testable;\n                this.displayScore(data);\n            },\n\n            onEditDeck: function () {\n                this.bus.trigger('editDeck', this.params.deck)\n            },\n\n            onDeleteDeck: function () {\n                this.bus.trigger('deleteDeck', this.params.deck);\n            },\n\n            onHideDeck: function () {\n                this.bus.trigger('hideDeck', this.params.deck);\n            },\n\n            setState: function (state) {\n                this.$el.removeClass('deckView__browsing deckView__testing deckView__scoring');\n                this.$el.addClass('deckView__' + state);\n            },\n\n            displayScore: function (params) {\n                this.unregisterChild('.js-score');\n                this.registerChild('.js-score', WidgetScore, params);\n            },\n\n            displayExercise: function (type) {\n                this.setState('testing');\n                this.unregisterChild('.js-test');\n                this.registerChild(\n                    '.js-test',\n                    type,\n                    {\n                        deck: this.deck\n                    }\n                );\n            },\n\n            onShowCorrectionsChange: function (evt) {\n                this.bus.prefs.set({showCorrections: this.ui.showCorrections.is(':checked')})\n            },\n\n            onShowExamplesChange: function (evt) {\n                this.bus.prefs.set({showExamples: this.ui.showExamples.is(':checked')})\n            },\n\n            onShowTranscriptionsChange: function (evt) {\n                this.bus.prefs.set({showTranscriptions: this.ui.showTranscriptions.is(':checked')})\n            },\n\n            onAddCardClick: function (evt) {\n                if (this.ui.addCardBtn.hasClass('active')) {\n                    this.children['.js-addCardForm'].hide();\n                } else {\n                    this.children['.js-addCardForm'].show();\n                }\n\n                this.ui.addCardBtn.toggleClass('active');\n            },\n\n            onNewCardCancel: function () {\n                this.children['.js-addCardForm'].hide();\n                this.ui.addCardBtn.removeClass('active');\n            },\n\n            onNewCard: function (card) {\n                this.deck.content.push(card);\n                this.bus.decks.set({});\n                this.rr();\n            }\n        });\n\n        return WidgetDeck;\n    }\n);","\ndefine(\n    'Widget/Settings',[\n        'Widget/Abstract',\n        'Widget/LangSelect'\n    ],\n    function (WidgetAbstract, WidgetLangSelect) {\n        'use strict';\n\n        var WidgetSettings = WidgetAbstract.extend({\n            tpl: 'settings',\n\n            events: {\n                'click .js-dump': function () { this.bus.trigger('displayDump') },\n                'click .js-reset': 'onResetClick',\n                'click .js-changeLang': 'onChangeLang'\n            },\n\n            subWidgets: {\n                '.js-langSelect': WidgetLangSelect\n            },\n\n            initialize: function (options) {\n                WidgetSettings.__super__.initialize.call(this, options);\n\n                this.render({});\n                this.ensureSubWidgets();\n            },\n\n            onResetClick: function () {\n                if (confirm(this.bus.locale.confirmClearAll)) {\n                    this.bus.reset();\n                }\n            },\n\n            onChangeLang: function () {\n                var lang = this.$('[name=\"interface\"]').val();\n                this.bus.prefs.set({'interface': lang});\n                window.location.reload();\n            }\n        });\n\n        return WidgetSettings;\n    }\n);","\ndefine(\n    'Widget/Dump',[\n        'Widget/Abstract'\n    ],\n    function (WidgetAbstract) {\n        'use strict';\n\n        var WidgetDump = WidgetAbstract.extend({\n            tpl: 'dump',\n\n            _ui: {\n                form: 'form',\n                dump: 'textarea',\n                beauty: '.js-beauty'\n            },\n\n            events: {\n                'submit form': 'saveDeck',\n                'click .js-reset': 'onReset',\n                'change .js-beauty': '_displayDump',\n                'click textarea': 'selectDump'\n            },\n\n            initialize: function (options) {\n                WidgetDump.__super__.initialize.call(this, options);\n\n                this.render({});\n                this._displayDump();\n            },\n\n            _displayDump: function () {\n                var str = JSON.stringify(this.bus.decks.attrs, null, this.ui.beauty.prop('checked') ? 2 : 0);\n\n                this.ui.dump.val(str);\n            },\n\n            saveDeck: function (evt) {\n                evt.preventDefault();\n\n                var raw = this.ui.dump.val(),\n                    deck;\n\n                try {\n                    deck = JSON.parse(raw);\n                } catch (exception) {\n                    alert(this.bus.locale.invalidFormat);\n                }\n\n                if (deck) {\n                    this.bus.decks.set(deck);\n                    this.bus.trigger('displayStart');\n                }\n            },\n\n            onReset: function () {\n                this.bus.trigger('displayStart');\n            },\n\n            selectDump: function () {\n                this.ui.dump[0].select();\n            }\n        });\n\n        return WidgetDump;\n    }\n);","\ndefine(\n    'Widget/Root',[\n        'Widget/Abstract',\n        'Widget/Pristine',\n        'Widget/Nav',\n        'Widget/Start',\n        'Widget/EditDeck',\n        'Widget/DeckList',\n        'Widget/Deck',\n        'Widget/Settings',\n        'Widget/Dump'\n    ],\n    function (WidgetAbstract, WidgetPristine, WidgetNav, WidgetStart, WidgetEditDeck, WidgetDeckList, WidgetDeck, WidgetSettings, WidgetDump) {\n        'use strict';\n\n        var WidgetRoot = WidgetAbstract.extend({\n            tpl: 'root',\n\n            startWidgets: {\n                '.js-pristine': WidgetPristine\n            },\n\n            workWidgets: {\n                '.js-nav': [WidgetNav, function () { return {decks: this.bus.decks } }],\n                '.js-start': WidgetStart\n            },\n\n            busEvents: {\n                'startWork': 'startWork',\n\n                'displayStart': 'displayStart',\n                'displayDeck': 'displayDeck',\n                'editDeck': 'editDeck',\n                'addDeck': 'editDeck',\n                'deleteDeck': 'deleteDeck',\n                'hideDeck': 'hideDeck',\n                'displayDump': 'displayDump',\n                'displaySettings': 'displaySettings',\n                'displayDecks': 'displayDecks'\n            },\n\n            initialize: function (options) {\n                WidgetRoot.__super__.initialize.call(this, options);\n                this.render({});\n\n                if (this.bus.pair) {\n                    this.startWork();\n                } else {\n                    this.ensureSubWidgets(this.startWidgets);\n                    this.$el\n                        .removeClass('root__work')\n                        .addClass('root__pristine');\n                }\n            },\n\n            startWork: function () {\n                this.ensureSubWidgets(this.workWidgets);\n                this.$el\n                    .removeClass('root__pristine')\n                    .addClass('root__work');\n            },\n\n            _clearScreen: function () {\n                this.unregisterChild('.js-pristine');\n                this.unregisterChild('.js-start');\n                this.unregisterChild('.js-deck');\n                this.unregisterChild('.js-deckList');\n                this.unregisterChild('.js-edit');\n                this.unregisterChild('.js-settings');\n                this.unregisterChild('.js-dump');\n            },\n\n            displayStart: function () {\n                this._clearScreen();\n                this.registerChild('.js-start', WidgetStart, {});\n            },\n\n            editDeck: function (deck) {\n                this._clearScreen();\n                this.registerChild('.js-edit', WidgetEditDeck, {deck: deck});\n            },\n\n            deleteDeck: function (deck) {\n                if (confirm(this.bus.locale.deleteDeckConfirm)) {\n                    this.bus.decks.deleteDeck(deck[0]);\n                    this._clearScreen();\n                }\n            },\n\n            hideDeck: function (deck) {\n                if (confirm(this.bus.locale.hideDeckConfirm)) {\n                    this.bus.hideDeck(deck[1].id);\n                    this._clearScreen();\n                }\n            },\n\n            displayDecks: function () {\n                this._clearScreen();\n                this.registerChild('.js-deckList', WidgetDeckList, {});\n            },\n\n            displayDeck: function (deck) {\n                this._clearScreen();\n                this.registerChild('.js-deck', WidgetDeck, {deck: deck});\n            },\n\n            displaySettings: function () {\n                this._clearScreen();\n                this.registerChild('.js-settings', WidgetSettings, {});\n            },\n\n            displayDump: function () {\n                this._clearScreen();\n                this.registerChild('.js-dump', WidgetDump, {});\n            }\n        });\n\n        return WidgetRoot;\n    }\n);","\ndefine('locale/en/locale',{\n    q: {\n        open: '‘',\n        close: '’'\n    },\n\n    license: 'MIT license',\n    decksHeader: 'Decks',\n    manageDecks: 'Manage decks…',\n    newDeck: 'Add deck…',\n    help: 'Help',\n    settings: 'Settings',\n\n    done: 'Done',\n    cancel: 'Cancel',\n    save: 'Save',\n    invalidFormat: 'Invalid format',\n    invalidCard: 'Please fill both sides of card',\n\n    welcomeHeader: 'Welcome to OmniCard!',\n    welcomeFirst: 'We help you learn languages via famous flash-card method.',\n    welcomeSecond: 'OmniCard is not a textbook or manual. Take it as exercise book, which you must create yourself (although we provide some predefined cards).',\n    welcomeChoose: 'Choose your tongues:',\n    welcomeSpeak: 'I speak…',\n    welcomeLearn: 'I learn…',\n    welcomeInterface: 'I prefer interface in…',\n    welcomeStart: 'Start!',\n\n\n    meditation: 'Meditation',\n    meditationExplanation: 'Shows you both sides of card, question and answer, allowing you to learn and remember.',\n    test: 'Test',\n    testExplanation: 'Forces you to choose correct answer, intended for further fixing. Not all decks are capable of this mode.',\n    exam: 'Exam',\n    examExplanation: 'Hardest mode. You should enter answers manually. This is particularly useful in writing training.',\n\n\n    helpHeader: 'Choose a deck from menu and start learning!',\n    helpFirst: 'Each deck provides several modes in which it can be discovered.',\n    helpAlso: 'You can (and should) also create your own deck, which is great because it forces you to train in writing.',\n\n    faq: 'FAQ',\n    faqDeckQ: 'What is a card? What is a deck?',\n    faqDeckA: 'Card is a pair of question (on your native language) and answer (on language that you learn). Deck is a set of such cards, combined together by any criteria you like.',\n    faqEditQ: 'How do I edit deck?',\n    faqEditA: 'Open that deck and note row of icons in the top right corner of description. ' +\n        'Clicking pencil icon brings up deck editing mode, and trash can deletes this deck. ' +\n        'Built-in deck can only be hidden (closed eye icon). ' +\n        'Clicking plus icon will open form for quick card adding (only for custom decks).',\n    faqCreateQ: 'How do I create new deck?',\n    faqCreateA: 'Use <span class=\"badge\">Add deck…</span> button located beneath deck list.',\n\n    faqShareQ: 'I created/edited deck(s) to work on my primary PC, how do I get it on my phone/tablet/other PC?',\n    faqShareA1: 'Open deck you need to transfer and click pencil icon in top left corner.',\n    faqShareA2: 'Click <span class=\"badge\">Export whole deck</span> button. You\\'ll see big text field with lot of strange text.',\n    faqShareA3: 'Copy that text.',\n    faqShareA4: 'That\\'s just text, so you can paste it around. Store it to the \\\n                      <a href=\"https://drive.google.com\" target=\"_blank\">Google Drive</a>, send yourself email, \\\n                      use a <a href=\"http://pastebin.com/\">pastebin</a> service, etc.',\n    faqShareA5: 'Open the location of your pasted text on device to which you want to transfer your work, and copy that text.',\n    faqShareA6: 'Open the OmniCard, and click <span class=\"badge\">New deck…</span>. Click <span class=\"badge\">Import deck</span>. Text input field would open.',\n    faqShareA7: 'Paste copied text into that field. Click<span class=\"badge\">Done</span> button.',\n    faqShareA8: 'Sounds more hard then it really is:)',\n    faqShareA9: 'Additionally you can import/export cards only, and import/export all decks at once in <span class=\"badge\">Settings</span>.',\n\n    faqManagementQ: 'Can I delete decks en masse?',\n    faqManagementA: 'Click <span class=\"badge\">Decks</span> above deck list. You\\'ll find this and other bulk operations there.',\n\n    faqFeedbackQ: 'Application misbehaves / error in built-in deck / I have a suggestion / typo / I want to help.',\n    faqFeedbackA: 'Keep calm and <a href=\"https://github.com/hogart/OmniCard/issues/new\">contact us</a>. Thanks!',\n\n    helpHide: 'Don\\'t show me this',\n    helpShow: 'Show help',\n\n    bulkTitle: 'Decks management',\n    bulkSelectAll: 'Select all',\n    bulkName: 'Title',\n    bulkDescription: 'Description',\n    bulkShow: 'Show selected decks',\n    bulkHide: 'Hide/delete selected decks',\n    bulkExport: 'Export selected decks',\n\n    editDeck: 'Edit deck',\n    deleteDeck: 'Delete deck',\n    deleteDeckConfirm: 'Are you sure you want to delete this deck?',\n    hideDeck: 'Hide deck',\n    unhideDeck: 'Reveal deck',\n    hideDeckConfirm: 'Are you sure you want to hide this deck?',\n    showCorrections: 'Show correct answers',\n    showExamples: 'Show usage examples (if any)',\n    showTranscriptions: 'Show transcriptions (if any)',\n    createDeck: 'Create new deck',\n    importDeck: 'Import deck',\n    exportDeck: 'Export whole deck',\n    pasteDeck: 'Paste deck here',\n    shareDeckHelp: 'Entire deck for sharing',\n    deckProperties: 'Deck properties',\n    deckName: 'Name:',\n    deckNamePlaceholder: 'Deck name',\n    deckDescr: 'Description:',\n    deckDescrPlaceholder: 'Deck description (optional)',\n    deckTags: 'Tags:',\n    deckTagsPlaceholder: 'Deck tags (optional)',\n    deckTagsHelp: 'Comma-separated list',\n    deckTestable: 'Testable',\n    deckTestableHelp: 'If deck is suitable for creating test automatically? (Won\\'t work on deck shorter than 5 cards).',\n    deckCards: 'Deck cards',\n    deckCardsImport: 'Import cards',\n    deckCardsExport: 'Export cards (without examples)',\n    deckCardsPaste: 'Paste cards here',\n    deckCardsHelp: 'Newline separates cards; tab or 4 spaces separates question form answer (question first)',\n    deleteCard: 'Delete card',\n    addCard: 'Add card',\n    deckSave: 'Save deck',\n\n    answer: 'Answer',\n    question: 'Question',\n    example: 'Example: insert [[answer]] where card answer should be',\n    exampleAdd: 'Click to add example',\n    exampleShort: 'Example',\n    ipa: 'Transcription/pronunciation (IPA or any other)',\n    ipaAdd: 'Click to add transcription/pronunciation',\n    ipaShort: 'Transcription',\n    next: 'Next',\n    skip: 'Skip',\n\n\n    learnedNew: 'Feeling like learned something new? Care to repeat or ready to testify yourself?',\n    wrongs: 'Wrong answers:',\n    corrects: 'Correct answers:',\n\n    congrats: 'Congratulations! You\\'ve performed excellent!',\n    doNotDespair: 'Do not despair. Next time you will do better!',\n    moreWork: 'You definitely need more work, but so far so good.',\n    notBad: 'Not bad. Keep training!',\n\n\n    importExport: 'Import/export…',\n    importExportHelp: 'Lets import and export all your decks as a whole. Useful when transferring them to other device.',\n    clearAll: 'Clear all',\n    clearAllHelp: 'Deletes all decks and settings entirely. You must know what you\\'re doing.',\n    confirmClearAll: 'This will erase all your decks, reset all settings and reload entire application.\\nAre you sure you want to do this?',\n\n    changeLang: 'Change interface language',\n\n\n    dump: 'Share decks',\n    dumpHelp: 'Copy contents of this field and send it as text via email, any <a href=\"http://pastebin.com/\">pastebin</a>, etc.',\n    dumpFormatting: 'Nice formatting'\n});","\ndefine('locale/ru/locale',{\n    q: {\n        open: '«',\n        close: '»'\n    },\n\n    license: 'Лицензия MIT',\n    decksHeader: 'Колоды',\n    newDeck: 'Добавить колоду',\n    manageDecks: 'Операции с колодами…',\n    help: 'Справка',\n    settings: 'Настройки',\n\n    done: 'Готово',\n    cancel: 'Отмена',\n    save: 'Сохранить',\n    invalidFormat: 'Некорректный формат',\n    invalidCard: 'Пожалуйста, укажите обе стороны карточки',\n\n\n    welcomeHeader: 'Добро пожаловать в OmniCard!',\n    welcomeFirst: 'Мы помогаем изучать языки при помощи известного метода флэш-карточек.',\n    welcomeSecond: 'OmniCard — не учебник и не руководство. Рассматривайте его как тетрадь для упражнений, которую вы сами создаете и наполняете (хотя мы и предоставляем несколько встроенных карточек).',\n    welcomeChoose: 'Выберите свои языки:',\n    welcomeSpeak: 'Мой родной язык…',\n    welcomeLearn: 'Я изучаю…',\n    welcomeInterface: 'Я хочу интерфейс на…',\n    welcomeStart: 'Начать!',\n\n\n    meditation: 'Медитация',\n    meditationExplanation: 'Показываются обе стороны карточки, вопрос и ответ, позволяя изучать и запоминать материал.',\n    test: 'Тест',\n    testExplanation: 'Предполагает выбор одного правильного ответа из 4. Предназначается для дальнейшего фиксирования знаний. Не для всех колод.',\n    exam: 'Экзамен',\n    examExplanation: 'Самый сложный режим: ответы надо вводить вручную. Это особенно полезно для тренировки навыков письма.',\n\n\n    helpHeader: 'Выбирайте колоду из меню и начинайте изучение!',\n    helpFirst: 'Каждая колода предоставляет несколько режимов, в которых ее можно листать.',\n    helpAlso: 'Также можно (и нужно) создавать свои колоды, что развивает навыки письма на изучаемом языке.',\n\n    faq: 'ЧаВО',\n    faqDeckQ: 'Что такое карточка? Что такое колода?',\n    faqDeckA: 'Карточка это пара из вопроса (на родном языке) и ответа (на изучаемом). Колода — набор таких карточек, составленный по любому критерию.',\n    faqEditQ: 'Как редактировать/удалить колоду?',\n    faqEditA: 'Откройте ее и обратите внимание на ряд иконок в правом верхнем углу описания. ' +\n        'Иконка с карандашом открывает редактирование, а мусорная корзина удаляет колоду. ' +\n        'Встроенные колоды можно только скрыть (иконка с закрытым глазом). ' +\n        'Иконка с плюсиком открывает форму быстрого добавления карточки (только для созданных колод).',\n    faqCreateQ: 'Как создать колоду?',\n    faqCreateA: 'Используйте кнопку <span class=\"badge\">Добавить колоду…</span> под списком колод слева.',\n\n    faqShareQ: 'Я создал/отредактировал колоды на моем главном компьютере, как их перенести на телефон/планшет/другой компьютер?',\n    faqShareA1: 'Откройте колоду, которую хотите перенести, и нажмите на кнопку редактирования.',\n    faqShareA2: 'Нажмите кнопку <span class=\"badge\">Экспортировать колоду целиком</span>. Появится большое поле со странным текстом.',\n    faqShareA3: 'Скопируйте этот текст в буфер обмена.',\n    faqShareA4: 'Поскольку это просто текст, его можно вставить куда угодно. Сохраните на  \\\n                      <a href=\"https://drive.google.com\" target=\"_blank\">Google Drive</a>, пошлите самому себе электронное письмо, \\\n                      воспользуйтесь любым <a href=\"http://pastebin.com/\">pastebin</a>-сервисом, и т.д.',\n    faqShareA5: 'Откройте пересланный текст на том устройтве, на которое хотите перенести колоду, и скопируйте текст в буфер обмена.',\n    faqShareA6: 'Откройте OmniCard, и кликните на <span class=\"badge\">Добавить колоду…</span>. Кликните <span class=\"badge\">Импортировать колоду</span>. Откроется поле для ввода текста.',\n    faqShareA7: 'Вставьте текст из буфера обмена. Кликните <span class=\"badge\">Готово</span>.',\n    faqShareA8: 'Звучит сложнее, чем есть на самом деле:)',\n    faqShareA9: 'Также можно импортировать/экспортировать только карточки отдельно от колоды, и все колоды полностью в <span class=\"badge\">Настройках</span>.',\n\n    faqManagementQ: 'Можно ли удалить несколько колод сразу?',\n    faqManagementA: 'Кликните <span class=\"badge\">Колоды</span> над списком колод. Там вы найдете эту и другие массовые операции.',\n\n    faqFeedbackQ: 'Приложение ведет себя неправильно / Ошибка во встроенной колоде / У меня предложение / Опечатка / Я хочу помочь!',\n    faqFeedbackA: 'Спокойствие, только спокойствие:) <a href=\"https://github.com/hogart/OmniCard/issues/new\">Сообщите нам</a>. Спасибо!',\n\n    helpHide: 'Не показывать это',\n    helpShow: 'Показать подсказку',\n\n    bulkTitle: 'Управление колодами',\n    bulkSelectAll: 'Выбрать все',\n    bulkName: 'Название',\n    bulkDescription: 'Описание',\n    bulkShow: 'Показывать выбранные',\n    bulkHide: 'Скрыть/удалить выбранные',\n    bulkExport: 'Экспорт',\n\n    editDeck: 'Редактировать колоду',\n    deleteDeck: 'Удалить колоду',\n    deleteDeckConfirm: 'Вы действительно хотите удалить колоду?',\n    hideDeck: 'Скрыть колоду',\n    unhideDeck: 'Показывать колоду',\n    hideDeckConfirm: 'Вы действительно хотите скрыть колоду?',\n    showCorrections: 'Показывать правильные ответы',\n    showExamples: 'Показывать примеры употребления (если есть)',\n    showTranscriptions: 'Показывать транскрипцию (если есть)',\n    createDeck: 'Создать колоду',\n    importDeck: 'Импортировать колоду',\n    exportDeck: 'Экспортировать колоду целиком',\n    pasteDeck: 'Вставьте колоду сюда',\n    shareDeckHelp: 'Колода целиком',\n    deckProperties: 'Свойства колоды',\n    deckName: 'Название:',\n    deckNamePlaceholder: 'Название колоды',\n    deckDescr: 'Описание:',\n    deckDescrPlaceholder: 'Описание колоды (необязательное поле)',\n    deckTags: 'Метки:',\n    deckTagsPlaceholder: 'Метки колоды (необязательное поле)',\n    deckTagsHelp: 'Список, разделенный запятыми',\n    deckTestable: 'Тесты',\n    deckTestableHelp: 'Подходит ли колода для автоматического создания тестов? (Не работает на колодах меньше 5 карточек).',\n    deckCards: 'Карточки в колоде',\n    deckCardsImport: 'Импортировать карточки',\n    deckCardsExport: 'Экспортировать карточки (без примеров)',\n    deckCardsPaste: 'Вставьте карточки сюда',\n    deckCardsHelp: 'Перевод строки разделяет карточки, табуляция или 4 пробела разделяет вопрос и ответ (вопрос идет первым)',\n    deleteCard: 'Удалить карточки',\n    addCard: 'Добавить карточку',\n    deckSave: 'Сохранить колоду',\n\n    answer: 'Ответ',\n    question: 'Вопрос',\n    example: 'Пример: Вставьте [[answer]] вместо ответа карточки',\n    exampleAdd: 'Кликните, чтобы добавить пример в карточку',\n    ipa: 'Транскрипция/произношение (МФА или любая другая)',\n    ipaAdd: 'Кликните, чтобы добавить транскрипцию.произношение',\n    next: 'Следующий',\n    skip: 'Пропустить',\n\n\n    learnedNew: 'Узнали что-то новое? Хотите повторить или готовы испытать себя?',\n    wrongs: 'Неправильных ответов:',\n    corrects: 'Правильных ответов:',\n\n    congrats: 'Поздравляем! Ни единой ошибки!',\n    doNotDespair: 'Не отчаивайтесь. В следующий раз получится!',\n    moreWork: 'Неплохо, но нужно больше работать.',\n    notBad: 'Совсем недурно! Продолжайте тренироваться!',\n\n\n    importExport: 'Импорт/экспорт…',\n    importExportHelp: 'Позволяет импортировать и экспортировать все колоды разом. Полезно для переноса с/на другое устройство.',\n    clearAll: 'Полный сброс',\n    clearAllHelp: 'Удаляет все колоды и стирает все настройки. Вы должны осознавать, что делаете.',\n    confirmClearAll: 'Это сотрет все ваши колоды, сбросит настройки и перезагрузит приложение.\\nВы уверены, что хотите сделать это?',\n\n    changeLang: 'Изменить язык интерфейса',\n\n\n    dumpHelp: 'Скопируйте содержимое этого поля и отправьте его по электронной почте, через <a href=\"http://pastebin.com/\">pastebin</a>-сервис, и т.д.',\n    dumpFormatting: 'С форматированием'\n});\n","\ndefine(\n    'locale/locale',[\n        'locale/en/locale',\n        'locale/ru/locale'\n    ],\n    function (en, ru) {\n        'use strict';\n\n        return {\n            en: en,\n            ru: ru\n        };\n    }\n);","\ndefine('PredefinedDecks',{\n    \"ru-pl\": [\n        {\n            \"id\": \"swadesh\",\n            \"name\": \"«Список Сводеша»\",\n            \"description\": \"Колода составлена на основе <a href=\\\"http://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%A1%D0%B2%D0%BE%D0%B4%D0%B5%D1%88%D0%B0\\\">списка Сводеша</a>.\",\n            \"tags\": [\"словарный запас\"],\n            \"testable\": true,\n            \"builtIn\": true,\n            \"content\": [\n                {\n                    \"q\": \"я\",\n                    \"a\": \"ja\"\n                },\n                {\n                    \"q\": \"ты\",\n                    \"a\": \"ty\"\n                },\n                {\n                    \"q\": \"он\",\n                    \"a\": \"on\"\n                },\n                {\n                    \"q\": \"мы\",\n                    \"a\": \"my\"\n                },\n                {\n                    \"q\": \"вы\",\n                    \"a\": \"wy\"\n                },\n                {\n                    \"q\": \"они (в составе группы есть мужчина)\",\n                    \"a\": \"oni\"\n                },\n                {\n                    \"q\": \"они (в составе группы только женщины)\",\n                    \"a\": \"one\"\n                },\n                {\n                    \"q\": \"этот\",\n                    \"a\": \"ten\"\n                },\n                {\n                    \"q\": \"эта\",\n                    \"a\": \"ta\"\n                },\n                {\n                    \"q\": \"это\",\n                    \"a\": \"to\"\n                },\n                {\n                    \"q\": \"тот, та, то\",\n                    \"a\": \"tamten, tamta\"\n                },\n                {\n                    \"q\": \"та\",\n                    \"a\": \"tamta\"\n                },\n                {\n                    \"q\": \"то\",\n                    \"a\": \"tamto\"\n                },\n                {\n                    \"q\": \"здесь, тут\",\n                    \"a\": \"tutaj\"\n                },\n                {\n                    \"q\": \"там\",\n                    \"a\": \"tam\"\n                },\n                {\n                    \"q\": \"кто\",\n                    \"a\": \"kto\"\n                },\n                {\n                    \"q\": \"что\",\n                    \"a\": \"co\"\n                },\n                {\n                    \"q\": \"где\",\n                    \"a\": \"gdzie\"\n                },\n                {\n                    \"q\": \"когда\",\n                    \"a\": \"kiedy\"\n                },\n                {\n                    \"q\": \"как\",\n                    \"a\": \"jak\"\n                },\n                {\n                    \"q\": \"не\",\n                    \"a\": \"nie\"\n                },\n                {\n                    \"q\": \"всё\",\n                    \"a\": \"wszystko\"\n                },\n                {\n                    \"q\": \"много\",\n                    \"a\": \"wiele\"\n                },\n                {\n                    \"q\": \"несколько\",\n                    \"a\": \"kilka\"\n                },\n                {\n                    \"q\": \"другой, иной\",\n                    \"a\": \"inny\"\n                },\n                {\n                    \"q\": \"один\",\n                    \"a\": \"jeden\"\n                },\n                {\n                    \"q\": \"два\",\n                    \"a\": \"dwa\"\n                },\n                {\n                    \"q\": \"три\",\n                    \"a\": \"trzy\"\n                },\n                {\n                    \"q\": \"четыре\",\n                    \"a\": \"cztery\"\n                },\n                {\n                    \"q\": \"пять\",\n                    \"a\": \"pięć\"\n                },\n                {\n                    \"q\": \"большой\",\n                    \"a\": \"duży\"\n                },\n                {\n                    \"q\": \"великий\",\n                    \"a\": \"wielki\"\n                },\n                {\n                    \"q\": \"длинный, долгий\",\n                    \"a\": \"długi\"\n                },\n                {\n                    \"q\": \"широкий\",\n                    \"a\": \"szeroki\"\n                },\n                {\n                    \"q\": \"толстый (о человеке)\",\n                    \"a\": \"gruby\"\n                },\n                {\n                    \"q\": \"толстый (о предмете)\",\n                    \"a\": \"tłusty\"\n                },\n                {\n                    \"q\": \"тяжёлый\",\n                    \"a\": \"ciężki\"\n                },\n                {\n                    \"q\": \"маленький\",\n                    \"a\": \"mały\"\n                },\n                {\n                    \"q\": \"короткий\",\n                    \"a\": \"krótki\"\n                },\n                {\n                    \"q\": \"узкий\",\n                    \"a\": \"wąski\"\n                },\n                {\n                    \"q\": \"тонкий\",\n                    \"a\": \"cienki\"\n                },\n                {\n                    \"q\": \"женщина\",\n                    \"a\": \"kobieta\"\n                },\n                {\n                    \"q\": \"мужчина\",\n                    \"a\": \"mężczyzna\"\n                },\n                {\n                    \"q\": \"человек\",\n                    \"a\": \"człowiek\"\n                },\n                {\n                    \"q\": \"ребёнок, дитя\",\n                    \"a\": \"dziecko\"\n                },\n                {\n                    \"q\": \"жена\",\n                    \"a\": \"żona\"\n                },\n                {\n                    \"q\": \"муж\",\n                    \"a\": \"mąż\"\n                },\n                {\n                    \"q\": \"мать, мама\",\n                    \"a\": \"matka\"\n                },\n                {\n                    \"q\": \"отец, тятя\",\n                    \"a\": \"ojciec\"\n                },\n                {\n                    \"q\": \"зверь, животное\",\n                    \"a\": \"zwierzę\"\n                },\n                {\n                    \"q\": \"рыба\",\n                    \"a\": \"ryba\"\n                },\n                {\n                    \"q\": \"птица\",\n                    \"a\": \"ptak\"\n                },\n                {\n                    \"q\": \"собака, пёс\",\n                    \"a\": \"pies\"\n                },\n                {\n                    \"q\": \"вошь\",\n                    \"a\": \"wesz\"\n                },\n                {\n                    \"q\": \"змея, гад\",\n                    \"a\": \"wąż\"\n                },\n                {\n                    \"q\": \"червь, червяк\",\n                    \"a\": \"robak\"\n                },\n                {\n                    \"q\": \"дерево\",\n                    \"a\": \"drzewo\"\n                },\n                {\n                    \"q\": \"лес\",\n                    \"a\": \"las\"\n                },\n                {\n                    \"q\": \"плод, фрукт\",\n                    \"a\": \"owoc\"\n                },\n                {\n                    \"q\": \"лист\",\n                    \"a\": \"liść\"\n                },\n                {\n                    \"q\": \"корень\",\n                    \"a\": \"korzeń\"\n                },\n                {\n                    \"q\": \"кора\",\n                    \"a\": \"kora\"\n                },\n                {\n                    \"q\": \"цветок\",\n                    \"a\": \"kwiat\"\n                },\n                {\n                    \"q\": \"трава\",\n                    \"a\": \"trawa\"\n                },\n                {\n                    \"q\": \"кожа, шкура\",\n                    \"a\": \"skóra\"\n                },\n                {\n                    \"q\": \"мясо\",\n                    \"a\": \"mięso\"\n                },\n                {\n                    \"q\": \"кровь\",\n                    \"a\": \"krew\"\n                },\n                {\n                    \"q\": \"кость\",\n                    \"a\": \"kość\"\n                },\n                {\n                    \"q\": \"яйцо\",\n                    \"a\": \"jajko\"\n                },\n                {\n                    \"q\": \"рог\",\n                    \"a\": \"róg\"\n                },\n                {\n                    \"q\": \"хвост\",\n                    \"a\": \"ogon\"\n                },\n                {\n                    \"q\": \"перо\",\n                    \"a\": \"pióro\"\n                },\n                {\n                    \"q\": \"волосы\",\n                    \"a\": \"włosy\"\n                },\n                {\n                    \"q\": \"голова\",\n                    \"a\": \"głowa\"\n                },\n                {\n                    \"q\": \"ухо\",\n                    \"a\": \"ucho\"\n                },\n                {\n                    \"q\": \"глаз, око\",\n                    \"a\": \"oko\"\n                },\n                {\n                    \"q\": \"нос\",\n                    \"a\": \"nos\"\n                },\n                {\n                    \"q\": \"рот, уста\",\n                    \"a\": \"usta\"\n                },\n                {\n                    \"q\": \"зуб\",\n                    \"a\": \"ząb\"\n                },\n                {\n                    \"q\": \"язык\",\n                    \"a\": \"język\"\n                },\n                {\n                    \"q\": \"ноготь\",\n                    \"a\": \"paznokieć\"\n                },\n                {\n                    \"q\": \"стопа, ступня\",\n                    \"a\": \"stopa\"\n                },\n                {\n                    \"q\": \"нога\",\n                    \"a\": \"noga\"\n                },\n                {\n                    \"q\": \"колено\",\n                    \"a\": \"kolano\"\n                },\n                {\n                    \"q\": \"ладонь\",\n                    \"a\": \"dłoń\"\n                },\n                {\n                    \"q\": \"рука\",\n                    \"a\": \"ręka\"\n                },\n                {\n                    \"q\": \"крыло\",\n                    \"a\": \"skrzydło\"\n                },\n                {\n                    \"q\": \"живот, брюхо, пузо\",\n                    \"a\": \"brzuch\"\n                },\n                {\n                    \"q\": \"внутренности, кишки\",\n                    \"a\": \"wnętrzności\"\n                },\n                {\n                    \"q\": \"шея\",\n                    \"a\": \"szyja\"\n                },\n                {\n                    \"q\": \"спина\",\n                    \"a\": \"plecy\"\n                },\n                {\n                    \"q\": \"грудь\",\n                    \"a\": \"pierś\"\n                },\n                {\n                    \"q\": \"сердце\",\n                    \"a\": \"serce\"\n                },\n                {\n                    \"q\": \"печень\",\n                    \"a\": \"wątroba\"\n                },\n                {\n                    \"q\": \"пить\",\n                    \"a\": \"pić\"\n                },\n                {\n                    \"q\": \"есть, кушать\",\n                    \"a\": \"jeść\"\n                },\n                {\n                    \"q\": \"грызть, кусать\",\n                    \"a\": \"gryźć\"\n                },\n                {\n                    \"q\": \"сосать\",\n                    \"a\": \"ssać\"\n                },\n                {\n                    \"q\": \"плевать\",\n                    \"a\": \"pluć\"\n                },\n                {\n                    \"q\": \"дышать\",\n                    \"a\": \"oddychać\"\n                },\n                {\n                    \"q\": \"смеяться\",\n                    \"a\": \"śmiać się\"\n                },\n                {\n                    \"q\": \"видеть\",\n                    \"a\": \"widzieć\"\n                },\n                {\n                    \"q\": \"слышать\",\n                    \"a\": \"słyszeć\"\n                },\n                {\n                    \"q\": \"знать\",\n                    \"a\": \"wiedzieć\"\n                },\n                {\n                    \"q\": \"думать\",\n                    \"a\": \"myśleć\"\n                },\n                {\n                    \"q\": \"нюхать, чуять\",\n                    \"a\": \"wąchać\"\n                },\n                {\n                    \"q\": \"бояться\",\n                    \"a\": \"bać się\"\n                },\n                {\n                    \"q\": \"спать\",\n                    \"a\": \"spać\"\n                },\n                {\n                    \"q\": \"жить\",\n                    \"a\": \"żyć\"\n                },\n                {\n                    \"q\": \"умирать; умереть\",\n                    \"a\": \"umierać\"\n                },\n                {\n                    \"q\": \"убивать\",\n                    \"a\": \"zabijać\"\n                },\n                {\n                    \"q\": \"бороться\",\n                    \"a\": \"walczyć\"\n                },\n                {\n                    \"q\": \"охотиться\",\n                    \"a\": \"polować\"\n                },\n                {\n                    \"q\": \"ударить\",\n                    \"a\": \"uderzać\"\n                },\n                {\n                    \"q\": \"резать, рубить\",\n                    \"a\": \"ciąć\"\n                },\n                {\n                    \"q\": \"разделить\",\n                    \"a\": \"rozdzielać\"\n                },\n                {\n                    \"q\": \"кольнуть, колоть\",\n                    \"a\": \"pchnąć\"\n                },\n                {\n                    \"q\": \"царапать\",\n                    \"a\": \"drapać\"\n                },\n                {\n                    \"q\": \"копать, рыть\",\n                    \"a\": \"kopać\"\n                },\n                {\n                    \"q\": \"плавать\",\n                    \"a\": \"pływać\"\n                },\n                {\n                    \"q\": \"летать\",\n                    \"a\": \"latać\"\n                },\n                {\n                    \"q\": \"идти\",\n                    \"a\": \"iść\"\n                },\n                {\n                    \"q\": \"приходить, прийти\",\n                    \"a\": \"przychodzić\"\n                },\n                {\n                    \"q\": \"лежать\",\n                    \"a\": \"lezeć\"\n                },\n                {\n                    \"q\": \"сидеть\",\n                    \"a\": \"siedzieć\"\n                },\n                {\n                    \"q\": \"стоять\",\n                    \"a\": \"stać\"\n                },\n                {\n                    \"q\": \"вращать, вертеть\",\n                    \"a\": \"obracać\"\n                },\n                {\n                    \"q\": \"падать\",\n                    \"a\": \"upadać\"\n                },\n                {\n                    \"q\": \"давать\",\n                    \"a\": \"dawać\"\n                },\n                {\n                    \"q\": \"держать\",\n                    \"a\": \"trzymać\"\n                },\n                {\n                    \"q\": \"сжимать\",\n                    \"a\": \"ściskać, zgniatać\"\n                },\n                {\n                    \"q\": \"тереть\",\n                    \"a\": \"zawijać\"\n                },\n                {\n                    \"q\": \"мыть, умывать\",\n                    \"a\": \"myć\"\n                },\n                {\n                    \"q\": \"вытирать\",\n                    \"a\": \"wycierać\"\n                },\n                {\n                    \"q\": \"тянуть\",\n                    \"a\": \"ciagnać\"\n                },\n                {\n                    \"q\": \"толкать, пихать\",\n                    \"a\": \"pchać\"\n                },\n                {\n                    \"q\": \"бросать, кидать\",\n                    \"a\": \"rzucać\"\n                },\n                {\n                    \"q\": \"вязать, связывать\",\n                    \"a\": \"wiązać\"\n                },\n                {\n                    \"q\": \"шить\",\n                    \"a\": \"szyć\"\n                },\n                {\n                    \"q\": \"считать\",\n                    \"a\": \"liczyć\"\n                },\n                {\n                    \"q\": \"говорить, сказать\",\n                    \"a\": \"mówić\"\n                },\n                {\n                    \"q\": \"петь\",\n                    \"a\": \"śpiewać\"\n                },\n                {\n                    \"q\": \"играть\",\n                    \"a\": \"grać\"\n                },\n                {\n                    \"q\": \"плыть\",\n                    \"a\": \"płynąć\"\n                },\n                {\n                    \"q\": \"замёрзнуть, замерзать\",\n                    \"a\": \"zamarzać\"\n                },\n                {\n                    \"q\": \"пухнуть\",\n                    \"a\": \"puchnąć\"\n                },\n                {\n                    \"q\": \"солнце\",\n                    \"a\": \"słońce\"\n                },\n                {\n                    \"q\": \"луна, месяц\",\n                    \"a\": \"księżyc\"\n                },\n                {\n                    \"q\": \"звезда\",\n                    \"a\": \"gwiazda\"\n                },\n                {\n                    \"q\": \"вода\",\n                    \"a\": \"woda\"\n                },\n                {\n                    \"q\": \"дождь\",\n                    \"a\": \"deszcz\"\n                },\n                {\n                    \"q\": \"река\",\n                    \"a\": \"rzeka\"\n                },\n                {\n                    \"q\": \"озеро\",\n                    \"a\": \"jezioro\"\n                },\n                {\n                    \"q\": \"море\",\n                    \"a\": \"morze\"\n                },\n                {\n                    \"q\": \"соль\",\n                    \"a\": \"sól\"\n                },\n                {\n                    \"q\": \"камень\",\n                    \"a\": \"kamień\"\n                },\n                {\n                    \"q\": \"песок\",\n                    \"a\": \"piasek\"\n                },\n                {\n                    \"q\": \"пыль\",\n                    \"a\": \"kurz\"\n                },\n                {\n                    \"q\": \"земля\",\n                    \"a\": \"ziemia\"\n                },\n                {\n                    \"q\": \"туча, облако\",\n                    \"a\": \"chmura\"\n                },\n                {\n                    \"q\": \"туман\",\n                    \"a\": \"mgła\"\n                },\n                {\n                    \"q\": \"небо\",\n                    \"a\": \"niebo\"\n                },\n                {\n                    \"q\": \"ветер\",\n                    \"a\": \"wiatr\"\n                },\n                {\n                    \"q\": \"снег\",\n                    \"a\": \"śnieg\"\n                },\n                {\n                    \"q\": \"лёд\",\n                    \"a\": \"lód\"\n                },\n                {\n                    \"q\": \"дым\",\n                    \"a\": \"dym\"\n                },\n                {\n                    \"q\": \"огонь\",\n                    \"a\": \"ogień\"\n                },\n                {\n                    \"q\": \"зола, пепел\",\n                    \"a\": \"popiół\"\n                },\n                {\n                    \"q\": \"жечь\",\n                    \"a\": \"palić\"\n                },\n                {\n                    \"q\": \"дорога, путь\",\n                    \"a\": \"droga\"\n                },\n                {\n                    \"q\": \"гора\",\n                    \"a\": \"góra\"\n                },\n                {\n                    \"q\": \"красный\",\n                    \"a\": \"czerwony\"\n                },\n                {\n                    \"q\": \"зелёный\",\n                    \"a\": \"zielony\"\n                },\n                {\n                    \"q\": \"жёлтый\",\n                    \"a\": \"żółty\"\n                },\n                {\n                    \"q\": \"белый\",\n                    \"a\": \"biały\"\n                },\n                {\n                    \"q\": \"чёрный\",\n                    \"a\": \"czarny\"\n                },\n                {\n                    \"q\": \"ночь\",\n                    \"a\": \"noc\"\n                },\n                {\n                    \"q\": \"день\",\n                    \"a\": \"dzień\"\n                },\n                {\n                    \"q\": \"год\",\n                    \"a\": \"rok\"\n                },\n                {\n                    \"q\": \"тёплый\",\n                    \"a\": \"ciepły\"\n                },\n                {\n                    \"q\": \"холодный\",\n                    \"a\": \"zimny\"\n                },\n                {\n                    \"q\": \"полный\",\n                    \"a\": \"pełny\"\n                },\n                {\n                    \"q\": \"новый\",\n                    \"a\": \"nowy\"\n                },\n                {\n                    \"q\": \"старый\",\n                    \"a\": \"stary\"\n                },\n                {\n                    \"q\": \"хороший, добрый\",\n                    \"a\": \"dobry\"\n                },\n                {\n                    \"q\": \"злой, плохой\",\n                    \"a\": \"zły\"\n                },\n                {\n                    \"q\": \"гнилой\",\n                    \"a\": \"zgniły\"\n                },\n                {\n                    \"q\": \"грязный\",\n                    \"a\": \"brudny\"\n                },\n                {\n                    \"q\": \"прямой\",\n                    \"a\": \"prosty\"\n                },\n                {\n                    \"q\": \"круглый\",\n                    \"a\": \"okrągły\"\n                },\n                {\n                    \"q\": \"острый\",\n                    \"a\": \"ostry\"\n                },\n                {\n                    \"q\": \"тупой\",\n                    \"a\": \"tępy\"\n                },\n                {\n                    \"q\": \"гладкий, ровный\",\n                    \"a\": \"gładki\"\n                },\n                {\n                    \"q\": \"мокрый\",\n                    \"a\": \"mokry\"\n                },\n                {\n                    \"q\": \"сухой\",\n                    \"a\": \"suchy\"\n                },\n                {\n                    \"q\": \"близкий\",\n                    \"a\": \"bliski\"\n                },\n                {\n                    \"q\": \"далёкий, дальний\",\n                    \"a\": \"daleki\"\n                },\n                {\n                    \"q\": \"правый\",\n                    \"a\": \"prawy\"\n                },\n                {\n                    \"q\": \"левый\",\n                    \"a\": \"lewy\"\n                },\n                {\n                    \"q\": \"при, у, возле\",\n                    \"a\": \"przy\"\n                },\n                {\n                    \"q\": \"в\",\n                    \"a\": \"w\"\n                },\n                {\n                    \"q\": \"с, со\",\n                    \"a\": \"z\"\n                },\n                {\n                    \"q\": \"и\",\n                    \"a\": \"i\"\n                },\n                {\n                    \"q\": \"если\",\n                    \"a\": \"jeśli\"\n                },\n                {\n                    \"q\": \"потому что\",\n                    \"a\": \"bo\"\n                },\n                {\n                    \"q\": \"имя\",\n                    \"a\": \"imię\"\n                }\n            ]\n        },\n\n        {\n            \"id\": \"interior\",\n            \"name\": \"Интерьер\",\n            \"description\": \"Несколько существительных, описывающих предметы интерьера и быта.\",\n            \"tags\": [\"словарный запас\", \"существительные\"],\n            \"testable\": true,\n            \"builtIn\": true,\n            \"content\": [\n                {\n                    \"q\": \"стол\",\n                    \"a\": \"stół\"\n                },\n                {\n                    \"q\": \"тетрадь\",\n                    \"a\": \"zeszyt\",\n                    \"eg\": \"To mój [[answer]]\"\n                },\n                {\n                    \"q\": \"авторучка\",\n                    \"a\": \"długopis\"\n                },\n                {\n                    \"q\": \"карандаш\",\n                    \"a\": \"ołówek\"\n                },\n                {\n                    \"q\": \"потолок\",\n                    \"a\": \"sufit\"\n                },\n                {\n                    \"q\": \"кресло\",\n                    \"a\": \"fotel\"\n                },\n                {\n                    \"q\": \"стеллаж\",\n                    \"a\": \"regał\"\n                },\n                {\n                    \"q\": \"подоконник\",\n                    \"a\": \"parapet\"\n                },\n                {\n                    \"q\": \"корзина\",\n                    \"a\": \"kosz\"\n                },\n                {\n                    \"q\": \"календарь\",\n                    \"a\": \"kalendarz\"\n                },\n                {\n                    \"q\": \"словарь\",\n                    \"a\": \"słownik\"\n                },\n                {\n                    \"q\": \"ковер\",\n                    \"a\": \"dywan\"\n                },\n                {\n                    \"q\": \"книга\",\n                    \"a\": \"książka\",\n                    \"eg\": \"Ta [[answer]] jest ciężka\"\n                },\n                {\n                    \"q\": \"дамская сумочка\",\n                    \"a\": \"torebka\"\n                },\n                {\n                    \"q\": \"портфель\",\n                    \"a\": \"teczka\"\n                },\n                {\n                    \"q\": \"пол\",\n                    \"a\": \"podłoga\"\n                },\n                {\n                    \"q\": \"стена\",\n                    \"a\": \"ściana\",\n                    \"eg\": \"[[answer]] jest biała\"\n                },\n                {\n                    \"q\": \"доска\",\n                    \"a\": \"tablica\"\n                },\n                {\n                    \"q\": \"шкаф\",\n                    \"a\": \"szafa\"\n                },\n                {\n                    \"q\": \"шкафчик\",\n                    \"a\": \"szafka\"\n                },\n                {\n                    \"q\": \"лампа\",\n                    \"a\": \"lampa\"\n                },\n                {\n                    \"q\": \"лампочка\",\n                    \"a\": \"żarówka\"\n                },\n                {\n                    \"q\": \"игрушка\",\n                    \"a\": \"zabawka\"\n                },\n                {\n                    \"q\": \"мягкая игрушка\",\n                    \"a\": \"maskotka\"\n                },\n                {\n                    \"q\": \"плита\",\n                    \"a\": \"płyta\"\n                },\n                {\n                    \"q\": \"диван\",\n                    \"a\": \"kanapa\"\n                },\n                {\n                    \"q\": \"чашка\",\n                    \"a\": \"filiżanka\"\n                },\n                {\n                    \"q\": \"письменный стол\",\n                    \"a\": \"biurko\"\n                },\n                {\n                    \"q\": \"перо, ручка\",\n                    \"a\": \"pióro\"\n                },\n                {\n                    \"q\": \"стул\",\n                    \"a\": \"krzesło\"\n                },\n                {\n                    \"q\": \"окно\",\n                    \"a\": \"okno\"\n                },\n                {\n                    \"q\": \"кровать\",\n                    \"a\": \"łóżko\"\n                },\n                {\n                    \"q\": \"люстра\",\n                    \"a\": \"lustro\"\n                },\n                {\n                    \"q\": \"двери\",\n                    \"a\": \"drzwi\"\n                }\n            ]\n        },\n\n        {\n            \"id\": \"adjectives1\",\n            \"name\": \"Прилагательные\",\n            \"description\": \"Часто употребляющиеся прилагательные (в именительном падеже).\",\n            \"tags\": [\"словарный запас\", \"прилагательные\"],\n            \"testable\": true,\n            \"builtIn\": true,\n            \"content\": [\n                {\n                    \"q\": \"узкий\",\n                    \"a\": \"wąski\"\n                },\n                {\n                    \"q\": \"красочный, цветной\",\n                    \"a\": \"kolorowy\"\n                },\n                {\n                    \"q\": \"тяжелый\",\n                    \"a\": \"ciężki\"\n                },\n                {\n                    \"q\": \"грязный\",\n                    \"a\": \"brudny\"\n                },\n                {\n                    \"q\": \"прямой\",\n                    \"a\": \"prosty\"\n                },\n                {\n                    \"q\": \"кривой\",\n                    \"a\": \"krzywy\"\n                },\n                {\n                    \"q\": \"мудрый\",\n                    \"a\": \"mądry\"\n                },\n                {\n                    \"q\": \"толстый (о предмете)\",\n                    \"a\": \"tęgi\"\n                },\n                {\n                    \"q\": \"мягкий\",\n                    \"a\": \"miękki\"\n                },\n                {\n                    \"q\": \"общительный\",\n                    \"a\": \"towarzysky\"\n                },\n                {\n                    \"q\": \"бумажный\",\n                    \"a\": \"papierowy\"\n                },\n                {\n                    \"q\": \"серый\",\n                    \"a\": \"szary\"\n                },\n                {\n                    \"q\": \"плоский\",\n                    \"a\": \"płaski\"\n                },\n                {\n                    \"q\": \"красный\",\n                    \"a\": \"czerwony\"\n                },\n                {\n                    \"q\": \"синий\",\n                    \"a\": \"niebieski\"\n                },\n                {\n                    \"q\": \"зеленый\",\n                    \"a\": \"zielony\"\n                },\n                {\n                    \"q\": \"белый\",\n                    \"a\": \"biały\"\n                },\n                {\n                    \"q\": \"черный\",\n                    \"a\": \"czarny\"\n                }\n            ]\n        },\n\n        {\n            \"id\": \"verbsI\",\n            \"name\": \"Глаголы I спряжения, ч. 1\",\n            \"description\": \"Некоторые глаголы I спряжения. Инфинитив и 6 форм настоящего времени.\\n12 глаголов.\",\n            \"tags\": [\"глаголы\", \"грамматика\"],\n            \"testable\": true,\n            \"builtIn\": true,\n            \"content\": [\n                {\n                    \"a\": \"wykonywać\",\n                    \"q\": \"выполнять\"\n                },\n                {\n                    \"a\": \"wykonuję\",\n                    \"q\": \"выполняю\"\n                },\n                {\n                    \"a\": \"wykonujesz\",\n                    \"q\": \"выполняешь\"\n                },\n                {\n                    \"a\": \"wykonuje\",\n                    \"q\": \"выполняет\"\n                },\n                {\n                    \"a\": \"wykonujemy\",\n                    \"q\": \"выполняем\"\n                },\n                {\n                    \"a\": \"wykonujecie\",\n                    \"q\": \"выполняете\"\n                },\n                {\n                    \"a\": \"wykonują\",\n                    \"q\": \"выполняют\"\n                },\n                {\n                    \"a\": \"gotować\",\n                    \"q\": \"готовить\"\n                },\n                {\n                    \"a\": \"gotuję\",\n                    \"q\": \"готовлю\",\n                    \"eg\": \"[[answer]] śniadanie.\"\n                },\n                {\n                    \"a\": \"gotujesz\",\n                    \"q\": \"готовишь\"\n                },\n                {\n                    \"a\": \"gotuje\",\n                    \"q\": \"готовит\"\n                },\n                {\n                    \"a\": \"gotujemy\",\n                    \"q\": \"готовим\"\n                },\n                {\n                    \"a\": \"gotujecie\",\n                    \"q\": \"готовите\"\n                },\n                {\n                    \"a\": \"gotują\",\n                    \"q\": \"готовят\"\n                },\n                {\n                    \"a\": \"podróżować\",\n                    \"q\": \"путешествовать\"\n                },\n                {\n                    \"a\": \"podróżuję\",\n                    \"q\": \"путешествую\"\n                },\n                {\n                    \"a\": \"podróżujesz\",\n                    \"q\": \"путешествуешь\"\n                },\n                {\n                    \"a\": \"podróżuje\",\n                    \"q\": \"путешествует\"\n                },\n                {\n                    \"a\": \"podróżujemy\",\n                    \"q\": \"путешествуем\"\n                },\n                {\n                    \"a\": \"podróżujecie\",\n                    \"q\": \"путешествуете\"\n                },\n                {\n                    \"a\": \"podróżują\",\n                    \"q\": \"путешествуют\"\n                },\n                {\n                    \"a\": \"pić\",\n                    \"q\": \"пить\"\n                },\n                {\n                    \"a\": \"piję\",\n                    \"q\": \"пью\"\n                },\n                {\n                    \"a\": \"pijesz\",\n                    \"q\": \"пьешь\"\n                },\n                {\n                    \"a\": \"pije\",\n                    \"q\": \"пьет\"\n                },\n                {\n                    \"a\": \"pijemy\",\n                    \"q\": \"пьем\"\n                },\n                {\n                    \"a\": \"pijecie\",\n                    \"q\": \"пьете\"\n                },\n                {\n                    \"a\": \"piją\",\n                    \"q\": \"пьют\"\n                },\n                {\n                    \"a\": \"bić\",\n                    \"q\": \"бить\"\n                },\n                {\n                    \"a\": \"biję\",\n                    \"q\": \"бью\"\n                },\n                {\n                    \"a\": \"bijesz\",\n                    \"q\": \"бьешь\"\n                },\n                {\n                    \"a\": \"bije\",\n                    \"q\": \"бьет\"\n                },\n                {\n                    \"a\": \"bijemy\",\n                    \"q\": \"бьем\"\n                },\n                {\n                    \"a\": \"bijecie\",\n                    \"q\": \"бьете\"\n                },\n                {\n                    \"a\": \"biją\",\n                    \"q\": \"бьют\"\n                },\n                {\n                    \"a\": \"żyć\",\n                    \"q\": \"жить\"\n                },\n                {\n                    \"a\": \"żyję\",\n                    \"q\": \"живу\"\n                },\n                {\n                    \"a\": \"żyjesz\",\n                    \"q\": \"живешь\"\n                },\n                {\n                    \"a\": \"żyje\",\n                    \"q\": \"живет\"\n                },\n                {\n                    \"a\": \"żyjemy\",\n                    \"q\": \"живем\"\n                },\n                {\n                    \"a\": \"żyjecie\",\n                    \"q\": \"живете\"\n                },\n                {\n                    \"a\": \"żyją\",\n                    \"q\": \"живут\"\n                },\n                {\n                    \"a\": \"ciągnąć\",\n                    \"q\": \"тянуть\"\n                },\n                {\n                    \"a\": \"ciągnę\",\n                    \"q\": \"тяну\"\n                },\n                {\n                    \"a\": \"ciągniesz\",\n                    \"q\": \"тянешь\"\n                },\n                {\n                    \"a\": \"ciągnie\",\n                    \"q\": \"тянет\"\n                },\n                {\n                    \"a\": \"ciągniemy\",\n                    \"q\": \"тянем\"\n                },\n                {\n                    \"a\": \"ciągniecie\",\n                    \"q\": \"тя́нете\"\n                },\n                {\n                    \"a\": \"ciągną\",\n                    \"q\": \"тянут\"\n                },\n                {\n                    \"a\": \"pisać\",\n                    \"q\": \"писать\"\n                },\n                {\n                    \"a\": \"piszę\",\n                    \"q\": \"пишу\"\n                },\n                {\n                    \"a\": \"piszesz\",\n                    \"q\": \"пишешь\"\n                },\n                {\n                    \"a\": \"pisze\",\n                    \"q\": \"пишет\"\n                },\n                {\n                    \"a\": \"piszemy\",\n                    \"q\": \"пишем\"\n                },\n                {\n                    \"a\": \"piszecie\",\n                    \"q\": \"пишете\"\n                },\n                {\n                    \"a\": \"piszą\",\n                    \"q\": \"пишут\"\n                },\n                {\n                    \"a\": \"istnieć\",\n                    \"q\": \"существовать\"\n                },\n                {\n                    \"a\": \"istnieję\",\n                    \"q\": \"существую\"\n                },\n                {\n                    \"a\": \"istniejesz\",\n                    \"q\": \"существуешь\"\n                },\n                {\n                    \"a\": \"istnieje\",\n                    \"q\": \"существует\"\n                },\n                {\n                    \"a\": \"istniejemy\",\n                    \"q\": \"существуем\"\n                },\n                {\n                    \"a\": \"istniejecie\",\n                    \"q\": \"существуете\"\n                },\n                {\n                    \"a\": \"istnieją\",\n                    \"q\": \"существуют\"\n                },\n                {\n                    \"a\": \"chcieć\",\n                    \"q\": \"хотеть\"\n                },\n                {\n                    \"a\": \"chcę\",\n                    \"q\": \"хочу\"\n                },\n                {\n                    \"a\": \"chcesz\",\n                    \"q\": \"хочешь\"\n                },\n                {\n                    \"a\": \"chce\",\n                    \"q\": \"хочет\"\n                },\n                {\n                    \"a\": \"chcemy\",\n                    \"q\": \"хотим\"\n                },\n                {\n                    \"a\": \"chcecie\",\n                    \"q\": \"хотите\"\n                },\n                {\n                    \"a\": \"chcą\",\n                    \"q\": \"хотят\"\n                },\n                {\n                    \"a\": \"kłamać\",\n                    \"q\": \"врать\"\n                },\n                {\n                    \"a\": \"kłamię\",\n                    \"q\": \"вру\"\n                },\n                {\n                    \"a\": \"kłamiesz\",\n                    \"q\": \"врешь\"\n                },\n                {\n                    \"a\": \"kłamie\",\n                    \"q\": \"врет\"\n                },\n                {\n                    \"a\": \"kłamiemy\",\n                    \"q\": \"врем\"\n                },\n                {\n                    \"a\": \"kłamiecie\",\n                    \"q\": \"врете\"\n                },\n                {\n                    \"a\": \"kłamią\",\n                    \"q\": \"врут\"\n                },\n                {\n                    \"a\": \"kąpać się\",\n                    \"q\": \"купаться\"\n                },\n                {\n                    \"a\": \"kąpię się\",\n                    \"q\": \"купаюсь\"\n                },\n                {\n                    \"a\": \"kąpiesz się\",\n                    \"q\": \"купаешься\"\n                },\n                {\n                    \"a\": \"kąpie się\",\n                    \"q\": \"купается\"\n                },\n                {\n                    \"a\": \"kąpiemy się\",\n                    \"q\": \"купаемся\"\n                },\n                {\n                    \"a\": \"kąpiecie się\",\n                    \"q\": \"купаетесь\"\n                },\n                {\n                    \"a\": \"kąpią się\",\n                    \"q\": \"купаются\"\n                }\n            ]\n        },\n\n        {\n            \"id\": \"verbsI-1\",\n            \"name\": \"Глаголы I спряжения, ч.2\",\n            \"description\": \"Глаголы I спряжения с чередованием в основе. Инфинитив и 6 форм настоящего времени.\\n14 глаголов.\",\n            \"tags\": [\"глаголы\", \"грамматика\"],\n            \"testable\": true,\n            \"builtIn\": true,\n            \"content\": [\n                {\n                    \"a\": \"paść\",\n                    \"q\": \"пасти\"\n                },\n                {\n                    \"a\": \"pasę\",\n                    \"q\": \"пасу\"\n                },\n                {\n                    \"a\": \"pasiesz\",\n                    \"q\": \"пасешь\"\n                },\n                {\n                    \"a\": \"pasie\",\n                    \"q\": \"пасет\"\n                },\n                {\n                    \"a\": \"pasiemy\",\n                    \"q\": \"пасем\"\n                },\n                {\n                    \"a\": \"pasiecie\",\n                    \"q\": \"пасете\"\n                },\n                {\n                    \"a\": \"pasą\",\n                    \"q\": \"пасут\"\n                },\n                {\n                    \"a\": \"gryźć\",\n                    \"q\": \"грызть\"\n                },\n                {\n                    \"a\": \"gryzę\",\n                    \"q\": \"грызу\"\n                },\n                {\n                    \"a\": \"gryziesz\",\n                    \"q\": \"грызешь\"\n                },\n                {\n                    \"a\": \"gryzie\",\n                    \"q\": \"грызет\"\n                },\n                {\n                    \"a\": \"gryziemy\",\n                    \"q\": \"грызем\"\n                },\n                {\n                    \"a\": \"gryziecie\",\n                    \"q\": \"грызете\"\n                },\n                {\n                    \"a\": \"gryzą\",\n                    \"q\": \"грызут\"\n                },\n                {\n                    \"a\": \"nieść\",\n                    \"q\": \"нести\"\n                },\n                {\n                    \"a\": \"niosę\",\n                    \"q\": \"несу\"\n                },\n                {\n                    \"a\": \"niesiesz\",\n                    \"q\": \"несешь\"\n                },\n                {\n                    \"a\": \"niesie\",\n                    \"q\": \"несет\"\n                },\n                {\n                    \"a\": \"niesiemy\",\n                    \"q\": \"несем\"\n                },\n                {\n                    \"a\": \"niesiecie\",\n                    \"q\": \"несете\"\n                },\n                {\n                    \"a\": \"niosą\",\n                    \"q\": \"несут\"\n                },\n                {\n                    \"a\": \"pleść\",\n                    \"q\": \"плести\"\n                },\n                {\n                    \"a\": \"plotę\",\n                    \"q\": \"плету\"\n                },\n                {\n                    \"a\": \"pleciesz\",\n                    \"q\": \"плетешь\"\n                },\n                {\n                    \"a\": \"plecie\",\n                    \"q\": \"плетет\"\n                },\n                {\n                    \"a\": \"pleciemy\",\n                    \"q\": \"плетем\"\n                },\n                {\n                    \"a\": \"pleciecie\",\n                    \"q\": \"плетете\"\n                },\n                {\n                    \"a\": \"plotą\",\n                    \"q\": \"плетут\"\n                },\n                {\n                    \"a\": \"wieźć\",\n                    \"q\": \"везти\"\n                },\n                {\n                    \"a\": \"wiozę\",\n                    \"q\": \"везу\"\n                },\n                {\n                    \"a\": \"wieziesz\",\n                    \"q\": \"везешь\"\n                },\n                {\n                    \"a\": \"wiezie\",\n                    \"q\": \"везет\"\n                },\n                {\n                    \"a\": \"wieziemy\",\n                    \"q\": \"везем\"\n                },\n                {\n                    \"a\": \"wieziecie\",\n                    \"q\": \"везете\"\n                },\n                {\n                    \"a\": \"wiozą\",\n                    \"q\": \"везут\"\n                },\n                {\n                    \"a\": \"iść\",\n                    \"q\": \"идти\"\n                },\n                {\n                    \"a\": \"idę\",\n                    \"q\": \"иду\"\n                },\n                {\n                    \"a\": \"idziesz\",\n                    \"q\": \"идешь\"\n                },\n                {\n                    \"a\": \"idzie\",\n                    \"q\": \"идет\"\n                },\n                {\n                    \"a\": \"idziemy\",\n                    \"q\": \"идем\"\n                },\n                {\n                    \"a\": \"idziecie\",\n                    \"q\": \"идете\"\n                },\n                {\n                    \"a\": \"idą\",\n                    \"q\": \"идут\"\n                },\n                {\n                    \"a\": \"jechać\",\n                    \"q\": \"ехать\"\n                },\n                {\n                    \"a\": \"jadę\",\n                    \"q\": \"еду\"\n                },\n                {\n                    \"a\": \"jedziesz\",\n                    \"q\": \"едешь\"\n                },\n                {\n                    \"a\": \"jedzie\",\n                    \"q\": \"едет\"\n                },\n                {\n                    \"a\": \"jedziemy\",\n                    \"q\": \"едем\"\n                },\n                {\n                    \"a\": \"jedziecie\",\n                    \"q\": \"едете\"\n                },\n                {\n                    \"a\": \"jadą\",\n                    \"q\": \"едут\"\n                },\n                {\n                    \"a\": \"móc\",\n                    \"q\": \"мочь\"\n                },\n                {\n                    \"a\": \"mogę\",\n                    \"q\": \"могу\"\n                },\n                {\n                    \"a\": \"możesz\",\n                    \"q\": \"можешь\"\n                },\n                {\n                    \"a\": \"może\",\n                    \"q\": \"может\"\n                },\n                {\n                    \"a\": \"możemy\",\n                    \"q\": \"можем\"\n                },\n                {\n                    \"a\": \"możecie\",\n                    \"q\": \"можете\"\n                },\n                {\n                    \"a\": \"mogą\",\n                    \"q\": \"могут\"\n                },\n                {\n                    \"a\": \"piec\",\n                    \"q\": \"печь\"\n                },\n                {\n                    \"a\": \"piekę\",\n                    \"q\": \"пеку\"\n                },\n                {\n                    \"a\": \"pieczesz\",\n                    \"q\": \"печешь\"\n                },\n                {\n                    \"a\": \"piecze\",\n                    \"q\": \"печет\"\n                },\n                {\n                    \"a\": \"pieczemy\",\n                    \"q\": \"печем\"\n                },\n                {\n                    \"a\": \"pieczecie\",\n                    \"q\": \"печете\"\n                },\n                {\n                    \"a\": \"pieką\",\n                    \"q\": \"пекут\"\n                },\n                {\n                    \"a\": \"wlec\",\n                    \"q\": \"волочить\"\n                },\n                {\n                    \"a\": \"wlokę\",\n                    \"q\": \"волоку\"\n                },\n                {\n                    \"a\": \"wleczesz\",\n                    \"q\": \"волочешь\"\n                },\n                {\n                    \"a\": \"wlecze\",\n                    \"q\": \"волочет\"\n                },\n                {\n                    \"a\": \"wleczemy\",\n                    \"q\": \"волочим\"\n                },\n                {\n                    \"a\": \"wleczecie\",\n                    \"q\": \"воло́чите\"\n                },\n                {\n                    \"a\": \"wloką\",\n                    \"q\": \"волокут\"\n                },\n                {\n                    \"a\": \"brać\",\n                    \"q\": \"брать\"\n                },\n                {\n                    \"a\": \"biorę\",\n                    \"q\": \"беру\"\n                },\n                {\n                    \"a\": \"bierzesz\",\n                    \"q\": \"берешь\"\n                },\n                {\n                    \"a\": \"bierze\",\n                    \"q\": \"берет\",\n                    \"eg\": \"Urzędnik [[answer]] łapówki\"\n                },\n                {\n                    \"a\": \"bierzemy\",\n                    \"q\": \"берем\"\n                },\n                {\n                    \"a\": \"bierzecie\",\n                    \"q\": \"берете\"\n                },\n                {\n                    \"a\": \"biorą\",\n                    \"q\": \"берут\",\n                    \"eg\": \"Urzędniki [[answer]] łapówki\"\n                },\n                {\n                    \"a\": \"prać\",\n                    \"q\": \"стирать\"\n                },\n                {\n                    \"a\": \"piorę\",\n                    \"q\": \"стираю\"\n                },\n                {\n                    \"a\": \"pierzesz\",\n                    \"q\": \"стираешь\"\n                },\n                {\n                    \"a\": \"pierze\",\n                    \"q\": \"стирает\"\n                },\n                {\n                    \"a\": \"pierzemy\",\n                    \"q\": \"стираем\"\n                },\n                {\n                    \"a\": \"pierzecie\",\n                    \"q\": \"стираете\"\n                },\n                {\n                    \"a\": \"piorą\",\n                    \"q\": \"стирают\"\n                },\n                {\n                    \"a\": \"trzeć\",\n                    \"q\": \"тереть\"\n                },\n                {\n                    \"a\": \"trę\",\n                    \"q\": \"тру\"\n                },\n                {\n                    \"a\": \"trzesz\",\n                    \"q\": \"трешь\"\n                },\n                {\n                    \"a\": \"trze\",\n                    \"q\": \"трет\"\n                },\n                {\n                    \"a\": \"trzemy\",\n                    \"q\": \"трем\"\n                },\n                {\n                    \"a\": \"trzecie\",\n                    \"q\": \"трете\"\n                },\n                {\n                    \"a\": \"trą\",\n                    \"q\": \"трут\"\n                },\n                {\n                    \"a\": \"umrzeć\",\n                    \"q\": \"умереть\"\n                },\n                {\n                    \"a\": \"umrę\",\n                    \"q\": \"умру\"\n                },\n                {\n                    \"a\": \"umrzesz\",\n                    \"q\": \"умрешь\"\n                },\n                {\n                    \"a\": \"umrze\",\n                    \"q\": \"умрет\"\n                },\n                {\n                    \"a\": \"umrzemy\",\n                    \"q\": \"умрем\"\n                },\n                {\n                    \"a\": \"umrzecie\",\n                    \"q\": \"умрете\"\n                },\n                {\n                    \"a\": \"umrą\",\n                    \"q\": \"умрут\"\n                }\n            ]\n        },\n\n        {\n            \"id\": \"verbsII\",\n            \"name\": \"Глаголы II спряжения\",\n            \"description\": \"Некоторые глаголы II спряжения, в т. ч. с чередованием согласных. Инфинитив и 6 форм настоящего времени.\\n10 глаголов.\",\n            \"tags\": [\"глаголы\", \"грамматика\"],\n            \"testable\": true,\n            \"builtIn\": true,\n            \"content\": [\n                {\n                    \"a\": \"lubić\",\n                    \"q\": \"любить\"\n                },\n                {\n                    \"a\": \"lubię\",\n                    \"q\": \"люблю\",\n                    \"eg\": \"[[answer]] czytać księżki\"\n                },\n                {\n                    \"a\": \"lubisz\",\n                    \"q\": \"любишь\"\n                },\n                {\n                    \"a\": \"lubi\",\n                    \"q\": \"любит\"\n                },\n                {\n                    \"a\": \"lubimy\",\n                    \"q\": \"любим\"\n                },\n                {\n                    \"a\": \"lubicie\",\n                    \"q\": \"лю́бите\"\n                },\n                {\n                    \"a\": \"lubią\",\n                    \"q\": \"любят\"\n                },\n                {\n                    \"a\": \"mówić\",\n                    \"q\": \"говорить\"\n                },\n                {\n                    \"a\": \"mówię\",\n                    \"q\": \"говорю\",\n                    \"eg\": \"[[answer]] po rosyjsku.\"\n                },\n                {\n                    \"a\": \"mówisz\",\n                    \"q\": \"говоришь\",\n                    \"eg\": \"Czy [[answer]] po polsku?\"\n                },\n                {\n                    \"a\": \"mówi\",\n                    \"q\": \"говорит\",\n                    \"eg\": \"Czy pan [[answer]] po angielsku?\"\n                },\n                {\n                    \"a\": \"mówimy\",\n                    \"q\": \"говорим\"\n                },\n                {\n                    \"a\": \"mówicie\",\n                    \"q\": \"говорите\"\n                },\n                {\n                    \"a\": \"mówią\",\n                    \"q\": \"говорят\"\n                },\n                {\n                    \"a\": \"uczyć się\",\n                    \"q\": \"учиться\"\n                },\n                {\n                    \"a\": \"uczę się\",\n                    \"q\": \"учусь\"\n                },\n                {\n                    \"a\": \"uczysz się\",\n                    \"q\": \"учишься\"\n                },\n                {\n                    \"a\": \"uczy się\",\n                    \"q\": \"учится\"\n                },\n                {\n                    \"a\": \"uczymy się\",\n                    \"q\": \"учимся\"\n                },\n                {\n                    \"a\": \"uczycie się\",\n                    \"q\": \"у́читесь\"\n                },\n                {\n                    \"a\": \"uczą się\",\n                    \"q\": \"учатся\"\n                },\n                {\n                    \"a\": \"robić\",\n                    \"q\": \"делать\"\n                },\n                {\n                    \"a\": \"robię\",\n                    \"q\": \"делаю\"\n                },\n                {\n                    \"a\": \"robisz\",\n                    \"q\": \"делаешь\"\n                },\n                {\n                    \"a\": \"robi\",\n                    \"q\": \"делает\"\n                },\n                {\n                    \"a\": \"robimy\",\n                    \"q\": \"делаем\"\n                },\n                {\n                    \"a\": \"robicie\",\n                    \"q\": \"делаете\"\n                },\n                {\n                    \"a\": \"robią\",\n                    \"q\": \"делают\"\n                },\n                {\n                    \"a\": \"słyszeć\",\n                    \"q\": \"слышать\"\n                },\n                {\n                    \"a\": \"słyszę\",\n                    \"q\": \"слышу\"\n                },\n                {\n                    \"a\": \"słyszysz\",\n                    \"q\": \"слышишь\"\n                },\n                {\n                    \"a\": \"słyszy\",\n                    \"q\": \"слышит\"\n                },\n                {\n                    \"a\": \"słyszymy\",\n                    \"q\": \"слышим\"\n                },\n                {\n                    \"a\": \"słyszycie\",\n                    \"q\": \"слышите\"\n                },\n                {\n                    \"a\": \"słyszą\",\n                    \"q\": \"слышат\"\n                },\n                {\n                    \"a\": \"prosić\",\n                    \"q\": \"просить\"\n                },\n                {\n                    \"a\": \"proszę\",\n                    \"q\": \"прошу\"\n                },\n                {\n                    \"a\": \"prosisz\",\n                    \"q\": \"просишь\"\n                },\n                {\n                    \"a\": \"prosi\",\n                    \"q\": \"просит\"\n                },\n                {\n                    \"a\": \"prosimy\",\n                    \"q\": \"просим\"\n                },\n                {\n                    \"a\": \"prosicie\",\n                    \"q\": \"про́сите\"\n                },\n                {\n                    \"a\": \"proszą\",\n                    \"q\": \"просят\"\n                },\n                {\n                    \"a\": \"grozić\",\n                    \"q\": \"грозить\"\n                },\n                {\n                    \"a\": \"grożę\",\n                    \"q\": \"грожу\"\n                },\n                {\n                    \"a\": \"grozisz\",\n                    \"q\": \"грозишь\"\n                },\n                {\n                    \"a\": \"grozi\",\n                    \"q\": \"грозит\"\n                },\n                {\n                    \"a\": \"grozimy\",\n                    \"q\": \"грозим\"\n                },\n                {\n                    \"a\": \"grozicie\",\n                    \"q\": \"грозите\"\n                },\n                {\n                    \"a\": \"grożą\",\n                    \"q\": \"грозят\"\n                },\n                {\n                    \"a\": \"chodzić\",\n                    \"q\": \"ходить\"\n                },\n                {\n                    \"a\": \"chodzę\",\n                    \"q\": \"хожу\"\n                },\n                {\n                    \"a\": \"chodzisz\",\n                    \"q\": \"ходишь\"\n                },\n                {\n                    \"a\": \"chodzi\",\n                    \"q\": \"ходит\"\n                },\n                {\n                    \"a\": \"chodzimy\",\n                    \"q\": \"ходим\"\n                },\n                {\n                    \"a\": \"chodzicie\",\n                    \"q\": \"хо́дите\"\n                },\n                {\n                    \"a\": \"chodzą\",\n                    \"q\": \"ходят\"\n                },\n                {\n                    \"a\": \"widzieć\",\n                    \"q\": \"видеть\"\n                },\n                {\n                    \"a\": \"widzę\",\n                    \"q\": \"вижу\"\n                },\n                {\n                    \"a\": \"widzisz\",\n                    \"q\": \"видишь\"\n                },\n                {\n                    \"a\": \"widzi\",\n                    \"q\": \"видит\"\n                },\n                {\n                    \"a\": \"widzimy\",\n                    \"q\": \"видим\"\n                },\n                {\n                    \"a\": \"widzicie\",\n                    \"q\": \"видите\"\n                },\n                {\n                    \"a\": \"widzą\",\n                    \"q\": \"видят\"\n                },\n                {\n                    \"a\": \"burzyć\",\n                    \"q\": \"разрушать\"\n                },\n                {\n                    \"a\": \"burzę\",\n                    \"q\": \"разрушаю\"\n                },\n                {\n                    \"a\": \"burzysz\",\n                    \"q\": \"разрушаешь\"\n                },\n                {\n                    \"a\": \"burzy\",\n                    \"q\": \"разрушает\"\n                },\n                {\n                    \"a\": \"burzymy\",\n                    \"q\": \"разрушаем\"\n                },\n                {\n                    \"a\": \"burzycie\",\n                    \"q\": \"разрушаете\"\n                },\n                {\n                    \"a\": \"burzą\",\n                    \"q\": \"разрушают\"\n                },\n                {\n                    \"a\": \"tańczyć\",\n                    \"q\": \"танцевать\"\n                },\n                {\n                    \"a\": \"tańczę\",\n                    \"q\": \"танцую\"\n                },\n                {\n                    \"a\": \"tańczysz\",\n                    \"q\": \"танцуешь\"\n                },\n                {\n                    \"a\": \"tańczy\",\n                    \"q\": \"танцует\"\n                },\n                {\n                    \"a\": \"tańczymy\",\n                    \"q\": \"танцуем\"\n                },\n                {\n                    \"a\": \"tańczycie\",\n                    \"q\": \"танцуете\"\n                },\n                {\n                    \"a\": \"tańczą\",\n                    \"q\": \"танцуют\"\n                },\n                {\n                    \"a\": \"jeździć\",\n                    \"q\": \"ездить\"\n                },\n                {\n                    \"a\": \"jeżdżę\",\n                    \"q\": \"езжу\"\n                },\n                {\n                    \"a\": \"jeździsz\",\n                    \"q\": \"ездишь\"\n                },\n                {\n                    \"a\": \"jeździ\",\n                    \"q\": \"ездит\"\n                },\n                {\n                    \"a\": \"jeździmy\",\n                    \"q\": \"ездим\"\n                },\n                {\n                    \"a\": \"jeździcie\",\n                    \"q\": \"ездите\"\n                },\n                {\n                    \"a\": \"jeżdżą\",\n                    \"q\": \"ездят\"\n                }\n            ]\n        },\n\n        {\n            \"id\": \"verbsIII\",\n            \"name\": \"Глаголы III спряжения\",\n            \"description\": \"Некоторые глаголы III спряжения. Инфинитив и 6 форм настоящего времени.\\n11 глаголов.\",\n            \"tags\": [\"глаголы\", \"грамматика\"],\n            \"testable\": true,\n            \"builtIn\": true,\n            \"content\": [\n                {\n                    \"a\": \"mieć\",\n                    \"q\": \"иметь\"\n                },\n                {\n                    \"a\": \"mam\",\n                    \"q\": \"имею\",\n                    \"eg\": \"[[answer]] 21 lat.\"\n                },\n                {\n                    \"a\": \"masz\",\n                    \"q\": \"имеешь\",\n                    \"eg\": \"Jak się [[answer]]?\"\n                },\n                {\n                    \"a\": \"ma\",\n                    \"q\": \"имеет\"\n                },\n                {\n                    \"a\": \"mamy\",\n                    \"q\": \"имеем\"\n                },\n                {\n                    \"a\": \"macie\",\n                    \"q\": \"имеете\"\n                },\n                {\n                    \"a\": \"mają\",\n                    \"q\": \"имеют\"\n                },\n                {\n                    \"a\": \"nazywać cię\",\n                    \"q\": \"называться\"\n                },\n                {\n                    \"a\": \"nazywam się\",\n                    \"q\": \"называюсь\",\n                    \"eg\": \"[[answer]] Anna Novak\"\n                },\n                {\n                    \"a\": \"nazywasz się\",\n                    \"q\": \"называешься\"\n                },\n                {\n                    \"a\": \"nazywa się\",\n                    \"q\": \"называется\"\n                },\n                {\n                    \"a\": \"nazywamy się\",\n                    \"q\": \"называемся\"\n                },\n                {\n                    \"a\": \"nazywacie się\",\n                    \"q\": \"называетесь\"\n                },\n                {\n                    \"a\": \"nazywają się\",\n                    \"q\": \"называются\"\n                },\n                {\n                    \"a\": \"znać\",\n                    \"q\": \"знать\"\n                },\n                {\n                    \"a\": \"znam\",\n                    \"q\": \"знаю\"\n                },\n                {\n                    \"a\": \"znasz\",\n                    \"q\": \"знаешь\"\n                },\n                {\n                    \"a\": \"zna\",\n                    \"q\": \"знает\"\n                },\n                {\n                    \"a\": \"znamy\",\n                    \"q\": \"знаем\"\n                },\n                {\n                    \"a\": \"znacie\",\n                    \"q\": \"знаете\"\n                },\n                {\n                    \"a\": \"znają\",\n                    \"q\": \"знают\"\n                },\n                {\n                    \"a\": \"biegać\",\n                    \"q\": \"бегать\"\n                },\n                {\n                    \"a\": \"biegam\",\n                    \"q\": \"бегаю\"\n                },\n                {\n                    \"a\": \"biegasz\",\n                    \"q\": \"бегаешь\"\n                },\n                {\n                    \"a\": \"biega\",\n                    \"q\": \"бегает\"\n                },\n                {\n                    \"a\": \"biegamy\",\n                    \"q\": \"бегаем\"\n                },\n                {\n                    \"a\": \"biegacie\",\n                    \"q\": \"бегаете\"\n                },\n                {\n                    \"a\": \"biegają\",\n                    \"q\": \"бегают\"\n                },\n                {\n                    \"a\": \"grać\",\n                    \"q\": \"играть\",\n                    \"eg\": \"Lubię [[answer]] w tenisa.\"\n                },\n                {\n                    \"a\": \"gram\",\n                    \"q\": \"играю\"\n                },\n                {\n                    \"a\": \"grasz\",\n                    \"q\": \"играешь\"\n                },\n                {\n                    \"a\": \"gra\",\n                    \"q\": \"играет\"\n                },\n                {\n                    \"a\": \"gramy\",\n                    \"q\": \"играем\"\n                },\n                {\n                    \"a\": \"gracie\",\n                    \"q\": \"играете\"\n                },\n                {\n                    \"a\": \"grają\",\n                    \"q\": \"играют\"\n                },\n                {\n                    \"a\": \"czytać\",\n                    \"q\": \"читать\"\n                },\n                {\n                    \"a\": \"czytam\",\n                    \"q\": \"читаю\"\n                },\n                {\n                    \"a\": \"czytasz\",\n                    \"q\": \"читаешь\"\n                },\n                {\n                    \"a\": \"czyta\",\n                    \"q\": \"читает\"\n                },\n                {\n                    \"a\": \"czytamy\",\n                    \"q\": \"читаем\"\n                },\n                {\n                    \"a\": \"czytacie\",\n                    \"q\": \"читаете\"\n                },\n                {\n                    \"a\": \"czytają\",\n                    \"q\": \"читают\"\n                },\n                {\n                    \"a\": \"czekać\",\n                    \"q\": \"ждать\"\n                },\n                {\n                    \"a\": \"czekam\",\n                    \"q\": \"жду\",\n                    \"eg\": \"[[answer]] na ciebie\"\n                },\n                {\n                    \"a\": \"czekasz\",\n                    \"q\": \"ждешь\"\n                },\n                {\n                    \"a\": \"czeka\",\n                    \"q\": \"ждет\"\n                },\n                {\n                    \"a\": \"czekamy\",\n                    \"q\": \"ждем\"\n                },\n                {\n                    \"a\": \"czekacie\",\n                    \"q\": \"ждете\"\n                },\n                {\n                    \"a\": \"czekają\",\n                    \"q\": \"ждут\"\n                },\n                {\n                    \"a\": \"dać\",\n                    \"q\": \"дать\"\n                },\n                {\n                    \"a\": \"dam\",\n                    \"q\": \"даю\"\n                },\n                {\n                    \"a\": \"dasz\",\n                    \"q\": \"даешь\"\n                },\n                {\n                    \"a\": \"da\",\n                    \"q\": \"дает\"\n                },\n                {\n                    \"a\": \"damy\",\n                    \"q\": \"даем\"\n                },\n                {\n                    \"a\": \"dacie\",\n                    \"q\": \"даете\"\n                },\n                {\n                    \"a\": \"dadzą\",\n                    \"q\": \"дают\"\n                },\n                {\n                    \"a\": \"kochać\",\n                    \"q\": \"любить\"\n                },\n                {\n                    \"a\": \"kocham\",\n                    \"q\": \"люблю\"\n                },\n                {\n                    \"a\": \"kochasz\",\n                    \"q\": \"любишь\"\n                },\n                {\n                    \"a\": \"kocha\",\n                    \"q\": \"любит\",\n                    \"eg\": \"Anna [[answer]] Piotra.\"\n                },\n                {\n                    \"a\": \"kochamy\",\n                    \"q\": \"любим\"\n                },\n                {\n                    \"a\": \"kochacie\",\n                    \"q\": \"лю́бите\"\n                },\n                {\n                    \"a\": \"kochają\",\n                    \"q\": \"любят\"\n                },\n                {\n                    \"a\": \"pływać\",\n                    \"q\": \"плавать\"\n                },\n                {\n                    \"a\": \"pływam\",\n                    \"q\": \"плаваю\"\n                },\n                {\n                    \"a\": \"pływasz\",\n                    \"q\": \"плаваешь\"\n                },\n                {\n                    \"a\": \"pływa\",\n                    \"q\": \"плавает\"\n                },\n                {\n                    \"a\": \"pływamy\",\n                    \"q\": \"плаваем\"\n                },\n                {\n                    \"a\": \"pływacie\",\n                    \"q\": \"плаваете\"\n                },\n                {\n                    \"a\": \"pływają\",\n                    \"q\": \"плавают\"\n                },\n                {\n                    \"a\": \"żegnać się\",\n                    \"q\": \"прощаться\"\n                },\n                {\n                    \"a\": \"żegnam się\",\n                    \"q\": \"прощаюсь\"\n                },\n                {\n                    \"a\": \"żegnasz się\",\n                    \"q\": \"прощаешься\"\n                },\n                {\n                    \"a\": \"żegna się\",\n                    \"q\": \"прощается\"\n                },\n                {\n                    \"a\": \"żegnamy się\",\n                    \"q\": \"прощаемся\"\n                },\n                {\n                    \"a\": \"żegnacie się\",\n                    \"q\": \"прощаетесь\"\n                },\n                {\n                    \"a\": \"żegnają się\",\n                    \"q\": \"прощаются\"\n                }\n            ]\n        },\n\n        {\n            \"id\": \"verbsIV\",\n            \"name\": \"Глаголы IV спряжения\",\n            \"description\": \"Некоторые глаголы IV спряжения. Инфинитив и 6 форм настоящего времени.\\n5 глаголов.\",\n            \"tags\": [\"глаголы\", \"грамматика\"],\n            \"testable\": true,\n            \"builtIn\": true,\n            \"content\": [\n                {\n                    \"a\": \"jeść\",\n                    \"q\": \"есть\"\n                },\n                {\n                    \"a\": \"jem\",\n                    \"q\": \"ем\"\n                },\n                {\n                    \"a\": \"jesz\",\n                    \"q\": \"ешь\"\n                },\n                {\n                    \"a\": \"je\",\n                    \"q\": \"ест\"\n                },\n                {\n                    \"a\": \"jemy\",\n                    \"q\": \"едим\"\n                },\n                {\n                    \"a\": \"jecie\",\n                    \"q\": \"едите\"\n                },\n                {\n                    \"a\": \"jedzą\",\n                    \"q\": \"едят\"\n                },\n                {\n                    \"a\": \"wiedzieć\",\n                    \"q\": \"знать\"\n                },\n                {\n                    \"a\": \"wiem\",\n                    \"q\": \"знаю\"\n                },\n                {\n                    \"a\": \"wiesz\",\n                    \"q\": \"знаешь\"\n                },\n                {\n                    \"a\": \"wie\",\n                    \"q\": \"знает\"\n                },\n                {\n                    \"a\": \"wiemy\",\n                    \"q\": \"знаем\"\n                },\n                {\n                    \"a\": \"wiecie\",\n                    \"q\": \"знаете\"\n                },\n                {\n                    \"a\": \"wiedzą\",\n                    \"q\": \"знают\"\n                },\n                {\n                    \"a\": \"rozumieć\",\n                    \"q\": \"понимать\"\n                },\n                {\n                    \"a\": \"rozumiem\",\n                    \"q\": \"понимаю\"\n                },\n                {\n                    \"a\": \"rozumiesz\",\n                    \"q\": \"понимаешь\"\n                },\n                {\n                    \"a\": \"rozumie\",\n                    \"q\": \"понимает\"\n                },\n                {\n                    \"a\": \"rozumiemy\",\n                    \"q\": \"понимаем\"\n                },\n                {\n                    \"a\": \"rozumiecie\",\n                    \"q\": \"понимаете\"\n                },\n                {\n                    \"a\": \"rozumieją\",\n                    \"q\": \"понимают\"\n                },\n                {\n                    \"a\": \"śmieć\",\n                    \"q\": \"сметь\"\n                },\n                {\n                    \"a\": \"śmiem\",\n                    \"q\": \"смею\"\n                },\n                {\n                    \"a\": \"śmiesz\",\n                    \"q\": \"смеешь\"\n                },\n                {\n                    \"a\": \"śmie\",\n                    \"q\": \"смеет\"\n                },\n                {\n                    \"a\": \"śmiemy\",\n                    \"q\": \"смеем\"\n                },\n                {\n                    \"a\": \"śmiecie\",\n                    \"q\": \"смеете\"\n                },\n                {\n                    \"a\": \"śmieją\",\n                    \"q\": \"смеют\"\n                },\n                {\n                    \"a\": \"umieć\",\n                    \"q\": \"уметь\"\n                },\n                {\n                    \"a\": \"umiem\",\n                    \"q\": \"умею\"\n                },\n                {\n                    \"a\": \"umiesz\",\n                    \"q\": \"умеешь\"\n                },\n                {\n                    \"a\": \"umie\",\n                    \"q\": \"умеет\"\n                },\n                {\n                    \"a\": \"umiemy\",\n                    \"q\": \"умеем\"\n                },\n                {\n                    \"a\": \"umiecie\",\n                    \"q\": \"умеете\"\n                },\n                {\n                    \"a\": \"umieją\",\n                    \"q\": \"умеют\"\n                }\n            ]\n        },\n\n        {\n            \"id\": \"food1\",\n            \"name\": \"Пища\",\n            \"description\": \"Существительные и прилагательные, имеющие отношение к пище.\",\n            \"tags\": [\"существительные\", \"прилагательные\", \"словарный запас\"],\n            \"testable\": true,\n            \"builtIn\": true,\n            \"content\": [\n                {\n                    \"a\": \"pieczywo\",\n                    \"q\": \"хлебoбулочные изделия\"\n                },\n                {\n                    \"a\": \"chleb\",\n                    \"q\": \"хлеб\"\n                },\n                {\n                    \"a\": \"chleb razowy\",\n                    \"q\": \"ржаной хлеб\"\n                },\n                {\n                    \"a\": \"ciemne pieczywo\",\n                    \"q\": \"черный хлеб\"\n                },\n                {\n                    \"a\": \"biały chleb\",\n                    \"q\": \"белый хлеб\"\n                },\n                {\n                    \"a\": \"bułka\",\n                    \"q\": \"булка (сдоба)\"\n                },\n                {\n                    \"a\": \"bagietka\",\n                    \"q\": \"багет\"\n                },\n                {\n                    \"a\": \"sucharek\",\n                    \"q\": \"сухарь\"\n                },\n                {\n                    \"a\": \"obwarzanek\",\n                    \"q\": \"бублик, баранка\"\n                },\n                {\n                    \"a\": \"drożdżówki\",\n                    \"q\": \"сдобные булочки\"\n                },\n                {\n                    \"a\": \"mąka\",\n                    \"q\": \"манка\"\n                },\n                {\n                    \"a\": \"kasza gryczana\",\n                    \"q\": \"гречневая каша\"\n                },\n                {\n                    \"a\": \"kasza jaglana\",\n                    \"q\": \"пшенная каша\"\n                },\n                {\n                    \"a\": \"kasza manna\",\n                    \"q\": \"манная каша\"\n                },\n                {\n                    \"a\": \"ryż\",\n                    \"q\": \"рис\"\n                },\n                {\n                    \"a\": \"makaron\",\n                    \"q\": \"макароны, лапша\"\n                },\n                {\n                    \"a\": \"płatki\",\n                    \"q\": \"хлопья\"\n                },\n                {\n                    \"a\": \"wieprzowina\",\n                    \"q\": \"свинина\"\n                },\n                {\n                    \"a\": \"wołowina\",\n                    \"q\": \"говядина\"\n                },\n                {\n                    \"a\": \"cielęcina\",\n                    \"q\": \"телятина\"\n                },\n                {\n                    \"a\": \"baranina\",\n                    \"q\": \"баранина\"\n                },\n                {\n                    \"a\": \"schab\",\n                    \"q\": \"корейка\"\n                },\n                {\n                    \"a\": \"żeberka\",\n                    \"q\": \"ребрышки\"\n                },\n                {\n                    \"a\": \"udko kurczaka\",\n                    \"q\": \"куриная ножка\"\n                },\n                {\n                    \"a\": \"mielone\",\n                    \"q\": \"фарш\"\n                },\n                {\n                    \"a\": \"kurczak\",\n                    \"q\": \"цыпленок\"\n                },\n                {\n                    \"a\": \"kura\",\n                    \"q\": \"курица\"\n                },\n                {\n                    \"a\": \"kaczka\",\n                    \"q\": \"утка\"\n                },\n                {\n                    \"a\": \"gęś\",\n                    \"q\": \"гусь\"\n                },\n                {\n                    \"a\": \"indyk\",\n                    \"q\": \"индейка\"\n                },\n                {\n                    \"a\": \"kiełbasa\",\n                    \"q\": \"колбаса\"\n                },\n                {\n                    \"a\": \"parówka\",\n                    \"q\": \"сосиска\"\n                },\n                {\n                    \"a\": \"serdelek\",\n                    \"q\": \"сарделька\"\n                },\n                {\n                    \"a\": \"szynka\",\n                    \"q\": \"ветчина\"\n                },\n                {\n                    \"a\": \"polędwica\",\n                    \"q\": \"вырезка\"\n                },\n                {\n                    \"a\": \"boczek\",\n                    \"q\": \"грудинка\"\n                },\n                {\n                    \"a\": \"karp\",\n                    \"q\": \"карп\"\n                },\n                {\n                    \"a\": \"łosoś\",\n                    \"q\": \"лосось\"\n                },\n                {\n                    \"a\": \"dorsz\",\n                    \"q\": \"треска\"\n                },\n                {\n                    \"a\": \"pstrąg\",\n                    \"q\": \"форель\"\n                },\n                {\n                    \"a\": \"śledź\",\n                    \"q\": \"сельдь\"\n                },\n                {\n                    \"a\": \"tuńczyk\",\n                    \"q\": \"тунец\"\n                },\n                {\n                    \"a\": \"morska\",\n                    \"q\": \"морская\"\n                },\n                {\n                    \"a\": \"mrożona\",\n                    \"q\": \"мороженая\"\n                },\n                {\n                    \"a\": \"wędzona\",\n                    \"q\": \"копченая\"\n                },\n                {\n                    \"a\": \"paluszki rybne\",\n                    \"q\": \"рыбные палочки\"\n                },\n                {\n                    \"a\": \"krewetki\",\n                    \"q\": \"креветки\"\n                },\n                {\n                    \"a\": \"ostryga\",\n                    \"q\": \"устрица\"\n                },\n                {\n                    \"a\": \"filety rybne\",\n                    \"q\": \"рыбное филе\"\n                },\n                {\n                    \"a\": \"mleko\",\n                    \"q\": \"молоко\"\n                },\n                {\n                    \"a\": \"kefir\",\n                    \"q\": \"кефир\"\n                },\n                {\n                    \"a\": \"śmietana\",\n                    \"q\": \"сметана, сливки\"\n                },\n                {\n                    \"a\": \"jogurt\",\n                    \"q\": \"йогурт\"\n                }\n            ]\n        }\n    ],\n\n    \"ru-cs\": [\n        {\n            \"id\": \"swadesh\",\n            \"name\": \"«Список Сводеша»\",\n            \"description\": \"Колода составлена на основе <a href=\\\"http://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%A1%D0%B2%D0%BE%D0%B4%D0%B5%D1%88%D0%B0\\\">списка Сводеша</a>.\",\n            \"tags\": [\"словарный запас\"],\n            \"testable\": true,\n            \"builtIn\": true,\n            \"content\": [\n                {\n                    \"q\": \"я\",\n                    \"a\": \"já\"\n                },\n                {\n                    \"q\": \"ты\",\n                    \"a\": \"ty\"\n                },\n                {\n                    \"q\": \"он\",\n                    \"a\": \"on\"\n                },\n                {\n                    \"q\": \"мы\",\n                    \"a\": \"my\"\n                },\n                {\n                    \"q\": \"вы\",\n                    \"a\": \"vy\"\n                },\n                {\n                    \"q\": \"они (мужской род)\",\n                    \"a\": \"oni\"\n                },\n                {\n                    \"q\": \"они (женский род)\",\n                    \"a\": \"ony\"\n                },\n                {\n                    \"q\": \"они (средний род)\",\n                    \"a\": \"ona\"\n                },\n                {\n                    \"q\": \"этот \",\n                    \"a\": \"tento\"\n                },\n                {\n                    \"q\": \"эта \",\n                    \"a\": \"tato \"\n                },\n                {\n                    \"q\": \"это\",\n                    \"a\": \"toto\"\n                },\n                {\n                    \"q\": \"тот\",\n                    \"a\": \"tamten\"\n                },\n                {\n                    \"q\": \"та\",\n                    \"a\": \" tamta\"\n                },\n                {\n                    \"q\": \"то\",\n                    \"a\": \"tamto\"\n                },\n                {\n                    \"q\": \"здесь\",\n                    \"a\": \"zde\"\n                },\n                {\n                    \"q\": \"там\",\n                    \"a\": \"tam\"\n                },\n                {\n                    \"q\": \"кто\",\n                    \"a\": \"kdo\"\n                },\n                {\n                    \"q\": \"что\",\n                    \"a\": \"co\"\n                },\n                {\n                    \"q\": \"где\",\n                    \"a\": \"kde\"\n                },\n                {\n                    \"q\": \"когда\",\n                    \"a\": \"kdy\"\n                },\n                {\n                    \"q\": \"как\",\n                    \"a\": \"jak\"\n                },\n                {\n                    \"q\": \"не\",\n                    \"a\": \"ne\"\n                },\n                {\n                    \"q\": \"всё\",\n                    \"a\": \"všechno\"\n                },\n                {\n                    \"q\": \"много\",\n                    \"a\": \"mnoho\"\n                },\n                {\n                    \"q\": \"несколько\",\n                    \"a\": \"několik\"\n                },\n                {\n                    \"q\": \"немного\",\n                    \"a\": \"nemnoho\"\n                },\n                {\n                    \"q\": \"мало\",\n                    \"a\": \"málo\"\n                },\n                {\n                    \"q\": \"иной, другой\",\n                    \"a\": \"jiný\"\n                },\n                {\n                    \"q\": \"один\",\n                    \"a\": \"jeden\"\n                },\n                {\n                    \"q\": \"два\",\n                    \"a\": \"dva\"\n                },\n                {\n                    \"q\": \"три\",\n                    \"a\": \"tři\"\n                },\n                {\n                    \"q\": \"четыре\",\n                    \"a\": \"čtyři\"\n                },\n                {\n                    \"q\": \"пять\",\n                    \"a\": \"pět\"\n                },\n                {\n                    \"q\": \"большой, великий\",\n                    \"a\": \"velký\"\n                },\n                {\n                    \"q\": \"длинный, долгий\",\n                    \"a\": \"dlouhý\"\n                },\n                {\n                    \"q\": \"широкий\",\n                    \"a\": \"široký\"\n                },\n                {\n                    \"q\": \"толстый (о человеке)\",\n                    \"a\": \"tlustý\"\n                },\n                {\n                    \"q\": \"тяжёлый\",\n                    \"a\": \"těžký\"\n                },\n                {\n                    \"q\": \"маленький\",\n                    \"a\": \"malý\"\n                },\n                {\n                    \"q\": \"короткий\",\n                    \"a\": \"krátký\"\n                },\n                {\n                    \"q\": \"узкий\",\n                    \"a\": \"úzký\"\n                },\n                {\n                    \"q\": \"тонкий\",\n                    \"a\": \"tenký\"\n                },\n                {\n                    \"q\": \"женщина\",\n                    \"a\": \"žena\"\n                },\n                {\n                    \"q\": \"мужчина\",\n                    \"a\": \"muž\"\n                },\n                {\n                    \"q\": \"человек\",\n                    \"a\": \"člověk\"\n                },\n                {\n                    \"q\": \"ребёнок\",\n                    \"a\": \"dítě\"\n                },\n                {\n                    \"q\": \"жена\",\n                    \"a\": \"manželka\"\n                },\n                {\n                    \"q\": \"муж\",\n                    \"a\": \"manžel\"\n                },\n                {\n                    \"q\": \"мать\",\n                    \"a\": \"matka\"\n                },\n                {\n                    \"q\": \"отец\",\n                    \"a\": \"otec\"\n                },\n                {\n                    \"q\": \"зверь, животное\",\n                    \"a\": \"zvíře\"\n                },\n                {\n                    \"q\": \"рыба\",\n                    \"a\": \"ryba\"\n                },\n                {\n                    \"q\": \"птица\",\n                    \"a\": \"pták\"\n                },\n                {\n                    \"q\": \"собака, пёс\",\n                    \"a\": \"pes\"\n                },\n                {\n                    \"q\": \"вошь\",\n                    \"a\": \"veš\"\n                },\n                {\n                    \"q\": \"змея, гад\",\n                    \"a\": \"had\"\n                },\n                {\n                    \"q\": \"червь, червяк\",\n                    \"a\": \"červ\"\n                },\n                {\n                    \"q\": \"дерево\",\n                    \"a\": \"strom\"\n                },\n                {\n                    \"q\": \"лес\",\n                    \"a\": \"les\"\n                },\n                {\n                    \"q\": \"палка\",\n                    \"a\": \"hůl\"\n                },\n                {\n                    \"q\": \"плод\",\n                    \"a\": \"plod\"\n                },\n                {\n                    \"q\": \"семя, семена\",\n                    \"a\": \"semeno\"\n                },\n                {\n                    \"q\": \"лист\",\n                    \"a\": \"list\"\n                },\n                {\n                    \"q\": \"корень\",\n                    \"a\": \"kořen\"\n                },\n                {\n                    \"q\": \"кора\",\n                    \"a\": \"kůra\"\n                },\n                {\n                    \"q\": \"цветок\",\n                    \"a\": \"květ\"\n                },\n                {\n                    \"q\": \"трава\",\n                    \"a\": \"tráva\"\n                },\n                {\n                    \"q\": \"верёвка\",\n                    \"a\": \"lano\"\n                },\n                {\n                    \"q\": \"кожа\",\n                    \"a\": \"kůže\"\n                },\n                {\n                    \"q\": \"мясо\",\n                    \"a\": \"maso\"\n                },\n                {\n                    \"q\": \"кровь\",\n                    \"a\": \"krev\"\n                },\n                {\n                    \"q\": \"кость\",\n                    \"a\": \"kost\"\n                },\n                {\n                    \"q\": \"жир\",\n                    \"a\": \"tuk\"\n                },\n                {\n                    \"q\": \"яйцо\",\n                    \"a\": \"vejce\"\n                },\n                {\n                    \"q\": \"рог\",\n                    \"a\": \"roh\"\n                },\n                {\n                    \"q\": \"хвост\",\n                    \"a\": \"ocas \"\n                },\n                {\n                    \"q\": \"перо\",\n                    \"a\": \"pero\"\n                },\n                {\n                    \"q\": \"волосы\",\n                    \"a\": \"vlasy\"\n                },\n                {\n                    \"q\": \"голова\",\n                    \"a\": \"hlava\"\n                },\n                {\n                    \"q\": \"ухо\",\n                    \"a\": \"ucho\"\n                },\n                {\n                    \"q\": \"глаз, око\",\n                    \"a\": \"oko\"\n                },\n                {\n                    \"q\": \"нос\",\n                    \"a\": \"nos\"\n                },\n                {\n                    \"q\": \"рот\",\n                    \"a\": \"ústa\"\n                },\n                {\n                    \"q\": \"губа \",\n                    \"a\": \"pusa \"\n                },\n                {\n                    \"q\": \"зуб\",\n                    \"a\": \"zub\"\n                },\n                {\n                    \"q\": \"язык\",\n                    \"a\": \"jazyk\"\n                },\n                {\n                    \"q\": \"ноготь\",\n                    \"a\": \"nehet\"\n                },\n                {\n                    \"q\": \"стопа, ступня\",\n                    \"a\": \"chodidlo\"\n                },\n                {\n                    \"q\": \"нога\",\n                    \"a\": \"noha\"\n                },\n                {\n                    \"q\": \"колено\",\n                    \"a\": \"koleno\"\n                },\n                {\n                    \"q\": \"ладонь\",\n                    \"a\": \"dlaň\"\n                },\n                {\n                    \"q\": \"рука\",\n                    \"a\": \"ruka \"\n                },\n                {\n                    \"q\": \"крыло\",\n                    \"a\": \"křídlo\"\n                },\n                {\n                    \"q\": \"живот\",\n                    \"a\": \"břicho\"\n                },\n                {\n                    \"q\": \"внутренности\",\n                    \"a\": \"vnitřnosti\"\n                },\n                {\n                    \"q\": \"кишки\",\n                    \"a\": \"střevo\"\n                },\n                {\n                    \"q\": \"шея\",\n                    \"a\": \"krk\"\n                },\n                {\n                    \"q\": \"спина\",\n                    \"a\": \"záda\"\n                },\n                {\n                    \"q\": \"грудь (женская)\",\n                    \"a\": \"prsa\"\n                },\n                {\n                    \"q\": \"грудь (часть туловища)\",\n                    \"a\": \"hrudník\"\n                },\n                {\n                    \"q\": \"сердце\",\n                    \"a\": \"srdce\"\n                },\n                {\n                    \"q\": \"печень\",\n                    \"a\": \"játra\"\n                },\n                {\n                    \"q\": \"пить\",\n                    \"a\": \"pít\"\n                },\n                {\n                    \"q\": \"есть, кушать\",\n                    \"a\": \"jíst\"\n                },\n                {\n                    \"q\": \"грызть\",\n                    \"a\": \"hryzat\"\n                },\n                {\n                    \"q\": \"кусать\",\n                    \"a\": \"kousat\"\n                },\n                {\n                    \"q\": \"сосать\",\n                    \"a\": \"sát\"\n                },\n                {\n                    \"q\": \"плевать\",\n                    \"a\": \"plivat\"\n                },\n                {\n                    \"q\": \"рвать, блевать\",\n                    \"a\": \"zvracet, blít\"\n                },\n                {\n                    \"q\": \"дуть\",\n                    \"a\": \"foukat\"\n                },\n                {\n                    \"q\": \"дышать\",\n                    \"a\": \"dýchat\"\n                },\n                {\n                    \"q\": \"смеяться\",\n                    \"a\": \"smát se\"\n                },\n                {\n                    \"q\": \"видеть\",\n                    \"a\": \"vidět\"\n                },\n                {\n                    \"q\": \"слышать\",\n                    \"a\": \"slyšet\"\n                },\n                {\n                    \"q\": \"знать\",\n                    \"a\": \"znát\"\n                },\n                {\n                    \"q\": \"думать\",\n                    \"a\": \"myslet\"\n                },\n                {\n                    \"q\": \"нюхать\",\n                    \"a\": \"čichat\"\n                },\n                {\n                    \"q\": \"бояться\",\n                    \"a\": \"bát se\"\n                },\n                {\n                    \"q\": \"спать\",\n                    \"a\": \"spát\"\n                },\n                {\n                    \"q\": \"жить\",\n                    \"a\": \"žít\"\n                },\n                {\n                    \"q\": \"умирать; умереть\",\n                    \"a\": \"umírat\"\n                },\n                {\n                    \"q\": \"убивать\",\n                    \"a\": \"zabít\"\n                },\n                {\n                    \"q\": \"бороться\",\n                    \"a\": \"bojovat\"\n                },\n                {\n                    \"q\": \"охотиться\",\n                    \"a\": \"lovit\"\n                },\n                {\n                    \"q\": \"ударить\",\n                    \"a\": \"udeřit\"\n                },\n                {\n                    \"q\": \"резать\",\n                    \"a\": \"řezat\"\n                },\n                {\n                    \"q\": \"разделить\",\n                    \"a\": \"rozdělit\"\n                },\n                {\n                    \"q\": \"кольнуть\",\n                    \"a\": \"bodnout\"\n                },\n                {\n                    \"q\": \"царапать\",\n                    \"a\": \"škrábat\"\n                },\n                {\n                    \"q\": \"копать, рыть\",\n                    \"a\": \"kopat\"\n                },\n                {\n                    \"q\": \"плавать\",\n                    \"a\": \"plavat\"\n                },\n                {\n                    \"q\": \"летать\",\n                    \"a\": \"letět\"\n                },\n                {\n                    \"q\": \"идти\",\n                    \"a\": \"jít\"\n                },\n                {\n                    \"q\": \"ходить\",\n                    \"a\": \"chodit\"\n                },\n                {\n                    \"q\": \"приходить, прийти\",\n                    \"a\": \"přijít\"\n                },\n                {\n                    \"q\": \"лежать\",\n                    \"a\": \"ležet\"\n                },\n                {\n                    \"q\": \"сидеть\",\n                    \"a\": \"sedět\"\n                },\n                {\n                    \"q\": \"стоять\",\n                    \"a\": \"stát\"\n                },\n                {\n                    \"q\": \"вращать, вертеть\",\n                    \"a\": \"obrátit\"\n                },\n                {\n                    \"q\": \"падать\",\n                    \"a\": \"padat\"\n                },\n                {\n                    \"q\": \"давать\",\n                    \"a\": \"dát\"\n                },\n                {\n                    \"q\": \"держать\",\n                    \"a\": \"držet\"\n                },\n                {\n                    \"q\": \"сжимать\",\n                    \"a\": \" stisknout\"\n                },\n                {\n                    \"q\": \"тереть\",\n                    \"a\": \"třít\"\n                },\n                {\n                    \"q\": \"мыть\",\n                    \"a\": \"mýt\"\n                },\n                {\n                    \"q\": \"умывать\",\n                    \"a\": \"umývat\"\n                },\n                {\n                    \"q\": \"вытирать\",\n                    \"a\": \"utírat\"\n                },\n                {\n                    \"q\": \"тянуть\",\n                    \"a\": \"tahat\"\n                },\n                {\n                    \"q\": \"толкать, пихать\",\n                    \"a\": \"tlačit\"\n                },\n                {\n                    \"q\": \"бросать, кидать\",\n                    \"a\": \"házet\"\n                },\n                {\n                    \"q\": \"вязать, связывать\",\n                    \"a\": \"vázat\"\n                },\n                {\n                    \"q\": \"шить\",\n                    \"a\": \"šít\"\n                },\n                {\n                    \"q\": \"считать\",\n                    \"a\": \"počítat\"\n                },\n                {\n                    \"q\": \"говорить\",\n                    \"a\": \"mluvit\"\n                },\n                {\n                    \"q\": \"сказать\",\n                    \"a\": \"říkat\"\n                },\n                {\n                    \"q\": \"петь\",\n                    \"a\": \"zpívat\"\n                },\n                {\n                    \"q\": \"играть\",\n                    \"a\": \"hrát\"\n                },\n                {\n                    \"q\": \"плыть\",\n                    \"a\": \"plout\"\n                },\n                {\n                    \"q\": \"течь\",\n                    \"a\": \"téci\"\n                },\n                {\n                    \"q\": \"мерзнуть\",\n                    \"a\": \"mrznout\"\n                },\n                {\n                    \"q\": \"пухнуть\",\n                    \"a\": \"otékat\"\n                },\n                {\n                    \"q\": \"солнце\",\n                    \"a\": \"slunce\"\n                },\n                {\n                    \"q\": \"луна\",\n                    \"a\": \"luna\"\n                },\n                {\n                    \"q\": \"месяц\",\n                    \"a\": \"měsíc\"\n                },\n                {\n                    \"q\": \"звезда\",\n                    \"a\": \"hvězda\"\n                },\n                {\n                    \"q\": \"вода\",\n                    \"a\": \"voda\"\n                },\n                {\n                    \"q\": \"дождь\",\n                    \"a\": \"déšť\"\n                },\n                {\n                    \"q\": \"река\",\n                    \"a\": \"řeka\"\n                },\n                {\n                    \"q\": \"озеро\",\n                    \"a\": \"jezero\"\n                },\n                {\n                    \"q\": \"море\",\n                    \"a\": \"moře\"\n                },\n                {\n                    \"q\": \"соль\",\n                    \"a\": \"sůl\"\n                },\n                {\n                    \"q\": \"камень\",\n                    \"a\": \"kámen\"\n                },\n                {\n                    \"q\": \"песок\",\n                    \"a\": \"písek\"\n                },\n                {\n                    \"q\": \"пыль\",\n                    \"a\": \"prach\"\n                },\n                {\n                    \"q\": \"земля\",\n                    \"a\": \"země\"\n                },\n                {\n                    \"q\": \"туча\",\n                    \"a\": \"mrak\"\n                },\n                {\n                    \"q\": \"облако\",\n                    \"a\": \"oblak\"\n                },\n                {\n                    \"q\": \"туман\",\n                    \"a\": \"mlha\"\n                },\n                {\n                    \"q\": \"небо\",\n                    \"a\": \"nebe\"\n                },\n                {\n                    \"q\": \"ветер\",\n                    \"a\": \"vítr\"\n                },\n                {\n                    \"q\": \"снег\",\n                    \"a\": \"sníh\"\n                },\n                {\n                    \"q\": \"лёд\",\n                    \"a\": \"led\"\n                },\n                {\n                    \"q\": \"дым\",\n                    \"a\": \"dým\"\n                },\n                {\n                    \"q\": \"огонь\",\n                    \"a\": \"oheň\"\n                },\n                {\n                    \"q\": \"зола, пепел\",\n                    \"a\": \"popel\"\n                },\n                {\n                    \"q\": \"жечь\",\n                    \"a\": \"hořet\"\n                },\n                {\n                    \"q\": \"путь\",\n                    \"a\": \"cesta\"\n                },\n                {\n                    \"q\": \"гора\",\n                    \"a\": \"hora\"\n                },\n                {\n                    \"q\": \"красный\",\n                    \"a\": \"červený\"\n                },\n                {\n                    \"q\": \"зелёный\",\n                    \"a\": \"zelený\"\n                },\n                {\n                    \"q\": \"жёлтый\",\n                    \"a\": \"žlutý\"\n                },\n                {\n                    \"q\": \"белый\",\n                    \"a\": \"bílý\"\n                },\n                {\n                    \"q\": \"чёрный\",\n                    \"a\": \"černý\"\n                },\n                {\n                    \"q\": \"ночь\",\n                    \"a\": \"noc\"\n                },\n                {\n                    \"q\": \"день\",\n                    \"a\": \"den\"\n                },\n                {\n                    \"q\": \"год\",\n                    \"a\": \"rok\"\n                },\n                {\n                    \"q\": \"тёплый\",\n                    \"a\": \"teplý\"\n                },\n                {\n                    \"q\": \"холодный\",\n                    \"a\": \"chladný\"\n                },\n                {\n                    \"q\": \"полный\",\n                    \"a\": \"plný\"\n                },\n                {\n                    \"q\": \"новый\",\n                    \"a\": \"nový\"\n                },\n                {\n                    \"q\": \"старый\",\n                    \"a\": \"starý\"\n                },\n                {\n                    \"q\": \"хороший\",\n                    \"a\": \"dobrý\"\n                },\n                {\n                    \"q\": \"злой\",\n                    \"a\": \"zlý\"\n                },\n                {\n                    \"q\": \"плохой\",\n                    \"a\": \"špatný\"\n                },\n                {\n                    \"q\": \"гнилой\",\n                    \"a\": \"shnilý\"\n                },\n                {\n                    \"q\": \"грязный\",\n                    \"a\": \"špinavý\"\n                },\n                {\n                    \"q\": \"прямой\",\n                    \"a\": \"přímý\"\n                },\n                {\n                    \"q\": \"круглый\",\n                    \"a\": \"kulatý\"\n                },\n                {\n                    \"q\": \"острый\",\n                    \"a\": \"ostrý\"\n                },\n                {\n                    \"q\": \"тупой\",\n                    \"a\": \"tupý\"\n                },\n                {\n                    \"q\": \"гладкий, ровный\",\n                    \"a\": \"hladký\"\n                },\n                {\n                    \"q\": \"мокрый\",\n                    \"a\": \"mokrý\"\n                },\n                {\n                    \"q\": \"сухой\",\n                    \"a\": \"suchý\"\n                },\n                {\n                    \"q\": \"правильный\",\n                    \"a\": \"správný\"\n                },\n                {\n                    \"q\": \"близкий\",\n                    \"a\": \"blízký\"\n                },\n                {\n                    \"q\": \"далёкий, дальний\",\n                    \"a\": \"daleký\"\n                },\n                {\n                    \"q\": \"правый\",\n                    \"a\": \"pravý\"\n                },\n                {\n                    \"q\": \"левый\",\n                    \"a\": \"levý\"\n                },\n                {\n                    \"q\": \"при\",\n                    \"a\": \"při\"\n                },\n                {\n                    \"q\": \"у\",\n                    \"a\": \"u\"\n                },\n                {\n                    \"q\": \"возле\",\n                    \"a\": \"vedle\"\n                },\n                {\n                    \"q\": \"в\",\n                    \"a\": \"v\"\n                },\n                {\n                    \"q\": \"с, со\",\n                    \"a\": \"s\"\n                },\n                {\n                    \"q\": \"и\",\n                    \"a\": \"a\"\n                },\n                {\n                    \"q\": \"если\",\n                    \"a\": \"jestli\"\n                },\n                {\n                    \"q\": \"потому что\",\n                    \"a\": \"protože\"\n                },\n                {\n                    \"q\": \"имя\",\n                    \"a\": \"jméno\"\n                }\n            ]\n        }\n    ]\n});","\ndefine(\n    'app',[\n        'Chitin',\n        'Decks',\n        'Preferences',\n        'Widget/Root',\n        'locale/locale',\n        'PredefinedDecks'\n    ],\n\n    function (Chitin, Decks, Preferences, WidgetRoot, locale, PredefinedDecks) {\n        'use strict';\n\n        var OmniCard = Chitin.Application.extend({\n            defaults: {\n                immediateStart: false,\n                rootNode: '.js-root',\n                rootWidget: WidgetRoot\n            },\n\n            initialize: function (options) {\n                OmniCard.__super__.initialize.call(this, options);\n\n                this.prefs = new this.params.prefs;\n                this.pair = this.prefs.getPair();\n\n                this._getLang();\n                this.locale = locale[this.lang] || locale.en;\n\n                if (this.pair) {\n                    this.prepareDecks(PredefinedDecks[this.pair]);\n                }\n\n                this.on('languagesChosen', this.onLang);\n\n                this.start();\n            },\n\n            prepareDecks: function (decks) {\n                var key = 'deck' + '.' + this.pair;\n\n                this.decks = new this.params.deckClass({\n                    key: key,\n                    attrs: decks\n                });\n            },\n\n            onLang: function (data) {\n                this.pair = data.native + '-' + data.learn;\n\n                this.prefs.setPair(data);\n                this.prefs.set({'interface': data.interface});\n                this.lang = data.interface;\n                this.locale = locale[this.lang];\n\n                this.pair = this.prefs.getPair();\n\n                this.prepareDecks(PredefinedDecks[this.pair]);\n\n                this.trigger('startWork');\n            },\n\n            reset: function () {\n                this.prefs.reset({silent: true});\n                this.decks.reset({silent: true});\n\n                window.location.reload();\n            },\n\n            createDeck: function () {\n                return this.params.deckClass.createDeck()\n            },\n\n            _getLang: function () {\n                var lang = this.prefs.get('interface') || window.navigator.userLanguage || window.navigator.language;\n\n                if (lang.indexOf('-') > -1) {\n                    lang = lang.split('-')[0]\n                }\n\n                this.lang = lang || 'en';\n            },\n\n            hideDeck: function (deckId) {\n                this.prefs.hideDeck(deckId);\n            },\n            unhideDeck: function (deckId) {\n                this.prefs.unhideDeck(deckId);\n            }\n        });\n\n        // start the engine\n        $(function () {\n            window.app = new OmniCard({\n                deckClass: Decks,\n                prefs: Preferences\n            });\n        });\n    }\n);"]}