
(function(o){"function"==typeof define?define('lib/vendor/es5-shim',o):"function"==typeof YUI?YUI.add("es5",o):o()})(function(){function o(){}function v(a){a=+a;a!==a?a=0:0!==a&&(a!==1/0&&a!==-(1/0))&&(a=(0<a||-1)*Math.floor(Math.abs(a)));return a}function s(a){var b=typeof a;return null===a||"undefined"===b||"boolean"===b||"number"===b||"string"===b}Function.prototype.bind||(Function.prototype.bind=function(a){var b=this;if("function"!=typeof b)throw new TypeError("Function.prototype.bind called on incompatible "+b);
var d=q.call(arguments,1),c=function(){if(this instanceof c){var e=b.apply(this,d.concat(q.call(arguments)));return Object(e)===e?e:this}return b.apply(a,d.concat(q.call(arguments)))};b.prototype&&(o.prototype=b.prototype,c.prototype=new o,o.prototype=null);return c});var k=Function.prototype.call,p=Object.prototype,q=Array.prototype.slice,h=k.bind(p.toString),t=k.bind(p.hasOwnProperty);t(p,"__defineGetter__")&&(k.bind(p.__defineGetter__),k.bind(p.__defineSetter__),k.bind(p.__lookupGetter__),k.bind(p.__lookupSetter__));
if(2!=[1,2].splice(0).length){var y=Array.prototype.splice;Array.prototype.splice=function(a,b){return arguments.length?y.apply(this,[a===void 0?0:a,b===void 0?this.length-a:b].concat(q.call(arguments,2))):[]}}if(1!=[].unshift(0)){var z=Array.prototype.unshift;Array.prototype.unshift=function(){z.apply(this,arguments);return this.length}}Array.isArray||(Array.isArray=function(a){return h(a)=="[object Array]"});var k=Object("a"),l="a"!=k[0]||!(0 in k);Array.prototype.forEach||(Array.prototype.forEach=
function(a,b){var d=n(this),c=l&&h(this)=="[object String]"?this.split(""):d,e=-1,f=c.length>>>0;if(h(a)!="[object Function]")throw new TypeError;for(;++e<f;)e in c&&a.call(b,c[e],e,d)});Array.prototype.map||(Array.prototype.map=function(a,b){var d=n(this),c=l&&h(this)=="[object String]"?this.split(""):d,e=c.length>>>0,f=Array(e);if(h(a)!="[object Function]")throw new TypeError(a+" is not a function");for(var g=0;g<e;g++)g in c&&(f[g]=a.call(b,c[g],g,d));return f});Array.prototype.filter||(Array.prototype.filter=
function(a,b){var d=n(this),c=l&&h(this)=="[object String]"?this.split(""):d,e=c.length>>>0,f=[],g;if(h(a)!="[object Function]")throw new TypeError(a+" is not a function");for(var i=0;i<e;i++)if(i in c){g=c[i];a.call(b,g,i,d)&&f.push(g)}return f});Array.prototype.every||(Array.prototype.every=function(a,b){var d=n(this),c=l&&h(this)=="[object String]"?this.split(""):d,e=c.length>>>0;if(h(a)!="[object Function]")throw new TypeError(a+" is not a function");for(var f=0;f<e;f++)if(f in c&&!a.call(b,c[f],
f,d))return false;return true});Array.prototype.some||(Array.prototype.some=function(a,b){var d=n(this),c=l&&h(this)=="[object String]"?this.split(""):d,e=c.length>>>0;if(h(a)!="[object Function]")throw new TypeError(a+" is not a function");for(var f=0;f<e;f++)if(f in c&&a.call(b,c[f],f,d))return true;return false});Array.prototype.reduce||(Array.prototype.reduce=function(a){var b=n(this),d=l&&h(this)=="[object String]"?this.split(""):b,c=d.length>>>0;if(h(a)!="[object Function]")throw new TypeError(a+
" is not a function");if(!c&&arguments.length==1)throw new TypeError("reduce of empty array with no initial value");var e=0,f;if(arguments.length>=2)f=arguments[1];else{do{if(e in d){f=d[e++];break}if(++e>=c)throw new TypeError("reduce of empty array with no initial value");}while(1)}for(;e<c;e++)e in d&&(f=a.call(void 0,f,d[e],e,b));return f});Array.prototype.reduceRight||(Array.prototype.reduceRight=function(a){var b=n(this),d=l&&h(this)=="[object String]"?this.split(""):b,c=d.length>>>0;if(h(a)!=
"[object Function]")throw new TypeError(a+" is not a function");if(!c&&arguments.length==1)throw new TypeError("reduceRight of empty array with no initial value");var e,c=c-1;if(arguments.length>=2)e=arguments[1];else{do{if(c in d){e=d[c--];break}if(--c<0)throw new TypeError("reduceRight of empty array with no initial value");}while(1)}do c in this&&(e=a.call(void 0,e,d[c],c,b));while(c--);return e});if(!Array.prototype.indexOf||-1!=[0,1].indexOf(1,2))Array.prototype.indexOf=function(a){var b=l&&
h(this)=="[object String]"?this.split(""):n(this),d=b.length>>>0;if(!d)return-1;var c=0;arguments.length>1&&(c=v(arguments[1]));for(c=c>=0?c:Math.max(0,d+c);c<d;c++)if(c in b&&b[c]===a)return c;return-1};if(!Array.prototype.lastIndexOf||-1!=[0,1].lastIndexOf(0,-3))Array.prototype.lastIndexOf=function(a){var b=l&&h(this)=="[object String]"?this.split(""):n(this),d=b.length>>>0;if(!d)return-1;var c=d-1;arguments.length>1&&(c=Math.min(c,v(arguments[1])));for(c=c>=0?c:d-Math.abs(c);c>=0;c--)if(c in b&&
a===b[c])return c;return-1};if(!Object.keys){var w=!0,x="toString toLocaleString valueOf hasOwnProperty isPrototypeOf propertyIsEnumerable constructor".split(" "),A=x.length,r;for(r in{toString:null})w=!1;Object.keys=function(a){if(typeof a!="object"&&typeof a!="function"||a===null)throw new TypeError("Object.keys called on a non-object");var b=[],d;for(d in a)t(a,d)&&b.push(d);if(w)for(d=0;d<A;d++){var c=x[d];t(a,c)&&b.push(c)}return b}}if(!Date.prototype.toISOString||-1===(new Date(-621987552E5)).toISOString().indexOf("-000001"))Date.prototype.toISOString=
function(){var a,b,d,c;if(!isFinite(this))throw new RangeError("Date.prototype.toISOString called on non-finite value.");c=this.getUTCFullYear();a=this.getUTCMonth();c=c+Math.floor(a/12);a=[(a%12+12)%12+1,this.getUTCDate(),this.getUTCHours(),this.getUTCMinutes(),this.getUTCSeconds()];c=(c<0?"-":c>9999?"+":"")+("00000"+Math.abs(c)).slice(0<=c&&c<=9999?-4:-6);for(b=a.length;b--;){d=a[b];d<10&&(a[b]="0"+d)}return c+"-"+a.slice(0,2).join("-")+"T"+a.slice(2).join(":")+"."+("000"+this.getUTCMilliseconds()).slice(-3)+
"Z"};r=!1;try{r=Date.prototype.toJSON&&null===(new Date(NaN)).toJSON()&&-1!==(new Date(-621987552E5)).toJSON().indexOf("-000001")&&Date.prototype.toJSON.call({toISOString:function(){return true}})}catch(H){}r||(Date.prototype.toJSON=function(){var a=Object(this),b;a:if(s(a))b=a;else{b=a.valueOf;if(typeof b==="function"){b=b.call(a);if(s(b))break a}b=a.toString;if(typeof b==="function"){b=b.call(a);if(s(b))break a}throw new TypeError;}if(typeof b==="number"&&!isFinite(b))return null;b=a.toISOString;
if(typeof b!="function")throw new TypeError("toISOString property is not callable");return b.call(a)});var g=Date,m=function(a,b,d,c,e,f,h){var i=arguments.length;if(this instanceof g){i=i==1&&String(a)===a?new g(m.parse(a)):i>=7?new g(a,b,d,c,e,f,h):i>=6?new g(a,b,d,c,e,f):i>=5?new g(a,b,d,c,e):i>=4?new g(a,b,d,c):i>=3?new g(a,b,d):i>=2?new g(a,b):i>=1?new g(a):new g;i.constructor=m;return i}return g.apply(this,arguments)},u=function(a,b){var d=b>1?1:0;return B[b]+Math.floor((a-1969+d)/4)-Math.floor((a-
1901+d)/100)+Math.floor((a-1601+d)/400)+365*(a-1970)},C=RegExp("^(\\d{4}|[+-]\\d{6})(?:-(\\d{2})(?:-(\\d{2})(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(Z|(?:([-+])(\\d{2}):(\\d{2})))?)?)?)?$"),B=[0,31,59,90,120,151,181,212,243,273,304,334,365],j;for(j in g)m[j]=g[j];m.now=g.now;m.UTC=g.UTC;m.prototype=g.prototype;m.prototype.constructor=m;m.parse=function(a){var b=C.exec(a);if(b){var d=Number(b[1]),c=Number(b[2]||1)-1,e=Number(b[3]||1)-1,f=Number(b[4]||0),h=Number(b[5]||0),i=Number(b[6]||
0),j=Number(b[7]||0),m=!b[4]||b[8]?0:Number(new g(1970,0)),k=b[9]==="-"?1:-1,l=Number(b[10]||0),b=Number(b[11]||0);if(f<(h>0||i>0||j>0?24:25)&&h<60&&i<60&&j<1E3&&c>-1&&c<12&&l<24&&b<60&&e>-1&&e<u(d,c+1)-u(d,c)){d=((u(d,c)+e)*24+f+l*k)*60;d=((d+h+b*k)*60+i)*1E3+j+m;if(-864E13<=d&&d<=864E13)return d}return NaN}return g.parse.apply(this,arguments)};Date=m;Date.now||(Date.now=function(){return(new Date).getTime()});if("0".split(void 0,0).length){var D=String.prototype.split;String.prototype.split=function(a,
b){return a===void 0&&b===0?[]:D.apply(this,arguments)}}if("".substr&&"b"!=="0b".substr(-1)){var E=String.prototype.substr;String.prototype.substr=function(a,b){return E.call(this,a<0?(a=this.length+a)<0?0:a:a,b)}}j="\t\n\x0B\f\r \u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029\ufeff";if(!String.prototype.trim||j.trim()){j="["+j+"]";var F=RegExp("^"+j+j+"*"),G=RegExp(j+j+"*$");String.prototype.trim=function(){if(this===void 0||this===
null)throw new TypeError("can't convert "+this+" to object");return String(this).replace(F,"").replace(G,"")}}var n=function(a){if(a==null)throw new TypeError("can't convert "+a+" to object");return Object(a)}});
/**
 * @license
 * Lo-Dash 1.2.0 (Custom Build) lodash.com/license
 * Build: `lodash -o ./dist/lodash.compat.js`
 * Underscore.js 1.4.4 underscorejs.org/LICENSE
 */
;(function(n){function t(r){function a(n){return n&&typeof n=="object"&&!Z(n)&&Qt.call(n,"__wrapped__")?n:new U(n)}function F(n){var t=n.length,e=t>=l;if(e)for(var r={},u=-1;++u<t;){var a=f+n[u];(r[a]||(r[a]=[])).push(n[u])}return function(t){if(e){var u=f+t;return r[u]&&-1<_t(r[u],t)}return-1<_t(n,t)}}function R(n){return n.charCodeAt(0)}function T(n,t){var e=n.b,r=t.b;if(n=n.a,t=t.a,n!==t){if(n>t||typeof n=="undefined")return 1;if(n<t||typeof t=="undefined")return-1}return e<r?-1:1}function D(n,t,e,r){function u(){var r=arguments,l=o?this:t;
return a||(n=t[i]),e.length&&(r=r.length?(r=le.call(r),f?r.concat(e):e.concat(r)):e),this instanceof u?(V.prototype=n.prototype,l=new V,V.prototype=null,r=n.apply(l,r),et(r)?r:l):n.apply(l,r)}var a=tt(n),o=!e,i=t;if(o){var f=r;e=t}else if(!a){if(!r)throw new Dt;t=n}return u}function z(){for(var n,t={g:C,b:"k(m)",c:"",e:"m",f:"",h:"",i:!0,j:!!de},e=0;n=arguments[e];e++)for(var r in n)t[r]=n[r];if(n=t.a,t.d=/^[^,]+/.exec(n)[0],e=$t,r="var i,m="+t.d+",u="+t.e+";if(!m)return u;"+t.h+";",t.b?(r+="var n=m.length;i=-1;if("+t.b+"){",ve.unindexedChars&&(r+="if(l(m)){m=m.split('')}"),r+="while(++i<n){"+t.f+"}}else{"):ve.nonEnumArgs&&(r+="var n=m.length;i=-1;if(n&&j(m)){while(++i<n){i+='';"+t.f+"}}else{"),ve.enumPrototypes&&(r+="var v=typeof m=='function';"),t.i&&t.j)r+="var s=-1,t=r[typeof m]?o(m):[],n=t.length;while(++s<n){i=t[s];",ve.enumPrototypes&&(r+="if(!(v&&i=='prototype')){"),r+=t.f,ve.enumPrototypes&&(r+="}"),r+="}";
else if(r+="for(i in m){",(ve.enumPrototypes||t.i)&&(r+="if(",ve.enumPrototypes&&(r+="!(v&&i=='prototype')"),ve.enumPrototypes&&t.i&&(r+="&&"),t.i&&(r+="h.call(m,i)"),r+="){"),r+=t.f+";",(ve.enumPrototypes||t.i)&&(r+="}"),r+="}",ve.nonEnumShadows){r+="var f=m.constructor;";for(var u=0;7>u;u++)r+="i='"+t.g[u]+"';if(","constructor"==t.g[u]&&(r+="!(f&&f.prototype===m)&&"),r+="h.call(m,i)){"+t.f+"}"}return(t.b||ve.nonEnumArgs)&&(r+="}"),r+=t.c+";return u",e("h,j,k,l,o,p,r","return function("+n+"){"+r+"}")(Qt,Q,Z,ut,de,a,$)
}function L(n){return"\\"+q[n]}function K(n){return _e[n]}function M(n){return typeof n.toString!="function"&&typeof(n+"")=="string"}function U(n){this.__wrapped__=n}function V(){}function G(n){var t=!1;if(!n||Zt.call(n)!=A||!ve.argsClass&&Q(n))return t;var e=n.constructor;return(tt(e)?e instanceof e:ve.nodeClass||!M(n))?ve.ownLast?(ke(n,function(n,e,r){return t=Qt.call(r,e),!1}),!0===t):(ke(n,function(n,e){t=e}),!1===t||Qt.call(n,t)):t}function H(n,t,e){t||(t=0),typeof e=="undefined"&&(e=n?n.length:0);
var r=-1;e=e-t||0;for(var u=It(0>e?0:e);++r<e;)u[r]=n[t+r];return u}function J(n){return we[n]}function Q(n){return Zt.call(n)==j}function W(n,t,r,u,o,i){var f=n;if(typeof t=="function"&&(u=r,r=t,t=!1),typeof r=="function"){if(r=typeof u=="undefined"?r:a.createCallback(r,u,1),f=r(f),typeof f!="undefined")return f;f=n}if(u=et(f)){var l=Zt.call(f);if(!N[l]||!ve.nodeClass&&M(f))return f;var c=Z(f)}if(!u||!t)return u?c?H(f):Ce({},f):f;switch(u=se[l],l){case x:case O:return new u(+f);case S:case P:return new u(f);
case I:return u(f.source,h.exec(f))}for(o||(o=[]),i||(i=[]),l=o.length;l--;)if(o[l]==n)return i[l];return f=c?u(f.length):{},c&&(Qt.call(n,"index")&&(f.index=n.index),Qt.call(n,"input")&&(f.input=n.input)),o.push(n),i.push(f),(c?pt:xe)(n,function(n,u){f[u]=W(n,t,r,e,o,i)}),f}function X(n){var t=[];return ke(n,function(n,e){tt(n)&&t.push(e)}),t.sort()}function Y(n){for(var t=-1,e=de(n),r=e.length,u={};++t<r;){var a=e[t];u[n[a]]=a}return u}function Z(n){return ve.argsObject&&n instanceof It||(te?te(n):Zt.call(n)==k)
}function nt(n,t,e,r,u,o){var f=e===i;if(typeof e=="function"&&!f){e=a.createCallback(e,r,2);var l=e(n,t);if(typeof l!="undefined")return!!l}if(n===t)return 0!==n||1/n==1/t;var c=typeof n,p=typeof t;if(n===n&&(!n||"function"!=c&&"object"!=c)&&(!t||"function"!=p&&"object"!=p))return!1;if(null==n||null==t)return n===t;if(p=Zt.call(n),c=Zt.call(t),p==j&&(p=A),c==j&&(c=A),p!=c)return!1;switch(p){case x:case O:return+n==+t;case S:return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case I:case P:return n==Tt(t)}if(c=p==k,!c){if(Qt.call(n,"__wrapped__")||Qt.call(t,"__wrapped__"))return nt(n.__wrapped__||n,t.__wrapped__||t,e,r,u,o);
if(p!=A||!ve.nodeClass&&(M(n)||M(t)))return!1;var p=!ve.argsObject&&Q(n)?Ft:n.constructor,s=!ve.argsObject&&Q(t)?Ft:t.constructor;if(p!=s&&(!tt(p)||!(p instanceof p&&tt(s)&&s instanceof s)))return!1}for(u||(u=[]),o||(o=[]),p=u.length;p--;)if(u[p]==n)return o[p]==t;var v=0,l=!0;if(u.push(n),o.push(t),c){if(p=n.length,v=t.length,l=v==n.length,!l&&!f)return l;for(;v--;)if(c=p,s=t[v],f)for(;c--&&!(l=nt(n[c],s,e,r,u,o)););else if(!(l=nt(n[v],s,e,r,u,o)))break;return l}return ke(t,function(t,a,i){return Qt.call(i,a)?(v++,l=Qt.call(n,a)&&nt(n[a],t,e,r,u,o)):void 0
}),l&&!f&&ke(n,function(n,t,e){return Qt.call(e,t)?l=-1<--v:void 0}),l}function tt(n){return typeof n=="function"}function et(n){return n?$[typeof n]:!1}function rt(n){return typeof n=="number"||Zt.call(n)==S}function ut(n){return typeof n=="string"||Zt.call(n)==P}function at(n,t,e){var r=arguments,u=0,o=2;if(!et(n))return n;if(e===i)var f=r[3],l=r[4],c=r[5];else l=[],c=[],typeof e!="number"&&(o=r.length),3<o&&"function"==typeof r[o-2]?f=a.createCallback(r[--o-1],r[o--],2):2<o&&"function"==typeof r[o-1]&&(f=r[--o]);
for(;++u<o;)(Z(r[u])?pt:xe)(r[u],function(t,e){var r,u,a=t,o=n[e];if(t&&((u=Z(t))||Oe(t))){for(a=l.length;a--;)if(r=l[a]==t){o=c[a];break}if(!r){var p;f&&(a=f(o,t),p=typeof a!="undefined")&&(o=a),p||(o=u?Z(o)?o:[]:Oe(o)?o:{}),l.push(t),c.push(o),p||(o=at(o,t,i,f,l,c))}}else f&&(a=f(o,t),typeof a=="undefined"&&(a=t)),typeof a!="undefined"&&(o=a);n[e]=o});return n}function ot(n){for(var t=-1,e=de(n),r=e.length,u=It(r);++t<r;)u[t]=n[e[t]];return u}function it(n,t,e){var r=-1,u=n?n.length:0,a=!1;return e=(0>e?ae(0,u+e):e)||0,typeof u=="number"?a=-1<(ut(n)?n.indexOf(t,e):_t(n,t,e)):be(n,function(n){return++r<e?void 0:!(a=n===t)
}),a}function ft(n,t,e){var r=!0;if(t=a.createCallback(t,e),Z(n)){e=-1;for(var u=n.length;++e<u&&(r=!!t(n[e],e,n)););}else be(n,function(n,e,u){return r=!!t(n,e,u)});return r}function lt(n,t,e){var r=[];if(t=a.createCallback(t,e),Z(n)){e=-1;for(var u=n.length;++e<u;){var o=n[e];t(o,e,n)&&r.push(o)}}else be(n,function(n,e,u){t(n,e,u)&&r.push(n)});return r}function ct(n,t,e){if(t=a.createCallback(t,e),!Z(n)){var r;return be(n,function(n,e,u){return t(n,e,u)?(r=n,!1):void 0}),r}e=-1;for(var u=n.length;++e<u;){var o=n[e];
if(t(o,e,n))return o}}function pt(n,t,e){if(t&&typeof e=="undefined"&&Z(n)){e=-1;for(var r=n.length;++e<r&&!1!==t(n[e],e,n););}else be(n,t,e);return n}function st(n,t,e){var r=-1,u=n?n.length:0,o=It(typeof u=="number"?u:0);if(t=a.createCallback(t,e),Z(n))for(;++r<u;)o[r]=t(n[r],r,n);else be(n,function(n,e,u){o[++r]=t(n,e,u)});return o}function vt(n,t,e){var r=-1/0,u=r;if(!t&&Z(n)){e=-1;for(var o=n.length;++e<o;){var i=n[e];i>u&&(u=i)}}else t=!t&&ut(n)?R:a.createCallback(t,e),be(n,function(n,e,a){e=t(n,e,a),e>r&&(r=e,u=n)
});return u}function gt(n,t,e,r){var u=3>arguments.length;if(t=a.createCallback(t,r,4),Z(n)){var o=-1,i=n.length;for(u&&(e=n[++o]);++o<i;)e=t(e,n[o],o,n)}else be(n,function(n,r,a){e=u?(u=!1,n):t(e,n,r,a)});return e}function ht(n,t,e,r){var u=n,o=n?n.length:0,i=3>arguments.length;if(typeof o!="number")var f=de(n),o=f.length;else ve.unindexedChars&&ut(n)&&(u=n.split(""));return t=a.createCallback(t,r,4),pt(n,function(n,r,a){r=f?f[--o]:--o,e=i?(i=!1,u[r]):t(e,u[r],r,a)}),e}function yt(n,t,e){var r;if(t=a.createCallback(t,e),Z(n)){e=-1;
for(var u=n.length;++e<u&&!(r=t(n[e],e,n)););}else be(n,function(n,e,u){return!(r=t(n,e,u))});return!!r}function mt(n){for(var t=-1,e=n?n.length:0,r=Gt.apply(zt,le.call(arguments,1)),r=F(r),u=[];++t<e;){var a=n[t];r(a)||u.push(a)}return u}function dt(n,t,e){if(n){var r=0,u=n.length;if(typeof t!="number"&&null!=t){var o=-1;for(t=a.createCallback(t,e);++o<u&&t(n[o],o,n);)r++}else if(r=t,null==r||e)return n[0];return H(n,0,oe(ae(0,r),u))}}function bt(n,t,e,r){var u=-1,o=n?n.length:0,i=[];for(typeof t!="boolean"&&null!=t&&(r=e,e=t,t=!1),null!=e&&(e=a.createCallback(e,r));++u<o;)r=n[u],e&&(r=e(r,u,n)),Z(r)?Wt.apply(i,t?r:bt(r)):i.push(r);
return i}function _t(n,t,e){var r=-1,u=n?n.length:0;if(typeof e=="number")r=(0>e?ae(0,u+e):e||0)-1;else if(e)return r=Ct(n,t),n[r]===t?r:-1;for(;++r<u;)if(n[r]===t)return r;return-1}function wt(n,t,e){if(typeof t!="number"&&null!=t){var r=0,u=-1,o=n?n.length:0;for(t=a.createCallback(t,e);++u<o&&t(n[u],u,n);)r++}else r=null==t||e?1:ae(0,t);return H(n,r)}function Ct(n,t,e,r){var u=0,o=n?n.length:u;for(e=e?a.createCallback(e,r,1):Et,t=e(t);u<o;)r=u+o>>>1,e(n[r])<t?u=r+1:o=r;return u}function jt(n,t,e,r){var u=-1,o=n?n.length:0,i=[],c=i;
typeof t!="boolean"&&null!=t&&(r=e,e=t,t=!1);var p=!t&&o>=l;if(p)var s={};for(null!=e&&(c=[],e=a.createCallback(e,r));++u<o;){r=n[u];var v=e?e(r,u,n):r;if(p)var g=f+v,g=s[g]?!(c=s[g]):c=s[g]=[];(t?!u||c[c.length-1]!==v:g||0>_t(c,v))&&((e||p)&&c.push(v),i.push(r))}return i}function kt(n,t){for(var e=-1,r=n?n.length:0,u={};++e<r;){var a=n[e];t?u[a]=t[e]:u[a[0]]=a[1]}return u}function xt(n,t){return ve.fastBind||ne&&2<arguments.length?ne.call.apply(ne,arguments):D(n,t,le.call(arguments,2))}function Ot(n){var t=le.call(arguments,1);
return Yt(function(){n.apply(e,t)},1)}function Et(n){return n}function St(n){pt(X(n),function(t){var e=a[t]=n[t];a.prototype[t]=function(){var n=this.__wrapped__,t=[n];return Wt.apply(t,arguments),t=e.apply(a,t),n&&typeof n=="object"&&n==t?this:new U(t)}})}function At(){return this.__wrapped__}r=r?B.defaults(n.Object(),r,B.pick(n,w)):n;var It=r.Array,Pt=r.Boolean,Nt=r.Date,$t=r.Function,qt=r.Math,Bt=r.Number,Ft=r.Object,Rt=r.RegExp,Tt=r.String,Dt=r.TypeError,zt=It(),Lt=Ft(),Kt=r._,Mt=Rt("^"+Tt(Lt.valueOf).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/valueOf|for [^\]]+/g,".+?")+"$"),Ut=qt.ceil,Vt=r.clearTimeout,Gt=zt.concat,Ht=qt.floor,Jt=Mt.test(Jt=Ft.getPrototypeOf)&&Jt,Qt=Lt.hasOwnProperty,Wt=zt.push,Xt=r.setImmediate,Yt=r.setTimeout,Zt=Lt.toString,ne=Mt.test(ne=Zt.bind)&&ne,te=Mt.test(te=It.isArray)&&te,ee=r.isFinite,re=r.isNaN,ue=Mt.test(ue=Ft.keys)&&ue,ae=qt.max,oe=qt.min,ie=r.parseInt,fe=qt.random,le=zt.slice,ce=Mt.test(r.attachEvent),pe=ne&&!/\n|true/.test(ne+ce),se={};
se[k]=It,se[x]=Pt,se[O]=Nt,se[A]=Ft,se[S]=Bt,se[I]=Rt,se[P]=Tt;var ve=a.support={};(function(){var n=function(){this.x=1},t={0:1,length:1},e=[];n.prototype={valueOf:1,y:1};for(var r in new n)e.push(r);for(r in arguments);ve.argsObject=arguments.constructor==Ft&&!(arguments instanceof It),ve.argsClass=Q(arguments),ve.enumPrototypes=n.propertyIsEnumerable("prototype"),ve.fastBind=ne&&!pe,ve.ownLast="x"!=e[0],ve.nonEnumArgs=0!=r,ve.nonEnumShadows=!/valueOf/.test(e),ve.spliceObjects=(zt.splice.call(t,0,1),!t[0]),ve.unindexedChars="xx"!="x"[0]+Ft("x")[0];
try{ve.nodeClass=!(Zt.call(document)==A&&!({toString:0}+""))}catch(u){ve.nodeClass=!0}})(1),a.templateSettings={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:y,variable:"",imports:{_:a}};var ge={a:"q,w,g",h:"var a=arguments,b=0,c=typeof g=='number'?2:a.length;while(++b<c){m=a[b];if(m&&r[typeof m]){",f:"if(typeof u[i]=='undefined')u[i]=m[i]",c:"}}"},he={a:"e,d,x",h:"d=d&&typeof x=='undefined'?d:p.createCallback(d,x)",b:"typeof n=='number'",f:"if(d(m[i],i,e)===false)return u"},ye={h:"if(!r[typeof m])return u;"+he.h,b:!1};
U.prototype=a.prototype,ve.argsClass||(Q=function(n){return n?Qt.call(n,"callee"):!1});var me=z({a:"q",e:"[]",h:"if(!(r[typeof q]))return u",f:"u.push(i)",b:!1}),de=ue?function(n){return et(n)?ve.enumPrototypes&&typeof n=="function"||ve.nonEnumArgs&&n.length&&Q(n)?me(n):ue(n):[]}:me,be=z(he),_e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},we=Y(_e),Ce=z(ge,{h:ge.h.replace(";",";if(c>3&&typeof a[c-2]=='function'){var d=p.createCallback(a[--c-1],a[c--],2);}else if(c>2&&typeof a[c-1]=='function'){d=a[--c];}"),f:"u[i]=d?d(u[i],m[i]):m[i]"}),je=z(ge),ke=z(he,ye,{i:!1}),xe=z(he,ye);
tt(/x/)&&(tt=function(n){return n instanceof $t||Zt.call(n)==E});var Oe=Jt?function(n){if(!n||Zt.call(n)!=A||!ve.argsClass&&Q(n))return!1;var t=n.valueOf,e=typeof t=="function"&&(e=Jt(t))&&Jt(e);return e?n==e||Jt(n)==e:G(n)}:G;pe&&u&&typeof Xt=="function"&&(Ot=xt(Xt,r));var Ee=8==ie("08")?ie:function(n,t){return ie(ut(n)?n.replace(m,""):n,t||0)};return a.after=function(n,t){return 1>n?t():function(){return 1>--n?t.apply(this,arguments):void 0}},a.assign=Ce,a.at=function(n){var t=-1,e=Gt.apply(zt,le.call(arguments,1)),r=e.length,u=It(r);
for(ve.unindexedChars&&ut(n)&&(n=n.split(""));++t<r;)u[t]=n[e[t]];return u},a.bind=xt,a.bindAll=function(n){for(var t=1<arguments.length?Gt.apply(zt,le.call(arguments,1)):X(n),e=-1,r=t.length;++e<r;){var u=t[e];n[u]=xt(n[u],n)}return n},a.bindKey=function(n,t){return D(n,t,le.call(arguments,2),i)},a.compact=function(n){for(var t=-1,e=n?n.length:0,r=[];++t<e;){var u=n[t];u&&r.push(u)}return r},a.compose=function(){var n=arguments;return function(){for(var t=arguments,e=n.length;e--;)t=[n[e].apply(this,t)];
return t[0]}},a.countBy=function(n,t,e){var r={};return t=a.createCallback(t,e),pt(n,function(n,e,u){e=Tt(t(n,e,u)),Qt.call(r,e)?r[e]++:r[e]=1}),r},a.createCallback=function(n,t,e){if(null==n)return Et;var r=typeof n;if("function"!=r){if("object"!=r)return function(t){return t[n]};var u=de(n);return function(t){for(var e=u.length,r=!1;e--&&(r=nt(t[u[e]],n[u[e]],i)););return r}}return typeof t!="undefined"?1===e?function(e){return n.call(t,e)}:2===e?function(e,r){return n.call(t,e,r)}:4===e?function(e,r,u,a){return n.call(t,e,r,u,a)
}:function(e,r,u){return n.call(t,e,r,u)}:n},a.debounce=function(n,t,e){function r(){i=null,f&&(a=n.apply(o,u))}var u,a,o,i,f=!0;if(!0===e)var l=!0,f=!1;else e&&$[typeof e]&&(l=e.leading,f="trailing"in e?e.trailing:f);return function(){var e=l&&!i;return u=arguments,o=this,Vt(i),i=Yt(r,t),e&&(a=n.apply(o,u)),a}},a.defaults=je,a.defer=Ot,a.delay=function(n,t){var r=le.call(arguments,2);return Yt(function(){n.apply(e,r)},t)},a.difference=mt,a.filter=lt,a.flatten=bt,a.forEach=pt,a.forIn=ke,a.forOwn=xe,a.functions=X,a.groupBy=function(n,t,e){var r={};
return t=a.createCallback(t,e),pt(n,function(n,e,u){e=Tt(t(n,e,u)),(Qt.call(r,e)?r[e]:r[e]=[]).push(n)}),r},a.initial=function(n,t,e){if(!n)return[];var r=0,u=n.length;if(typeof t!="number"&&null!=t){var o=u;for(t=a.createCallback(t,e);o--&&t(n[o],o,n);)r++}else r=null==t||e?1:t||r;return H(n,0,oe(ae(0,u-r),u))},a.intersection=function(n){var t=arguments,e=t.length,r={0:{}},u=-1,a=n?n.length:0,o=a>=l,i=[],c=i;n:for(;++u<a;){var p=n[u];if(o)var s=f+p,s=r[0][s]?!(c=r[0][s]):c=r[0][s]=[];if(s||0>_t(c,p)){o&&c.push(p);
for(var v=e;--v;)if(!(r[v]||(r[v]=F(t[v])))(p))continue n;i.push(p)}}return i},a.invert=Y,a.invoke=function(n,t){var e=le.call(arguments,2),r=-1,u=typeof t=="function",a=n?n.length:0,o=It(typeof a=="number"?a:0);return pt(n,function(n){o[++r]=(u?t:n[t]).apply(n,e)}),o},a.keys=de,a.map=st,a.max=vt,a.memoize=function(n,t){var e={};return function(){var r=f+(t?t.apply(this,arguments):arguments[0]);return Qt.call(e,r)?e[r]:e[r]=n.apply(this,arguments)}},a.merge=at,a.min=function(n,t,e){var r=1/0,u=r;
if(!t&&Z(n)){e=-1;for(var o=n.length;++e<o;){var i=n[e];i<u&&(u=i)}}else t=!t&&ut(n)?R:a.createCallback(t,e),be(n,function(n,e,a){e=t(n,e,a),e<r&&(r=e,u=n)});return u},a.omit=function(n,t,e){var r=typeof t=="function",u={};if(r)t=a.createCallback(t,e);else var o=Gt.apply(zt,le.call(arguments,1));return ke(n,function(n,e,a){(r?!t(n,e,a):0>_t(o,e))&&(u[e]=n)}),u},a.once=function(n){var t,e;return function(){return t?e:(t=!0,e=n.apply(this,arguments),n=null,e)}},a.pairs=function(n){for(var t=-1,e=de(n),r=e.length,u=It(r);++t<r;){var a=e[t];
u[t]=[a,n[a]]}return u},a.partial=function(n){return D(n,le.call(arguments,1))},a.partialRight=function(n){return D(n,le.call(arguments,1),null,i)},a.pick=function(n,t,e){var r={};if(typeof t!="function")for(var u=-1,o=Gt.apply(zt,le.call(arguments,1)),i=et(n)?o.length:0;++u<i;){var f=o[u];f in n&&(r[f]=n[f])}else t=a.createCallback(t,e),ke(n,function(n,e,u){t(n,e,u)&&(r[e]=n)});return r},a.pluck=st,a.range=function(n,t,e){n=+n||0,e=+e||1,null==t&&(t=n,n=0);var r=-1;t=ae(0,Ut((t-n)/e));for(var u=It(t);++r<t;)u[r]=n,n+=e;
return u},a.reject=function(n,t,e){return t=a.createCallback(t,e),lt(n,function(n,e,r){return!t(n,e,r)})},a.rest=wt,a.shuffle=function(n){var t=-1,e=n?n.length:0,r=It(typeof e=="number"?e:0);return pt(n,function(n){var e=Ht(fe()*(++t+1));r[t]=r[e],r[e]=n}),r},a.sortBy=function(n,t,e){var r=-1,u=n?n.length:0,o=It(typeof u=="number"?u:0);for(t=a.createCallback(t,e),pt(n,function(n,e,u){o[++r]={a:t(n,e,u),b:r,c:n}}),u=o.length,o.sort(T);u--;)o[u]=o[u].c;return o},a.tap=function(n,t){return t(n),n},a.throttle=function(n,t,e){function r(){f=new Nt,i=null,c&&(a=n.apply(o,u))
}var u,a,o,i,f=0,l=!0,c=!0;return!1===e?l=!1:e&&$[typeof e]&&(l="leading"in e?e.leading:l,c="trailing"in e?e.trailing:c),function(){var e=new Nt;!i&&!l&&(f=e);var c=t-(e-f);return u=arguments,o=this,0<c?i||(i=Yt(r,c)):(Vt(i),i=null,f=e,a=n.apply(o,u)),a}},a.times=function(n,t,e){n=-1<(n=+n)?n:0;var r=-1,u=It(n);for(t=a.createCallback(t,e,1);++r<n;)u[r]=t(r);return u},a.toArray=function(n){return n&&typeof n.length=="number"?ve.unindexedChars&&ut(n)?n.split(""):H(n):ot(n)},a.union=function(n){return Z(n)||(arguments[0]=n?le.call(n):zt),jt(Gt.apply(zt,arguments))
},a.uniq=jt,a.unzip=function(n){for(var t=-1,e=n?n.length:0,r=e?vt(st(n,"length")):0,u=It(r);++t<e;)for(var a=-1,o=n[t];++a<r;)(u[a]||(u[a]=It(e)))[t]=o[a];return u},a.values=ot,a.where=lt,a.without=function(n){return mt(n,le.call(arguments,1))},a.wrap=function(n,t){return function(){var e=[n];return Wt.apply(e,arguments),t.apply(this,e)}},a.zip=function(n){for(var t=-1,e=n?vt(st(arguments,"length")):0,r=It(e);++t<e;)r[t]=st(arguments,t);return r},a.zipObject=kt,a.collect=st,a.drop=wt,a.each=pt,a.extend=Ce,a.methods=X,a.object=kt,a.select=lt,a.tail=wt,a.unique=jt,St(a),a.clone=W,a.cloneDeep=function(n,t,e){return W(n,!0,t,e)
},a.contains=it,a.escape=function(n){return null==n?"":Tt(n).replace(b,K)},a.every=ft,a.find=ct,a.findIndex=function(n,t,e){var r=-1,u=n?n.length:0;for(t=a.createCallback(t,e);++r<u;)if(t(n[r],r,n))return r;return-1},a.findKey=function(n,t,e){var r;return t=a.createCallback(t,e),xe(n,function(n,e,u){return t(n,e,u)?(r=e,!1):void 0}),r},a.has=function(n,t){return n?Qt.call(n,t):!1},a.identity=Et,a.indexOf=_t,a.isArguments=Q,a.isArray=Z,a.isBoolean=function(n){return!0===n||!1===n||Zt.call(n)==x},a.isDate=function(n){return n instanceof Nt||Zt.call(n)==O
},a.isElement=function(n){return n?1===n.nodeType:!1},a.isEmpty=function(n){var t=!0;if(!n)return t;var e=Zt.call(n),r=n.length;return e==k||e==P||(ve.argsClass?e==j:Q(n))||e==A&&typeof r=="number"&&tt(n.splice)?!r:(xe(n,function(){return t=!1}),t)},a.isEqual=nt,a.isFinite=function(n){return ee(n)&&!re(parseFloat(n))},a.isFunction=tt,a.isNaN=function(n){return rt(n)&&n!=+n},a.isNull=function(n){return null===n},a.isNumber=rt,a.isObject=et,a.isPlainObject=Oe,a.isRegExp=function(n){return n instanceof Rt||Zt.call(n)==I
},a.isString=ut,a.isUndefined=function(n){return typeof n=="undefined"},a.lastIndexOf=function(n,t,e){var r=n?n.length:0;for(typeof e=="number"&&(r=(0>e?ae(0,r+e):oe(e,r-1))+1);r--;)if(n[r]===t)return r;return-1},a.mixin=St,a.noConflict=function(){return r._=Kt,this},a.parseInt=Ee,a.random=function(n,t){return null==n&&null==t&&(t=1),n=+n||0,null==t&&(t=n,n=0),n+Ht(fe()*((+t||0)-n+1))},a.reduce=gt,a.reduceRight=ht,a.result=function(n,t){var r=n?n[t]:e;return tt(r)?n[t]():r},a.runInContext=t,a.size=function(n){var t=n?n.length:0;
return typeof t=="number"?t:de(n).length},a.some=yt,a.sortedIndex=Ct,a.template=function(n,t,r){var u=a.templateSettings;n||(n=""),r=je({},r,u);var o,i=je({},r.imports,u.imports),u=de(i),i=ot(i),f=0,l=r.interpolate||d,v="__p+='",l=Rt((r.escape||d).source+"|"+l.source+"|"+(l===y?g:d).source+"|"+(r.evaluate||d).source+"|$","g");n.replace(l,function(t,e,r,u,a,i){return r||(r=u),v+=n.slice(f,i).replace(_,L),e&&(v+="'+__e("+e+")+'"),a&&(o=!0,v+="';"+a+";__p+='"),r&&(v+="'+((__t=("+r+"))==null?'':__t)+'"),f=i+t.length,t
}),v+="';\n",l=r=r.variable,l||(r="obj",v="with("+r+"){"+v+"}"),v=(o?v.replace(c,""):v).replace(p,"$1").replace(s,"$1;"),v="function("+r+"){"+(l?"":r+"||("+r+"={});")+"var __t,__p='',__e=_.escape"+(o?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}":";")+v+"return __p}";try{var h=$t(u,"return "+v).apply(e,i)}catch(m){throw m.source=v,m}return t?h(t):(h.source=v,h)},a.unescape=function(n){return null==n?"":Tt(n).replace(v,J)},a.uniqueId=function(n){var t=++o;return Tt(null==n?"":n)+t
},a.all=ft,a.any=yt,a.detect=ct,a.foldl=gt,a.foldr=ht,a.include=it,a.inject=gt,xe(a,function(n,t){a.prototype[t]||(a.prototype[t]=function(){var t=[this.__wrapped__];return Wt.apply(t,arguments),n.apply(a,t)})}),a.first=dt,a.last=function(n,t,e){if(n){var r=0,u=n.length;if(typeof t!="number"&&null!=t){var o=u;for(t=a.createCallback(t,e);o--&&t(n[o],o,n);)r++}else if(r=t,null==r||e)return n[u-1];return H(n,ae(0,u-r))}},a.take=dt,a.head=dt,xe(a,function(n,t){a.prototype[t]||(a.prototype[t]=function(t,e){var r=n(this.__wrapped__,t,e);
return null==t||e&&typeof t!="function"?r:new U(r)})}),a.VERSION="1.2.0",a.prototype.toString=function(){return Tt(this.__wrapped__)},a.prototype.value=At,a.prototype.valueOf=At,be(["join","pop","shift"],function(n){var t=zt[n];a.prototype[n]=function(){return t.apply(this.__wrapped__,arguments)}}),be(["push","reverse","sort","unshift"],function(n){var t=zt[n];a.prototype[n]=function(){return t.apply(this.__wrapped__,arguments),this}}),be(["concat","slice","splice"],function(n){var t=zt[n];a.prototype[n]=function(){return new U(t.apply(this.__wrapped__,arguments))
}}),ve.spliceObjects||be(["pop","shift","splice"],function(n){var t=zt[n],e="splice"==n;a.prototype[n]=function(){var n=this.__wrapped__,r=t.apply(n,arguments);return 0===n.length&&delete n[0],e?new U(r):r}}),a}var e,r=typeof exports=="object"&&exports,u=typeof module=="object"&&module&&module.exports==r&&module,a=typeof global=="object"&&global;(a.global===a||a.window===a)&&(n=a);var o=0,i={},f=+new Date+"",l=200,c=/\b__p\+='';/g,p=/\b(__p\+=)''\+/g,s=/(__e\(.*?\)|\b__t\))\+'';/g,v=/&(?:amp|lt|gt|quot|#39);/g,g=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,h=/\w*$/,y=/<%=([\s\S]+?)%>/g,m=/^0+(?=.$)/,d=/($^)/,b=/[&<>"']/g,_=/['\n\r\t\u2028\u2029\\]/g,w="Array Boolean Date Function Math Number Object RegExp String _ attachEvent clearTimeout isFinite isNaN parseInt setImmediate setTimeout".split(" "),C="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),j="[object Arguments]",k="[object Array]",x="[object Boolean]",O="[object Date]",E="[object Function]",S="[object Number]",A="[object Object]",I="[object RegExp]",P="[object String]",N={};
N[E]=!1,N[j]=N[k]=N[x]=N[O]=N[S]=N[A]=N[I]=N[P]=!0;var $={"boolean":!1,"function":!0,object:!0,number:!1,string:!1,undefined:!1},q={"\\":"\\","'":"'","\n":"n","\r":"r","	":"t","\u2028":"u2028","\u2029":"u2029"},B=t();typeof define=="function"&&typeof define.amd=="object"&&define.amd?(n._=B,define('_',[],function(){return B})):r&&!r.nodeType?u?(u.exports=B)._=B:r._=B:n._=B})(this);
/*! jQuery v1.9.1 -ajax,-ajax/script,-ajax/jsonp,-ajax/xhr,-effects,-offset,-dimensions | (c) 2005, 2012 jQuery Foundation, Inc. | jquery.org/license
//@ sourceMappingURL=jquery.min.map
*/(function(e,t){var n,r,i=typeof t,o=e.document,a=e.location,s=e.jQuery,l=e.$,u={},c=[],d="1.9.1 -ajax,-ajax/script,-ajax/jsonp,-ajax/xhr,-effects,-offset,-dimensions",p=c.concat,f=c.push,h=c.slice,g=c.indexOf,m=u.toString,y=u.hasOwnProperty,v=d.trim,b=function(e,t){return new b.fn.init(e,t,r)},x=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,N=/\S+/g,w=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,T=/^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,k=/^[\],:{}\s]*$/,E=/(?:^|:|,)(?:\s*\[)+/g,A=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,S=/"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,D=/^-ms-/,L=/-([\da-z])/gi,H=function(e,t){return t.toUpperCase()},j=function(e){(o.addEventListener||"load"===e.type||"complete"===o.readyState)&&(B(),b.ready())},B=function(){o.addEventListener?(o.removeEventListener("DOMContentLoaded",j,!1),e.removeEventListener("load",j,!1)):(o.detachEvent("onreadystatechange",j),e.detachEvent("onload",j))};b.fn=b.prototype={jquery:d,constructor:b,init:function(e,n,r){var i,a;if(!e)return this;if("string"==typeof e){if(i="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:T.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof b?n[0]:n,b.merge(this,b.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:o,!0)),C.test(i[1])&&b.isPlainObject(n))for(i in n)b.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(a=o.getElementById(i[2]),a&&a.parentNode){if(a.id!==i[2])return r.find(e);this.length=1,this[0]=a}return this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):b.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),b.makeArray(e,this))},selector:"",length:0,size:function(){return this.length},toArray:function(){return h.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return b.each(this,e,t)},ready:function(e){return b.ready.promise().done(e),this},slice:function(){return this.pushStack(h.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(b.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:[].sort,splice:[].splice},b.fn.init.prototype=b.fn,b.extend=b.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},l=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[1]||{},l=2),"object"==typeof s||b.isFunction(s)||(s={}),u===l&&(s=this,--l);u>l;l++)if(null!=(o=arguments[l]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(b.isPlainObject(r)||(n=b.isArray(r)))?(n?(n=!1,a=e&&b.isArray(e)?e:[]):a=e&&b.isPlainObject(e)?e:{},s[i]=b.extend(c,a,r)):r!==t&&(s[i]=r));return s},b.extend({noConflict:function(t){return e.$===b&&(e.$=l),t&&e.jQuery===b&&(e.jQuery=s),b},isReady:!1,readyWait:1,holdReady:function(e){e?b.readyWait++:b.ready(!0)},ready:function(e){if(e===!0?!--b.readyWait:!b.isReady){if(!o.body)return setTimeout(b.ready);b.isReady=!0,e!==!0&&--b.readyWait>0||(n.resolveWith(o,[b]),b.fn.trigger&&b(o).trigger("ready").off("ready"))}},isFunction:function(e){return"function"===b.type(e)},isArray:Array.isArray||function(e){return"array"===b.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?u[m.call(e)]||"object":typeof e},isPlainObject:function(e){if(!e||"object"!==b.type(e)||e.nodeType||b.isWindow(e))return!1;try{if(e.constructor&&!y.call(e,"constructor")&&!y.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}var r;for(r in e);return r===t||y.call(e,r)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=b.buildFragment([e],t,i),i&&b(i).remove(),b.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:"string"==typeof n&&(n=b.trim(n),n&&k.test(n.replace(A,"@").replace(S,"]").replace(E,"")))?Function("return "+n)():(b.error("Invalid JSON: "+n),t)},parseXML:function(n){var r,i;if(!n||"string"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName("parsererror").length||b.error("Invalid XML: "+n),r},noop:function(){},globalEval:function(t){t&&b.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(D,"ms-").replace(L,H)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:v&&!v.call("\ufeff\u00a0")?function(e){return null==e?"":v.call(e)}:function(e){return null==e?"":(e+"").replace(w,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?b.merge(n,"string"==typeof e?[e]:e):f.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(g)return g.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if("number"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return p.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return"string"==typeof n&&(o=e[n],n=e,e=o),b.isFunction(e)?(r=h.call(arguments,2),i=function(){return e.apply(n||this,r.concat(h.call(arguments)))},i.guid=e.guid=e.guid||b.guid++,i):t},access:function(e,n,r,i,o,a,s){var l=0,u=e.length,c=null==r;if("object"===b.type(r)){o=!0;for(l in r)b.access(e,n,l,r[l],!0,a,s)}else if(i!==t&&(o=!0,b.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(b(e),n)})),n))for(;u>l;l++)n(e[l],r,s?i:i.call(e[l],l,n(e[l],r)));return o?e:c?n.call(e):u?n(e[0],r):a},now:function(){return(new Date).getTime()}}),b.ready.promise=function(t){if(!n)if(n=b.Deferred(),"complete"===o.readyState)setTimeout(b.ready);else if(o.addEventListener)o.addEventListener("DOMContentLoaded",j,!1),e.addEventListener("load",j,!1);else{o.attachEvent("onreadystatechange",j),e.attachEvent("onload",j);var r=!1;try{r=null==e.frameElement&&o.documentElement}catch(i){}r&&r.doScroll&&function a(){if(!b.isReady){try{r.doScroll("left")}catch(e){return setTimeout(a,50)}B(),b.ready()}}()}return n.promise(t)},b.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){u["[object "+t+"]"]=t.toLowerCase()});function M(e){var t=e.length,n=b.type(e);return b.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||"function"!==n&&(0===t||"number"==typeof t&&t>0&&t-1 in e)}r=b(o);var _={};function O(e){var t=_[e]={};return b.each(e.match(N)||[],function(e,n){t[n]=!0}),t}b.Callbacks=function(e){e="string"==typeof e?_[e]||O(e):b.extend({},e);var n,r,i,o,a,s,l=[],u=!e.once&&[],c=function(t){for(r=e.memory&&t,i=!0,a=s||0,s=0,o=l.length,n=!0;l&&o>a;a++)if(l[a].apply(t[0],t[1])===!1&&e.stopOnFalse){r=!1;break}n=!1,l&&(u?u.length&&c(u.shift()):r?l=[]:d.disable())},d={add:function(){if(l){var t=l.length;(function i(t){b.each(t,function(t,n){var r=b.type(n);"function"===r?e.unique&&d.has(n)||l.push(n):n&&n.length&&"string"!==r&&i(n)})})(arguments),n?o=l.length:r&&(s=t,c(r))}return this},remove:function(){return l&&b.each(arguments,function(e,t){var r;while((r=b.inArray(t,l,r))>-1)l.splice(r,1),n&&(o>=r&&o--,a>=r&&a--)}),this},has:function(e){return e?b.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],this},disable:function(){return l=u=r=t,this},disabled:function(){return!l},lock:function(){return u=t,r||d.disable(),this},locked:function(){return!u},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],!l||i&&!u||(n?u.push(t):c(t)),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!i}};return d},b.extend({Deferred:function(e){var t=[["resolve","done",b.Callbacks("once memory"),"resolved"],["reject","fail",b.Callbacks("once memory"),"rejected"],["notify","progress",b.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return b.Deferred(function(n){b.each(t,function(t,o){var a=o[0],s=b.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&b.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?b.extend(e,r):r}},i={};return r.pipe=r.then,b.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=h.call(arguments),r=n.length,i=1!==r||e&&b.isFunction(e.promise)?r:0,o=1===i?e:b.Deferred(),a=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?h.call(arguments):r,n===s?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},s,l,u;if(r>1)for(s=Array(r),l=Array(r),u=Array(r);r>t;t++)n[t]&&b.isFunction(n[t].promise)?n[t].promise().done(a(t,u,n)).fail(o.reject).progress(a(t,l,s)):--i;return i||o.resolveWith(u,n),o.promise()}}),b.support=function(){var t,n,r,a,s,l,u,c,d,p,f=o.createElement("div");if(f.setAttribute("className","t"),f.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",n=f.getElementsByTagName("*"),r=f.getElementsByTagName("a")[0],!n||!r||!n.length)return{};s=o.createElement("select"),u=s.appendChild(o.createElement("option")),a=f.getElementsByTagName("input")[0],r.style.cssText="top:1px;float:left;opacity:.5",t={getSetAttribute:"t"!==f.className,leadingWhitespace:3===f.firstChild.nodeType,tbody:!f.getElementsByTagName("tbody").length,htmlSerialize:!!f.getElementsByTagName("link").length,style:/top/.test(r.getAttribute("style")),hrefNormalized:"/a"===r.getAttribute("href"),opacity:/^0.5/.test(r.style.opacity),cssFloat:!!r.style.cssFloat,checkOn:!!a.value,optSelected:u.selected,enctype:!!o.createElement("form").enctype,html5Clone:"<:nav></:nav>"!==o.createElement("nav").cloneNode(!0).outerHTML,boxModel:"CSS1Compat"===o.compatMode,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},a.checked=!0,t.noCloneChecked=a.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!u.disabled;try{delete f.test}catch(h){t.deleteExpando=!1}a=o.createElement("input"),a.setAttribute("value",""),t.input=""===a.getAttribute("value"),a.value="t",a.setAttribute("type","radio"),t.radioValue="t"===a.value,a.setAttribute("checked","t"),a.setAttribute("name","t"),l=o.createDocumentFragment(),l.appendChild(a),t.appendChecked=a.checked,t.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,f.attachEvent&&(f.attachEvent("onclick",function(){t.noCloneEvent=!1}),f.cloneNode(!0).click());for(p in{submit:!0,change:!0,focusin:!0})f.setAttribute(c="on"+p,"t"),t[p+"Bubbles"]=c in e||f.attributes[c].expando===!1;return f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",t.clearCloneStyle="content-box"===f.style.backgroundClip,b(function(){var n,r,a,s="padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",l=o.getElementsByTagName("body")[0];l&&(n=o.createElement("div"),n.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",l.appendChild(n).appendChild(f),f.innerHTML="<table><tr><td></td><td>t</td></tr></table>",a=f.getElementsByTagName("td"),a[0].style.cssText="padding:0;margin:0;border:0;display:none",d=0===a[0].offsetHeight,a[0].style.display="",a[1].style.display="none",t.reliableHiddenOffsets=d&&0===a[0].offsetHeight,f.innerHTML="",f.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",t.boxSizing=4===f.offsetWidth,t.doesNotIncludeMarginInBodyOffset=1!==l.offsetTop,e.getComputedStyle&&(t.pixelPosition="1%"!==(e.getComputedStyle(f,null)||{}).top,t.boxSizingReliable="4px"===(e.getComputedStyle(f,null)||{width:"4px"}).width,r=f.appendChild(o.createElement("div")),r.style.cssText=f.style.cssText=s,r.style.marginRight=r.style.width="0",f.style.width="1px",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),typeof f.style.zoom!==i&&(f.innerHTML="",f.style.cssText=s+"width:1px;padding:1px;display:inline;zoom:1",t.inlineBlockNeedsLayout=3===f.offsetWidth,f.style.display="block",f.innerHTML="<div></div>",f.firstChild.style.width="5px",t.shrinkWrapBlocks=3!==f.offsetWidth,t.inlineBlockNeedsLayout&&(l.style.zoom=1)),l.removeChild(n),n=f=a=r=null)}),n=s=l=u=r=a=null,t}();var F=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,P=/([A-Z])/g;function q(e,n,r,i){if(b.acceptData(e)){var o,a,s=b.expando,l="string"==typeof n,u=e.nodeType,d=u?b.cache:e,p=u?e[s]:e[s]&&s;if(p&&d[p]&&(i||d[p].data)||!l||r!==t)return p||(u?e[s]=p=c.pop()||b.guid++:p=s),d[p]||(d[p]={},u||(d[p].toJSON=b.noop)),("object"==typeof n||"function"==typeof n)&&(i?d[p]=b.extend(d[p],n):d[p].data=b.extend(d[p].data,n)),o=d[p],i||(o.data||(o.data={}),o=o.data),r!==t&&(o[b.camelCase(n)]=r),l?(a=o[n],null==a&&(a=o[b.camelCase(n)])):a=o,a}}function W(e,t,n){if(b.acceptData(e)){var r,i,o,a=e.nodeType,s=a?b.cache:e,l=a?e[b.expando]:b.expando;if(s[l]){if(t&&(o=n?s[l]:s[l].data)){b.isArray(t)?t=t.concat(b.map(t,b.camelCase)):t in o?t=[t]:(t=b.camelCase(t),t=t in o?[t]:t.split(" "));for(r=0,i=t.length;i>r;r++)delete o[t[r]];if(!(n?I:b.isEmptyObject)(o))return}(n||(delete s[l].data,I(s[l])))&&(a?b.cleanData([e],!0):b.support.deleteExpando||s!=s.window?delete s[l]:s[l]=null)}}}b.extend({cache:{},expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(e){return e=e.nodeType?b.cache[e[b.expando]]:e[b.expando],!!e&&!I(e)},data:function(e,t,n){return q(e,t,n)},removeData:function(e,t){return W(e,t)},_data:function(e,t,n){return q(e,t,n,!0)},_removeData:function(e,t){return W(e,t,!0)},acceptData:function(e){if(e.nodeType&&1!==e.nodeType&&9!==e.nodeType)return!1;var t=e.nodeName&&b.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute("classid")===t}}),b.fn.extend({data:function(e,n){var r,i,o=this[0],a=0,s=null;if(e===t){if(this.length&&(s=b.data(o),1===o.nodeType&&!b._data(o,"parsedAttrs"))){for(r=o.attributes;r.length>a;a++)i=r[a].name,i.indexOf("data-")||(i=b.camelCase(i.slice(5)),$(o,i,s[i]));b._data(o,"parsedAttrs",!0)}return s}return"object"==typeof e?this.each(function(){b.data(this,e)}):b.access(this,function(n){return n===t?o?$(o,e,b.data(o,e)):null:(this.each(function(){b.data(this,e,n)}),t)},null,n,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){b.removeData(this,e)})}});function $(e,n,r){if(r===t&&1===e.nodeType){var i="data-"+n.replace(P,"-$1").toLowerCase();if(r=e.getAttribute(i),"string"==typeof r){try{r="true"===r?!0:"false"===r?!1:"null"===r?null:+r+""===r?+r:F.test(r)?b.parseJSON(r):r}catch(o){}b.data(e,n,r)}else r=t}return r}function I(e){var t;for(t in e)if(("data"!==t||!b.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}b.extend({queue:function(e,n,r){var i;return e?(n=(n||"fx")+"queue",i=b._data(e,n),r&&(!i||b.isArray(r)?i=b._data(e,n,b.makeArray(r)):i.push(r)),i||[]):t},dequeue:function(e,t){t=t||"fx";var n=b.queue(e,t),r=n.length,i=n.shift(),o=b._queueHooks(e,t),a=function(){b.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),o.cur=i,i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return b._data(e,n)||b._data(e,n,{empty:b.Callbacks("once memory").add(function(){b._removeData(e,t+"queue"),b._removeData(e,n)})})}}),b.fn.extend({queue:function(e,n){var r=2;return"string"!=typeof e&&(n=e,e="fx",r--),r>arguments.length?b.queue(this[0],e):n===t?this:this.each(function(){var t=b.queue(this,e,n);b._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&b.dequeue(this,e)})},dequeue:function(e){return this.each(function(){b.dequeue(this,e)})},delay:function(e,t){return e=b.fx?b.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var r,i=1,o=b.Deferred(),a=this,s=this.length,l=function(){--i||o.resolveWith(a,[a])};"string"!=typeof e&&(n=e,e=t),e=e||"fx";while(s--)r=b._data(a[s],e+"queueHooks"),r&&r.empty&&(i++,r.empty.add(l));return l(),o.promise(n)}});var R,z,X=/[\t\r\n]/g,U=/\r/g,V=/^(?:input|select|textarea|button|object)$/i,J=/^(?:a|area)$/i,Q=/^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,Y=/^(?:checked|selected)$/i,K=b.support.getSetAttribute,G=b.support.input;b.fn.extend({attr:function(e,t){return b.access(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){b.removeAttr(this,e)})},prop:function(e,t){return b.access(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return e=b.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,o,a=0,s=this.length,l="string"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).addClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(N)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(X," "):" ")){o=0;while(i=t[o++])0>r.indexOf(" "+i+" ")&&(r+=i+" ");n.className=b.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,a=0,s=this.length,l=0===arguments.length||"string"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).removeClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(N)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(X," "):"")){o=0;while(i=t[o++])while(r.indexOf(" "+i+" ")>=0)r=r.replace(" "+i+" "," ");n.className=e?b.trim(r):""}return this},toggleClass:function(e,t){var n=typeof e,r="boolean"==typeof t;return b.isFunction(e)?this.each(function(n){b(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n){var o,a=0,s=b(this),l=t,u=e.match(N)||[];while(o=u[a++])l=r?l:!s.hasClass(o),s[l?"addClass":"removeClass"](o)}else(n===i||"boolean"===n)&&(this.className&&b._data(this,"__className__",this.className),this.className=this.className||e===!1?"":b._data(this,"__className__")||"")})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(X," ").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,o=this[0];{if(arguments.length)return i=b.isFunction(e),this.each(function(n){var o,a=b(this);1===this.nodeType&&(o=i?e.call(this,n,a.val()):e,null==o?o="":"number"==typeof o?o+="":b.isArray(o)&&(o=b.map(o,function(e){return null==e?"":e+""})),r=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()],r&&"set"in r&&r.set(this,o,"value")!==t||(this.value=o))});if(o)return r=b.valHooks[o.type]||b.valHooks[o.nodeName.toLowerCase()],r&&"get"in r&&(n=r.get(o,"value"))!==t?n:(n=o.value,"string"==typeof n?n.replace(U,""):null==n?"":n)}}}),b.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,l=0>i?s:o?i:0;for(;s>l;l++)if(n=r[l],!(!n.selected&&l!==i||(b.support.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&b.nodeName(n.parentNode,"optgroup"))){if(t=b(n).val(),o)return t;a.push(t)}return a},set:function(e,t){var n=b.makeArray(t);return b(e).find("option").each(function(){this.selected=b.inArray(b(this).val(),n)>=0}),n.length||(e.selectedIndex=-1),n}}},attr:function(e,n,r){var o,a,s,l=e.nodeType;if(e&&3!==l&&8!==l&&2!==l)return typeof e.getAttribute===i?b.prop(e,n,r):(a=1!==l||!b.isXMLDoc(e),a&&(n=n.toLowerCase(),o=b.attrHooks[n]||(Q.test(n)?z:R)),r===t?o&&a&&"get"in o&&null!==(s=o.get(e,n))?s:(typeof e.getAttribute!==i&&(s=e.getAttribute(n)),null==s?t:s):null!==r?o&&a&&"set"in o&&(s=o.set(e,r,n))!==t?s:(e.setAttribute(n,r+""),r):(b.removeAttr(e,n),t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(N);if(o&&1===e.nodeType)while(n=o[i++])r=b.propFix[n]||n,Q.test(n)?!K&&Y.test(n)?e[b.camelCase("default-"+n)]=e[r]=!1:e[r]=!1:b.attr(e,n,""),e.removeAttribute(K?n:r)},attrHooks:{type:{set:function(e,t){if(!b.support.radioValue&&"radio"===t&&b.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(e,n,r){var i,o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return a=1!==s||!b.isXMLDoc(e),a&&(n=b.propFix[n]||n,o=b.propHooks[n]),r!==t?o&&"set"in o&&(i=o.set(e,r,n))!==t?i:e[n]=r:o&&"get"in o&&null!==(i=o.get(e,n))?i:e[n]},propHooks:{tabIndex:{get:function(e){var n=e.getAttributeNode("tabindex");return n&&n.specified?parseInt(n.value,10):V.test(e.nodeName)||J.test(e.nodeName)&&e.href?0:t}}}}),z={get:function(e,n){var r=b.prop(e,n),i="boolean"==typeof r&&e.getAttribute(n),o="boolean"==typeof r?G&&K?null!=i:Y.test(n)?e[b.camelCase("default-"+n)]:!!i:e.getAttributeNode(n);return o&&o.value!==!1?n.toLowerCase():t},set:function(e,t,n){return t===!1?b.removeAttr(e,n):G&&K||!Y.test(n)?e.setAttribute(!K&&b.propFix[n]||n,n):e[b.camelCase("default-"+n)]=e[n]=!0,n}},G&&K||(b.attrHooks.value={get:function(e,n){var r=e.getAttributeNode(n);return b.nodeName(e,"input")?e.defaultValue:r&&r.specified?r.value:t},set:function(e,n,r){return b.nodeName(e,"input")?(e.defaultValue=n,t):R&&R.set(e,n,r)}}),K||(R=b.valHooks.button={get:function(e,n){var r=e.getAttributeNode(n);return r&&("id"===n||"name"===n||"coords"===n?""!==r.value:r.specified)?r.value:t},set:function(e,n,r){var i=e.getAttributeNode(r);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(r)),i.value=n+="","value"===r||n===e.getAttribute(r)?n:t}},b.attrHooks.contenteditable={get:R.get,set:function(e,t,n){R.set(e,""===t?!1:t,n)}},b.each(["width","height"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{set:function(e,r){return""===r?(e.setAttribute(n,"auto"),r):t}})})),b.support.hrefNormalized||(b.each(["href","src","width","height"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{get:function(e){var r=e.getAttribute(n,2);return null==r?t:r}})}),b.each(["href","src"],function(e,t){b.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}})),b.support.style||(b.attrHooks.style={get:function(e){return e.style.cssText||t},set:function(e,t){return e.style.cssText=t+""}}),b.support.optSelected||(b.propHooks.selected=b.extend(b.propHooks.selected,{get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),b.support.enctype||(b.propFix.enctype="encoding"),b.support.checkOn||b.each(["radio","checkbox"],function(){b.valHooks[this]={get:function(e){return null===e.getAttribute("value")?"on":e.value}}}),b.each(["radio","checkbox"],function(){b.valHooks[this]=b.extend(b.valHooks[this],{set:function(e,n){return b.isArray(n)?e.checked=b.inArray(b(e).val(),n)>=0:t}})});var Z=/^(?:input|select|textarea)$/i,et=/^key/,tt=/^(?:mouse|contextmenu)|click/,nt=/^(?:focusinfocus|focusoutblur)$/,rt=/^([^.]*)(?:\.(.+)|)$/;function it(){return!0}function ot(){return!1}b.event={global:{},add:function(e,n,r,o,a){var s,l,u,c,d,p,f,h,g,m,y,v=b._data(e);if(v){r.handler&&(c=r,r=c.handler,a=c.selector),r.guid||(r.guid=b.guid++),(l=v.events)||(l=v.events={}),(p=v.handle)||(p=v.handle=function(e){return typeof b===i||e&&b.event.triggered===e.type?t:b.event.dispatch.apply(p.elem,arguments)},p.elem=e),n=(n||"").match(N)||[""],u=n.length;while(u--)s=rt.exec(n[u])||[],g=y=s[1],m=(s[2]||"").split(".").sort(),d=b.event.special[g]||{},g=(a?d.delegateType:d.bindType)||g,d=b.event.special[g]||{},f=b.extend({type:g,origType:y,data:o,handler:r,guid:r.guid,selector:a,needsContext:a&&b.expr.match.needsContext.test(a),namespace:m.join(".")},c),(h=l[g])||(h=l[g]=[],h.delegateCount=0,d.setup&&d.setup.call(e,o,m,p)!==!1||(e.addEventListener?e.addEventListener(g,p,!1):e.attachEvent&&e.attachEvent("on"+g,p))),d.add&&(d.add.call(e,f),f.handler.guid||(f.handler.guid=r.guid)),a?h.splice(h.delegateCount++,0,f):h.push(f),b.event.global[g]=!0;e=null}},remove:function(e,t,n,r,i){var o,a,s,l,u,c,d,p,f,h,g,m=b.hasData(e)&&b._data(e);if(m&&(c=m.events)){t=(t||"").match(N)||[""],u=t.length;while(u--)if(s=rt.exec(t[u])||[],f=g=s[1],h=(s[2]||"").split(".").sort(),f){d=b.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,p=c[f]||[],s=s[2]&&RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=p.length;while(o--)a=p[o],!i&&g!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&("**"!==r||!a.selector)||(p.splice(o,1),a.selector&&p.delegateCount--,d.remove&&d.remove.call(e,a));l&&!p.length&&(d.teardown&&d.teardown.call(e,h,m.handle)!==!1||b.removeEvent(e,f,m.handle),delete c[f])}else for(f in c)b.event.remove(e,f+t[u],n,r,!0);b.isEmptyObject(c)&&(delete m.handle,b._removeData(e,"events"))}},trigger:function(n,r,i,a){var s,l,u,c,d,p,f,h=[i||o],g=y.call(n,"type")?n.type:n,m=y.call(n,"namespace")?n.namespace.split("."):[];if(u=p=i=i||o,3!==i.nodeType&&8!==i.nodeType&&!nt.test(g+b.event.triggered)&&(g.indexOf(".")>=0&&(m=g.split("."),g=m.shift(),m.sort()),l=0>g.indexOf(":")&&"on"+g,n=n[b.expando]?n:new b.Event(g,"object"==typeof n&&n),n.isTrigger=!0,n.namespace=m.join("."),n.namespace_re=n.namespace?RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=t,n.target||(n.target=i),r=null==r?[n]:b.makeArray(r,[n]),d=b.event.special[g]||{},a||!d.trigger||d.trigger.apply(i,r)!==!1)){if(!a&&!d.noBubble&&!b.isWindow(i)){for(c=d.delegateType||g,nt.test(c+g)||(u=u.parentNode);u;u=u.parentNode)h.push(u),p=u;p===(i.ownerDocument||o)&&h.push(p.defaultView||p.parentWindow||e)}f=0;while((u=h[f++])&&!n.isPropagationStopped())n.type=f>1?c:d.bindType||g,s=(b._data(u,"events")||{})[n.type]&&b._data(u,"handle"),s&&s.apply(u,r),s=l&&u[l],s&&b.acceptData(u)&&s.apply&&s.apply(u,r)===!1&&n.preventDefault();if(n.type=g,!(a||n.isDefaultPrevented()||d._default&&d._default.apply(i.ownerDocument,r)!==!1||"click"===g&&b.nodeName(i,"a")||!b.acceptData(i)||!l||!i[g]||b.isWindow(i))){p=i[l],p&&(i[l]=null),b.event.triggered=g;try{i[g]()}catch(v){}b.event.triggered=t,p&&(i[l]=p)}return n.result}},dispatch:function(e){e=b.event.fix(e);var n,r,i,o,a,s=[],l=h.call(arguments),u=(b._data(this,"events")||{})[e.type]||[],c=b.event.special[e.type]||{};if(l[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){s=b.event.handlers.call(this,e,u),n=0;while((o=s[n++])&&!e.isPropagationStopped()){e.currentTarget=o.elem,a=0;while((i=o.handlers[a++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,r=((b.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l),r!==t&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,n){var r,i,o,a,s=[],l=n.delegateCount,u=e.target;if(l&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!=this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(o=[],a=0;l>a;a++)i=n[a],r=i.selector+" ",o[r]===t&&(o[r]=i.needsContext?b(r,this).index(u)>=0:b.find(r,this,null,[u]).length),o[r]&&o.push(i);o.length&&s.push({elem:u,handlers:o})}return n.length>l&&s.push({elem:this,handlers:n.slice(l)}),s},fix:function(e){if(e[b.expando])return e;var t,n,r,i=e.type,a=e,s=this.fixHooks[i];s||(this.fixHooks[i]=s=tt.test(i)?this.mouseHooks:et.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new b.Event(a),t=r.length;while(t--)n=r[t],e[n]=a[n];return e.target||(e.target=a.srcElement||o),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,a):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,n){var r,i,a,s=n.button,l=n.fromElement;return null==e.pageX&&null!=n.clientX&&(i=e.target.ownerDocument||o,a=i.documentElement,r=i.body,e.pageX=n.clientX+(a&&a.scrollLeft||r&&r.scrollLeft||0)-(a&&a.clientLeft||r&&r.clientLeft||0),e.pageY=n.clientY+(a&&a.scrollTop||r&&r.scrollTop||0)-(a&&a.clientTop||r&&r.clientTop||0)),!e.relatedTarget&&l&&(e.relatedTarget=l===e.target?n.toElement:l),e.which||s===t||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},click:{trigger:function(){return b.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):t}},focus:{trigger:function(){if(this!==o.activeElement&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===o.activeElement&&this.blur?(this.blur(),!1):t},delegateType:"focusout"},beforeunload:{postDispatch:function(e){e.result!==t&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=b.extend(new b.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?b.event.trigger(i,null,t):b.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},b.removeEvent=o.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]===i&&(e[r]=null),e.detachEvent(r,n))},b.Event=function(e,n){return this instanceof b.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?it:ot):this.type=e,n&&b.extend(this,n),this.timeStamp=e&&e.timeStamp||b.now(),this[b.expando]=!0,t):new b.Event(e,n)},b.Event.prototype={isDefaultPrevented:ot,isPropagationStopped:ot,isImmediatePropagationStopped:ot,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=it,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=it,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=it,this.stopPropagation()}},b.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;
return(!i||i!==r&&!b.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),b.support.submitBubbles||(b.event.special.submit={setup:function(){return b.nodeName(this,"form")?!1:(b.event.add(this,"click._submit keypress._submit",function(e){var n=e.target,r=b.nodeName(n,"input")||b.nodeName(n,"button")?n.form:t;r&&!b._data(r,"submitBubbles")&&(b.event.add(r,"submit._submit",function(e){e._submit_bubble=!0}),b._data(r,"submitBubbles",!0))}),t)},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&b.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return b.nodeName(this,"form")?!1:(b.event.remove(this,"._submit"),t)}}),b.support.changeBubbles||(b.event.special.change={setup:function(){return Z.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(b.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),b.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),b.event.simulate("change",this,e,!0)})),!1):(b.event.add(this,"beforeactivate._change",function(e){var t=e.target;Z.test(t.nodeName)&&!b._data(t,"changeBubbles")&&(b.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||b.event.simulate("change",this.parentNode,e,!0)}),b._data(t,"changeBubbles",!0))}),t)},handle:function(e){var n=e.target;return this!==n||e.isSimulated||e.isTrigger||"radio"!==n.type&&"checkbox"!==n.type?e.handleObj.handler.apply(this,arguments):t},teardown:function(){return b.event.remove(this,"._change"),!Z.test(this.nodeName)}}),b.support.focusinBubbles||b.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){b.event.simulate(t,e.target,b.event.fix(e),!0)};b.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),b.fn.extend({on:function(e,n,r,i,o){var a,s;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=t);for(a in e)this.on(a,n,r,e[a],o);return this}if(null==r&&null==i?(i=n,r=n=t):null==i&&("string"==typeof n?(i=r,r=t):(i=r,r=n,n=t)),i===!1)i=ot;else if(!i)return this;return 1===o&&(s=i,i=function(e){return b().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=b.guid++)),this.each(function(){b.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,b(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,n,e[o]);return this}return(n===!1||"function"==typeof n)&&(r=n,n=t),r===!1&&(r=ot),this.each(function(){b.event.remove(this,e,r,n)})},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},trigger:function(e,t){return this.each(function(){b.event.trigger(e,t,this)})},triggerHandler:function(e,n){var r=this[0];return r?b.event.trigger(e,n,r,!0):t}}),function(e,t){var n,r,i,o,a,s,l,u,c,d,p,f,h,g,m,y,v,x="sizzle"+-new Date,N=e.document,w={},T=0,C=0,k=it(),E=it(),A=it(),S=typeof t,D=1<<31,L=[],H=L.pop,j=L.push,B=L.slice,M=L.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},_="[\\x20\\t\\r\\n\\f]",O="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",F=O.replace("w","w#"),P="([*^$|!~]?=)",q="\\["+_+"*("+O+")"+_+"*(?:"+P+_+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+F+")|)|)"+_+"*\\]",W=":("+O+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+q.replace(3,8)+")*)|.*)\\)|)",$=RegExp("^"+_+"+|((?:^|[^\\\\])(?:\\\\.)*)"+_+"+$","g"),I=RegExp("^"+_+"*,"+_+"*"),R=RegExp("^"+_+"*([\\x20\\t\\r\\n\\f>+~])"+_+"*"),z=RegExp(W),X=RegExp("^"+F+"$"),U={ID:RegExp("^#("+O+")"),CLASS:RegExp("^\\.("+O+")"),NAME:RegExp("^\\[name=['\"]?("+O+")['\"]?\\]"),TAG:RegExp("^("+O.replace("w","w*")+")"),ATTR:RegExp("^"+q),PSEUDO:RegExp("^"+W),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+_+"*(even|odd|(([+-]|)(\\d*)n|)"+_+"*(?:([+-]|)"+_+"*(\\d+)|))"+_+"*\\)|)","i"),needsContext:RegExp("^"+_+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+_+"*((?:-\\d)?\\d*)"+_+"*\\)|)(?=[^-]|$)","i")},V=/[\x20\t\r\n\f]*[+~]/,J=/^[^{]+\{\s*\[native code/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Y=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,G=/'|\\/g,Z=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,et=/\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,tt=function(e,t){var n="0x"+t-65536;return n!==n?t:0>n?String.fromCharCode(n+65536):String.fromCharCode(55296|n>>10,56320|1023&n)};try{B.call(N.documentElement.childNodes,0)[0].nodeType}catch(nt){B=function(e){var t,n=[];while(t=this[e++])n.push(t);return n}}function rt(e){return J.test(e+"")}function it(){var e,t=[];return e=function(n,r){return t.push(n+=" ")>i.cacheLength&&delete e[t.shift()],e[n]=r}}function ot(e){return e[x]=!0,e}function at(e){var t=d.createElement("div");try{return e(t)}catch(n){return!1}finally{t=null}}function st(e,t,n,r){var i,o,a,s,l,u,p,g,m,v;if((t?t.ownerDocument||t:N)!==d&&c(t),t=t||d,n=n||[],!e||"string"!=typeof e)return n;if(1!==(s=t.nodeType)&&9!==s)return[];if(!f&&!r){if(i=Q.exec(e))if(a=i[1]){if(9===s){if(o=t.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&y(t,o)&&o.id===a)return n.push(o),n}else{if(i[2])return j.apply(n,B.call(t.getElementsByTagName(e),0)),n;if((a=i[3])&&w.getByClassName&&t.getElementsByClassName)return j.apply(n,B.call(t.getElementsByClassName(a),0)),n}if(w.qsa&&!h.test(e)){if(p=!0,g=x,m=t,v=9===s&&e,1===s&&"object"!==t.nodeName.toLowerCase()){u=pt(e),(p=t.getAttribute("id"))?g=p.replace(G,"\\$&"):t.setAttribute("id",g),g="[id='"+g+"'] ",l=u.length;while(l--)u[l]=g+ft(u[l]);m=V.test(e)&&t.parentNode||t,v=u.join(",")}if(v)try{return j.apply(n,B.call(m.querySelectorAll(v),0)),n}catch(b){}finally{p||t.removeAttribute("id")}}}return Nt(e.replace($,"$1"),t,n,r)}a=st.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},c=st.setDocument=function(e){var n=e?e.ownerDocument||e:N;return n!==d&&9===n.nodeType&&n.documentElement?(d=n,p=n.documentElement,f=a(n),w.tagNameNoComments=at(function(e){return e.appendChild(n.createComment("")),!e.getElementsByTagName("*").length}),w.attributes=at(function(e){e.innerHTML="<select></select>";var t=typeof e.lastChild.getAttribute("multiple");return"boolean"!==t&&"string"!==t}),w.getByClassName=at(function(e){return e.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",e.getElementsByClassName&&e.getElementsByClassName("e").length?(e.lastChild.className="e",2===e.getElementsByClassName("e").length):!1}),w.getByName=at(function(e){e.id=x+0,e.innerHTML="<a name='"+x+"'></a><div name='"+x+"'></div>",p.insertBefore(e,p.firstChild);var t=n.getElementsByName&&n.getElementsByName(x).length===2+n.getElementsByName(x+0).length;return w.getIdNotName=!n.getElementById(x),p.removeChild(e),t}),i.attrHandle=at(function(e){return e.innerHTML="<a href='#'></a>",e.firstChild&&typeof e.firstChild.getAttribute!==S&&"#"===e.firstChild.getAttribute("href")})?{}:{href:function(e){return e.getAttribute("href",2)},type:function(e){return e.getAttribute("type")}},w.getIdNotName?(i.find.ID=function(e,t){if(typeof t.getElementById!==S&&!f){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){return e.getAttribute("id")===t}}):(i.find.ID=function(e,n){if(typeof n.getElementById!==S&&!f){var r=n.getElementById(e);return r?r.id===e||typeof r.getAttributeNode!==S&&r.getAttributeNode("id").value===e?[r]:t:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){var n=typeof e.getAttributeNode!==S&&e.getAttributeNode("id");return n&&n.value===t}}),i.find.TAG=w.tagNameNoComments?function(e,n){return typeof n.getElementsByTagName!==S?n.getElementsByTagName(e):t}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.NAME=w.getByName&&function(e,n){return typeof n.getElementsByName!==S?n.getElementsByName(name):t},i.find.CLASS=w.getByClassName&&function(e,n){return typeof n.getElementsByClassName===S||f?t:n.getElementsByClassName(e)},g=[],h=[":focus"],(w.qsa=rt(n.querySelectorAll))&&(at(function(e){e.innerHTML="<select><option selected=''></option></select>",e.querySelectorAll("[selected]").length||h.push("\\["+_+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),e.querySelectorAll(":checked").length||h.push(":checked")}),at(function(e){e.innerHTML="<input type='hidden' i=''/>",e.querySelectorAll("[i^='']").length&&h.push("[*^$]="+_+"*(?:\"\"|'')"),e.querySelectorAll(":enabled").length||h.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),h.push(",.*:")})),(w.matchesSelector=rt(m=p.matchesSelector||p.mozMatchesSelector||p.webkitMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&at(function(e){w.disconnectedMatch=m.call(e,"div"),m.call(e,"[s!='']:x"),g.push("!=",W)}),h=RegExp(h.join("|")),g=RegExp(g.join("|")),y=rt(p.contains)||p.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},v=p.compareDocumentPosition?function(e,t){var r;return e===t?(l=!0,0):(r=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t))?1&r||e.parentNode&&11===e.parentNode.nodeType?e===n||y(N,e)?-1:t===n||y(N,t)?1:0:4&r?-1:1:e.compareDocumentPosition?-1:1}:function(e,t){var r,i=0,o=e.parentNode,a=t.parentNode,s=[e],u=[t];if(e===t)return l=!0,0;if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:0;if(o===a)return lt(e,t);r=e;while(r=r.parentNode)s.unshift(r);r=t;while(r=r.parentNode)u.unshift(r);while(s[i]===u[i])i++;return i?lt(s[i],u[i]):s[i]===N?-1:u[i]===N?1:0},l=!1,[0,0].sort(v),w.detectDuplicates=l,d):d},st.matches=function(e,t){return st(e,null,null,t)},st.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&c(e),t=t.replace(Z,"='$1']"),!(!w.matchesSelector||f||g&&g.test(t)||h.test(t)))try{var n=m.call(e,t);if(n||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(r){}return st(t,d,null,[e]).length>0},st.contains=function(e,t){return(e.ownerDocument||e)!==d&&c(e),y(e,t)},st.attr=function(e,t){var n;return(e.ownerDocument||e)!==d&&c(e),f||(t=t.toLowerCase()),(n=i.attrHandle[t])?n(e):f||w.attributes?e.getAttribute(t):((n=e.getAttributeNode(t))||e.getAttribute(t))&&e[t]===!0?t:n&&n.specified?n.value:null},st.error=function(e){throw Error("Syntax error, unrecognized expression: "+e)},st.uniqueSort=function(e){var t,n=[],r=1,i=0;if(l=!w.detectDuplicates,e.sort(v),l){for(;t=e[r];r++)t===e[r-1]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e};function lt(e,t){var n=t&&e,r=n&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function ut(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function ct(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function dt(e){return ot(function(t){return t=+t,ot(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}o=st.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=st.selectors={cacheLength:50,createPseudo:ot,match:U,find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(et,tt),e[3]=(e[4]||e[5]||"").replace(et,tt),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||st.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&st.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return U.CHILD.test(e[0])?null:(e[4]?e[2]=e[4]:n&&z.test(n)&&(t=pt(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){return"*"===e?function(){return!0}:(e=e.replace(et,tt).toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(e){var t=k[e+" "];return t||(t=RegExp("(^|"+_+")"+e+"("+_+"|$)"))&&k(e,function(e){return t.test(e.className||typeof e.getAttribute!==S&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=st.attr(r,e);return null==i?"!="===t:t?(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i+" ").indexOf(n)>-1:"|="===t?i===n||i.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,p,f,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!l&&!s;if(m){if(o){while(g){d=t;while(d=d[g])if(s?d.nodeName.toLowerCase()===y:1===d.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){c=m[x]||(m[x]={}),u=c[e]||[],f=u[0]===T&&u[1],p=u[0]===T&&u[2],d=f&&m.childNodes[f];while(d=++f&&d&&d[g]||(p=f=0)||h.pop())if(1===d.nodeType&&++p&&d===t){c[e]=[T,f,p];break}}else if(v&&(u=(t[x]||(t[x]={}))[e])&&u[0]===T)p=u[1];else while(d=++f&&d&&d[g]||(p=f=0)||h.pop())if((s?d.nodeName.toLowerCase()===y:1===d.nodeType)&&++p&&(v&&((d[x]||(d[x]={}))[e]=[T,p]),d===t))break;return p-=i,p===r||0===p%r&&p/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||st.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ot(function(e,n){var i,o=r(e,t),a=o.length;while(a--)i=M.call(e,o[a]),e[i]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ot(function(e){var t=[],n=[],r=s(e.replace($,"$1"));return r[x]?ot(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:ot(function(e){return function(t){return st(e,t).length>0}}),contains:ot(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:ot(function(e){return X.test(e||"")||st.error("unsupported lang: "+e),e=e.replace(et,tt).toLowerCase(),function(t){var n;do if(n=f?t.getAttribute("xml:lang")||t.getAttribute("lang"):t.lang)return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>"@"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||t.toLowerCase()===e.type)},first:dt(function(){return[0]}),last:dt(function(e,t){return[t-1]}),eq:dt(function(e,t,n){return[0>n?n+t:n]}),even:dt(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:dt(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:dt(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:dt(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}};for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[n]=ut(n);for(n in{submit:!0,reset:!0})i.pseudos[n]=ct(n);function pt(e,t){var n,r,o,a,s,l,u,c=E[e+" "];if(c)return t?0:c.slice(0);s=e,l=[],u=i.preFilter;while(s){(!n||(r=I.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=R.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace($," ")}),s=s.slice(n.length));for(a in i.filter)!(r=U[a].exec(s))||u[a]&&!(r=u[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?st.error(e):E(e,l).slice(0)}function ft(e){var t=0,n=e.length,r="";for(;n>t;t++)r+=e[t].value;return r}function ht(e,t,n){var i=t.dir,o=n&&"parentNode"===i,a=C++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,s){var l,u,c,d=T+" "+a;if(s){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,s))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[x]||(t[x]={}),(u=c[i])&&u[0]===d){if((l=u[1])===!0||l===r)return l===!0}else if(u=c[i]=[d],u[1]=e(t,n,s)||r,u[1]===!0)return!0}}function gt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function mt(e,t,n,r,i){var o,a=[],s=0,l=e.length,u=null!=t;for(;l>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),u&&t.push(s));return a}function yt(e,t,n,r,i,o){return r&&!r[x]&&(r=yt(r)),i&&!i[x]&&(i=yt(i,o)),ot(function(o,a,s,l){var u,c,d,p=[],f=[],h=a.length,g=o||xt(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:mt(g,p,e,s,l),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,l),r){u=mt(y,f),r(u,[],s,l),c=u.length;while(c--)(d=u[c])&&(y[f[c]]=!(m[f[c]]=d))}if(o){if(i||e){if(i){u=[],c=y.length;while(c--)(d=y[c])&&u.push(m[c]=d);i(null,y=[],u,l)}c=y.length;while(c--)(d=y[c])&&(u=i?M.call(o,d):p[c])>-1&&(o[u]=!(a[u]=d))}}else y=mt(y===a?y.splice(h,y.length):y),i?i(null,a,y,l):j.apply(a,y)})}function vt(e){var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,c=ht(function(e){return e===t},s,!0),d=ht(function(e){return M.call(t,e)>-1},s,!0),p=[function(e,n,r){return!a&&(r||n!==u)||((t=n).nodeType?c(e,n,r):d(e,n,r))}];for(;o>l;l++)if(n=i.relative[e[l].type])p=[ht(gt(p),n)];else{if(n=i.filter[e[l].type].apply(null,e[l].matches),n[x]){for(r=++l;o>r;r++)if(i.relative[e[r].type])break;return yt(l>1&&gt(p),l>1&&ft(e.slice(0,l-1)).replace($,"$1"),n,r>l&&vt(e.slice(l,r)),o>r&&vt(e=e.slice(r)),o>r&&ft(e))}p.push(n)}return gt(p)}function bt(e,t){var n=0,o=t.length>0,a=e.length>0,s=function(s,l,c,p,f){var h,g,m,y=[],v=0,b="0",x=s&&[],N=null!=f,w=u,C=s||a&&i.find.TAG("*",f&&l.parentNode||l),k=T+=null==w?1:Math.random()||.1;for(N&&(u=l!==d&&l,r=n);null!=(h=C[b]);b++){if(a&&h){g=0;while(m=e[g++])if(m(h,l,c)){p.push(h);break}N&&(T=k,r=++n)}o&&((h=!m&&h)&&v--,s&&x.push(h))}if(v+=b,o&&b!==v){g=0;while(m=t[g++])m(x,y,l,c);if(s){if(v>0)while(b--)x[b]||y[b]||(y[b]=H.call(p));y=mt(y)}j.apply(p,y),N&&!s&&y.length>0&&v+t.length>1&&st.uniqueSort(p)}return N&&(T=k,u=w),x};return o?ot(s):s}s=st.compile=function(e,t){var n,r=[],i=[],o=A[e+" "];if(!o){t||(t=pt(e)),n=t.length;while(n--)o=vt(t[n]),o[x]?r.push(o):i.push(o);o=A(e,bt(i,r))}return o};function xt(e,t,n){var r=0,i=t.length;for(;i>r;r++)st(e,t[r],n);return n}function Nt(e,t,n,r){var o,a,l,u,c,d=pt(e);if(!r&&1===d.length){if(a=d[0]=d[0].slice(0),a.length>2&&"ID"===(l=a[0]).type&&9===t.nodeType&&!f&&i.relative[a[1].type]){if(t=i.find.ID(l.matches[0].replace(et,tt),t)[0],!t)return n;e=e.slice(a.shift().value.length)}o=U.needsContext.test(e)?0:a.length;while(o--){if(l=a[o],i.relative[u=l.type])break;if((c=i.find[u])&&(r=c(l.matches[0].replace(et,tt),V.test(a[0].type)&&t.parentNode||t))){if(a.splice(o,1),e=r.length&&ft(a),!e)return j.apply(n,B.call(r,0)),n;break}}}return s(e,d)(r,t,f,n,V.test(e)),n}i.pseudos.nth=i.pseudos.eq;function wt(){}i.filters=wt.prototype=i.pseudos,i.setFilters=new wt,c(),st.attr=b.attr,b.find=st,b.expr=st.selectors,b.expr[":"]=b.expr.pseudos,b.unique=st.uniqueSort,b.text=st.getText,b.isXMLDoc=st.isXML,b.contains=st.contains}(e);var at=/Until$/,st=/^(?:parents|prev(?:Until|All))/,lt=/^.[^:#\[\.,]*$/,ut=b.expr.match.needsContext,ct={children:!0,contents:!0,next:!0,prev:!0};b.fn.extend({find:function(e){var t,n,r,i=this.length;if("string"!=typeof e)return r=this,this.pushStack(b(e).filter(function(){for(t=0;i>t;t++)if(b.contains(r[t],this))return!0}));for(n=[],t=0;i>t;t++)b.find(e,this[t],n);return n=this.pushStack(i>1?b.unique(n):n),n.selector=(this.selector?this.selector+" ":"")+e,n},has:function(e){var t,n=b(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(b.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(pt(this,e,!1))},filter:function(e){return this.pushStack(pt(this,e,!0))},is:function(e){return!!e&&("string"==typeof e?ut.test(e)?b(e,this.context).index(this[0])>=0:b.filter(e,this).length>0:this.filter(e).length>0)},closest:function(e,t){var n,r=0,i=this.length,o=[],a=ut.test(e)||"string"!=typeof e?b(e,t||this.context):0;for(;i>r;r++){n=this[r];while(n&&n.ownerDocument&&n!==t&&11!==n.nodeType){if(a?a.index(n)>-1:b.find.matchesSelector(n,e)){o.push(n);break}n=n.parentNode}}return this.pushStack(o.length>1?b.unique(o):o)},index:function(e){return e?"string"==typeof e?b.inArray(this[0],b(e)):b.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n="string"==typeof e?b(e,t):b.makeArray(e&&e.nodeType?[e]:e),r=b.merge(this.get(),n);return this.pushStack(b.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.fn.andSelf=b.fn.addBack;function dt(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return b.dir(e,"parentNode")},parentsUntil:function(e,t,n){return b.dir(e,"parentNode",n)},next:function(e){return dt(e,"nextSibling")},prev:function(e){return dt(e,"previousSibling")},nextAll:function(e){return b.dir(e,"nextSibling")},prevAll:function(e){return b.dir(e,"previousSibling")},nextUntil:function(e,t,n){return b.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return b.dir(e,"previousSibling",n)},siblings:function(e){return b.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return b.sibling(e.firstChild)},contents:function(e){return b.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:b.merge([],e.childNodes)}},function(e,t){b.fn[e]=function(n,r){var i=b.map(this,t,n);return at.test(e)||(r=n),r&&"string"==typeof r&&(i=b.filter(r,i)),i=this.length>1&&!ct[e]?b.unique(i):i,this.length>1&&st.test(e)&&(i=i.reverse()),this.pushStack(i)}}),b.extend({filter:function(e,t,n){return n&&(e=":not("+e+")"),1===t.length?b.find.matchesSelector(t[0],e)?[t[0]]:[]:b.find.matches(e,t)},dir:function(e,n,r){var i=[],o=e[n];while(o&&9!==o.nodeType&&(r===t||1!==o.nodeType||!b(o).is(r)))1===o.nodeType&&i.push(o),o=o[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function pt(e,t,n){if(t=t||0,b.isFunction(t))return b.grep(e,function(e,r){var i=!!t.call(e,r,e);return i===n});if(t.nodeType)return b.grep(e,function(e){return e===t===n});if("string"==typeof t){var r=b.grep(e,function(e){return 1===e.nodeType});if(lt.test(t))return b.filter(t,r,!n);t=b.filter(t,r)}return b.grep(e,function(e){return b.inArray(e,t)>=0===n})}function ft(e){var t=ht.split("|"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}var ht="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",gt=/ jQuery\d+="(?:null|\d+)"/g,mt=RegExp("<(?:"+ht+")[\\s/>]","i"),yt=/^\s+/,vt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bt=/<([\w:]+)/,xt=/<tbody/i,Nt=/<|&#?\w+;/,wt=/<(?:script|style|link)/i,Tt=/^(?:checkbox|radio)$/i,Ct=/checked\s*(?:[^=]|=\s*.checked.)/i,kt=/^$|\/(?:java|ecma)script/i,Et=/^true\/(.*)/,At=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,St={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:b.support.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},Dt=ft(o),Lt=Dt.appendChild(o.createElement("div"));St.optgroup=St.option,St.tbody=St.tfoot=St.colgroup=St.caption=St.thead,St.th=St.td,b.fn.extend({text:function(e){return b.access(this,function(e){return e===t?b.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},wrapAll:function(e){if(b.isFunction(e))return this.each(function(t){b(this).wrapAll(e.call(this,t))});if(this[0]){var t=b(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&1===e.firstChild.nodeType)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return b.isFunction(e)?this.each(function(t){b(this).wrapInner(e.call(this,t))}):this.each(function(){var t=b(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b.isFunction(e);return this.each(function(n){b(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){b.nodeName(this,"body")||b(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.appendChild(e)})},prepend:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.insertBefore(e,this.firstChild)})},before:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=0;for(;null!=(n=this[r]);r++)(!e||b.filter(e,[n]).length>0)&&(t||1!==n.nodeType||b.cleanData(Ft(n)),n.parentNode&&(t&&b.contains(n.ownerDocument,n)&&Mt(Ft(n,"script")),n.parentNode.removeChild(n)));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++){1===e.nodeType&&b.cleanData(Ft(e,!1));while(e.firstChild)e.removeChild(e.firstChild);e.options&&b.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return b.clone(this,e,t)})},html:function(e){return b.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return 1===n.nodeType?n.innerHTML.replace(gt,""):t;if(!("string"!=typeof e||wt.test(e)||!b.support.htmlSerialize&&mt.test(e)||!b.support.leadingWhitespace&&yt.test(e)||St[(bt.exec(e)||["",""])[1].toLowerCase()])){e=e.replace(vt,"<$1></$2>");try{for(;i>r;r++)n=this[r]||{},1===n.nodeType&&(b.cleanData(Ft(n,!1)),n.innerHTML=e);n=0}catch(o){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(e){var t=b.isFunction(e);return t||"string"==typeof e||(e=b(e).not(this).detach()),this.domManip([e],!0,function(e){var t=this.nextSibling,n=this.parentNode;n&&(b(this).remove(),n.insertBefore(e,t))})},detach:function(e){return this.remove(e,!0)},domManip:function(e,n,r){e=p.apply([],e);var i,o,a,s,l,u,c=0,d=this.length,f=this,h=d-1,g=e[0],m=b.isFunction(g);if(m||!(1>=d||"string"!=typeof g||b.support.checkClone)&&Ct.test(g))return this.each(function(i){var o=f.eq(i);m&&(e[0]=g.call(this,i,n?o.html():t)),o.domManip(e,n,r)});if(d&&(u=b.buildFragment(e,this[0].ownerDocument,!1,this),i=u.firstChild,1===u.childNodes.length&&(u=i),i)){for(n=n&&b.nodeName(i,"tr"),s=b.map(Ft(u,"script"),jt),a=s.length;d>c;c++)o=u,c!==h&&(o=b.clone(o,!0,!0),a&&b.merge(s,Ft(o,"script"))),r.call(n&&b.nodeName(this[c],"table")?Ht(this[c],"tbody"):this[c],o,c);if(a)for(l=s[s.length-1].ownerDocument,b.map(s,Bt),c=0;a>c;c++)o=s[c],kt.test(o.type||"")&&!b._data(o,"globalEval")&&b.contains(l,o)&&(o.src?b.ajax({url:o.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):b.globalEval((o.text||o.textContent||o.innerHTML||"").replace(At,"")));u=i=null}return this}});function Ht(e,t){return e.getElementsByTagName(t)[0]||e.appendChild(e.ownerDocument.createElement(t))}function jt(e){var t=e.getAttributeNode("type");return e.type=(t&&t.specified)+"/"+e.type,e}function Bt(e){var t=Et.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function Mt(e,t){var n,r=0;for(;null!=(n=e[r]);r++)b._data(n,"globalEval",!t||b._data(t[r],"globalEval"))}function _t(e,t){if(1===t.nodeType&&b.hasData(e)){var n,r,i,o=b._data(e),a=b._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)b.event.add(t,n,s[n][r])}a.data&&(a.data=b.extend({},a.data))}}function Ot(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!b.support.noCloneEvent&&t[b.expando]){i=b._data(t);for(r in i.events)b.removeEvent(t,r,i.handle);t.removeAttribute(b.expando)}"script"===n&&t.text!==e.text?(jt(t).text=e.text,Bt(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),b.support.html5Clone&&e.innerHTML&&!b.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Tt.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){b.fn[e]=function(e){var n,r=0,i=[],o=b(e),a=o.length-1;for(;a>=r;r++)n=r===a?this:this.clone(!0),b(o[r])[t](n),f.apply(i,n.get());return this.pushStack(i)}});function Ft(e,n){var r,o,a=0,s=typeof e.getElementsByTagName!==i?e.getElementsByTagName(n||"*"):typeof e.querySelectorAll!==i?e.querySelectorAll(n||"*"):t;if(!s)for(s=[],r=e.childNodes||e;null!=(o=r[a]);a++)!n||b.nodeName(o,n)?s.push(o):b.merge(s,Ft(o,n));return n===t||n&&b.nodeName(e,n)?b.merge([e],s):s}function Pt(e){Tt.test(e.type)&&(e.defaultChecked=e.checked)}b.extend({clone:function(e,t,n){var r,i,o,a,s,l=b.contains(e.ownerDocument,e);if(b.support.html5Clone||b.isXMLDoc(e)||!mt.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Lt.innerHTML=e.outerHTML,Lt.removeChild(o=Lt.firstChild)),!(b.support.noCloneEvent&&b.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(r=Ft(o),s=Ft(e),a=0;null!=(i=s[a]);++a)r[a]&&Ot(i,r[a]);if(t)if(n)for(s=s||Ft(e),r=r||Ft(o),a=0;null!=(i=s[a]);a++)_t(i,r[a]);else _t(e,o);return r=Ft(o,"script"),r.length>0&&Mt(r,!l&&Ft(e,"script")),r=s=i=null,o},buildFragment:function(e,t,n,r){var i,o,a,s,l,u,c,d=e.length,p=ft(t),f=[],h=0;for(;d>h;h++)if(o=e[h],o||0===o)if("object"===b.type(o))b.merge(f,o.nodeType?[o]:o);else if(Nt.test(o)){s=s||p.appendChild(t.createElement("div")),l=(bt.exec(o)||["",""])[1].toLowerCase(),c=St[l]||St._default,s.innerHTML=c[1]+o.replace(vt,"<$1></$2>")+c[2],i=c[0];while(i--)s=s.lastChild;if(!b.support.leadingWhitespace&&yt.test(o)&&f.push(t.createTextNode(yt.exec(o)[0])),!b.support.tbody){o="table"!==l||xt.test(o)?"<table>"!==c[1]||xt.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;while(i--)b.nodeName(u=o.childNodes[i],"tbody")&&!u.childNodes.length&&o.removeChild(u)
}b.merge(f,s.childNodes),s.textContent="";while(s.firstChild)s.removeChild(s.firstChild);s=p.lastChild}else f.push(t.createTextNode(o));s&&p.removeChild(s),b.support.appendChecked||b.grep(Ft(f,"input"),Pt),h=0;while(o=f[h++])if((!r||-1===b.inArray(o,r))&&(a=b.contains(o.ownerDocument,o),s=Ft(p.appendChild(o),"script"),a&&Mt(s),n)){i=0;while(o=s[i++])kt.test(o.type||"")&&n.push(o)}return s=null,p},cleanData:function(e,t){var n,r,o,a,s=0,l=b.expando,u=b.cache,d=b.support.deleteExpando,p=b.event.special;for(;null!=(n=e[s]);s++)if((t||b.acceptData(n))&&(o=n[l],a=o&&u[o])){if(a.events)for(r in a.events)p[r]?b.event.remove(n,r):b.removeEvent(n,r,a.handle);u[o]&&(delete u[o],d?delete n[l]:typeof n.removeAttribute!==i?n.removeAttribute(l):n[l]=null,c.push(o))}}});var qt,Wt,$t,It=/alpha\([^)]*\)/i,Rt=/opacity\s*=\s*([^)]*)/,zt=/^(top|right|bottom|left)$/,Xt=/^(none|table(?!-c[ea]).+)/,Ut=/^margin/,Vt=RegExp("^("+x+")(.*)$","i"),Jt=RegExp("^("+x+")(?!px)[a-z%]+$","i"),Qt=RegExp("^([+-])=("+x+")","i"),Yt={BODY:"block"},Kt={position:"absolute",visibility:"hidden",display:"block"},Gt={letterSpacing:0,fontWeight:400},Zt=["Top","Right","Bottom","Left"],en=["Webkit","O","Moz","ms"];function tn(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=en.length;while(i--)if(t=en[i]+n,t in e)return t;return r}function nn(e,t){return e=t||e,"none"===b.css(e,"display")||!b.contains(e.ownerDocument,e)}function rn(e,t){var n,r,i,o=[],a=0,s=e.length;for(;s>a;a++)r=e[a],r.style&&(o[a]=b._data(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&nn(r)&&(o[a]=b._data(r,"olddisplay",ln(r.nodeName)))):o[a]||(i=nn(r),(n&&"none"!==n||!i)&&b._data(r,"olddisplay",i?n:b.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}b.fn.extend({css:function(e,n){return b.access(this,function(e,n,r){var i,o,a={},s=0;if(b.isArray(n)){for(o=Wt(e),i=n.length;i>s;s++)a[n[s]]=b.css(e,n[s],!1,o);return a}return r!==t?b.style(e,n,r):b.css(e,n)},e,n,arguments.length>1)},show:function(){return rn(this,!0)},hide:function(){return rn(this)},toggle:function(e){var t="boolean"==typeof e;return this.each(function(){(t?e:nn(this))?b(this).show():b(this).hide()})}}),b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=$t(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":b.support.cssFloat?"cssFloat":"styleFloat"},style:function(e,n,r,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,s,l=b.camelCase(n),u=e.style;if(n=b.cssProps[l]||(b.cssProps[l]=tn(u,l)),s=b.cssHooks[n]||b.cssHooks[l],r===t)return s&&"get"in s&&(o=s.get(e,!1,i))!==t?o:u[n];if(a=typeof r,"string"===a&&(o=Qt.exec(r))&&(r=(o[1]+1)*o[2]+parseFloat(b.css(e,n)),a="number"),!(null==r||"number"===a&&isNaN(r)||("number"!==a||b.cssNumber[l]||(r+="px"),b.support.clearCloneStyle||""!==r||0!==n.indexOf("background")||(u[n]="inherit"),s&&"set"in s&&(r=s.set(e,r,i))===t)))try{u[n]=r}catch(c){}}},css:function(e,n,r,i){var o,a,s,l=b.camelCase(n);return n=b.cssProps[l]||(b.cssProps[l]=tn(e.style,l)),s=b.cssHooks[n]||b.cssHooks[l],s&&"get"in s&&(a=s.get(e,!0,r)),a===t&&(a=$t(e,n,i)),"normal"===a&&n in Gt&&(a=Gt[n]),""===r||r?(o=parseFloat(a),r===!0||b.isNumeric(o)?o||0:a):a},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),e.getComputedStyle?(Wt=function(t){return e.getComputedStyle(t,null)},$t=function(e,n,r){var i,o,a,s=r||Wt(e),l=s?s.getPropertyValue(n)||s[n]:t,u=e.style;return s&&(""!==l||b.contains(e.ownerDocument,e)||(l=b.style(e,n)),Jt.test(l)&&Ut.test(n)&&(i=u.width,o=u.minWidth,a=u.maxWidth,u.minWidth=u.maxWidth=u.width=l,l=s.width,u.width=i,u.minWidth=o,u.maxWidth=a)),l}):o.documentElement.currentStyle&&(Wt=function(e){return e.currentStyle},$t=function(e,n,r){var i,o,a,s=r||Wt(e),l=s?s[n]:t,u=e.style;return null==l&&u&&u[n]&&(l=u[n]),Jt.test(l)&&!zt.test(n)&&(i=u.left,o=e.runtimeStyle,a=o&&o.left,a&&(o.left=e.currentStyle.left),u.left="fontSize"===n?"1em":l,l=u.pixelLeft+"px",u.left=i,a&&(o.left=a)),""===l?"auto":l});function on(e,t,n){var r=Vt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function an(e,t,n,r,i){var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;for(;4>o;o+=2)"margin"===n&&(a+=b.css(e,n+Zt[o],!0,i)),r?("content"===n&&(a-=b.css(e,"padding"+Zt[o],!0,i)),"margin"!==n&&(a-=b.css(e,"border"+Zt[o]+"Width",!0,i))):(a+=b.css(e,"padding"+Zt[o],!0,i),"padding"!==n&&(a+=b.css(e,"border"+Zt[o]+"Width",!0,i)));return a}function sn(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=Wt(e),a=b.support.boxSizing&&"border-box"===b.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=$t(e,t,o),(0>i||null==i)&&(i=e.style[t]),Jt.test(i))return i;r=a&&(b.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+an(e,t,n||(a?"border":"content"),r,o)+"px"}function ln(e){var t=o,n=Yt[e];return n||(n=un(e,t),"none"!==n&&n||(qt=(qt||b("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(t.documentElement),t=(qt[0].contentWindow||qt[0].contentDocument).document,t.write("<!doctype html><html><body>"),t.close(),n=un(e,t),qt.detach()),Yt[e]=n),n}function un(e,t){var n=b(t.createElement(e)).appendTo(t.body),r=b.css(n[0],"display");return n.remove(),r}b.each(["height","width"],function(e,n){b.cssHooks[n]={get:function(e,r,i){return r?0===e.offsetWidth&&Xt.test(b.css(e,"display"))?b.swap(e,Kt,function(){return sn(e,n,i)}):sn(e,n,i):t},set:function(e,t,r){var i=r&&Wt(e);return on(e,t,r?an(e,n,r,b.support.boxSizing&&"border-box"===b.css(e,"boxSizing",!1,i),i):0)}}}),b.support.opacity||(b.cssHooks.opacity={get:function(e,t){return Rt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=b.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===b.trim(o.replace(It,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=It.test(o)?o.replace(It,i):o+" "+i)}}),b(function(){b.support.reliableMarginRight||(b.cssHooks.marginRight={get:function(e,n){return n?b.swap(e,{display:"inline-block"},$t,[e,"marginRight"]):t}}),!b.support.pixelPosition&&b.fn.position&&b.each(["top","left"],function(e,n){b.cssHooks[n]={get:function(e,r){return r?(r=$t(e,n),Jt.test(r)?b(e).position()[n]+"px":r):t}}})}),b.expr&&b.expr.filters&&(b.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight||!b.support.reliableHiddenOffsets&&"none"===(e.style&&e.style.display||b.css(e,"display"))},b.expr.filters.visible=function(e){return!b.expr.filters.hidden(e)}),b.each({margin:"",padding:"",border:"Width"},function(e,t){b.cssHooks[e+t]={expand:function(n){var r=0,i={},o="string"==typeof n?n.split(" "):[n];for(;4>r;r++)i[e+Zt[r]+t]=o[r]||o[r-2]||o[0];return i}},Ut.test(e)||(b.cssHooks[e+t].set=on)});var cn=/%20/g,dn=/\[\]$/,pn=/\r?\n/g,fn=/^(?:submit|button|image|reset|file)$/i,hn=/^(?:input|select|textarea|keygen)/i;b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=b.prop(this,"elements");return e?b.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!b(this).is(":disabled")&&hn.test(this.nodeName)&&!fn.test(e)&&(this.checked||!Tt.test(e))}).map(function(e,t){var n=b(this).val();return null==n?null:b.isArray(n)?b.map(n,function(e){return{name:t.name,value:e.replace(pn,"\r\n")}}):{name:t.name,value:n.replace(pn,"\r\n")}}).get()}}),b.param=function(e,n){var r,i=[],o=function(e,t){t=b.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(n===t&&(n=b.ajaxSettings&&b.ajaxSettings.traditional),b.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,function(){o(this.name,this.value)});else for(r in e)gn(r,e[r],n,o);return i.join("&").replace(cn,"+")};function gn(e,t,n,r){var i;if(b.isArray(t))b.each(t,function(t,i){n||dn.test(e)?r(e,i):gn(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==b.type(t))r(e,t);else for(i in t)gn(e+"["+i+"]",t[i],n,r)}b.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){b.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),b.fn.hover=function(e,t){return this.mouseenter(e).mouseleave(t||e)},e.jQuery=e.$=b,"function"==typeof define&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return b})})(window);
(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD
        define('Chitin',['_', 'jquery', 'exports'], function(_, $, exports) {
            // Export global even in AMD case in case this script is loaded with
            // others that may still expect a global Chitin.
            root.Chitin = factory(root, exports, _, $);
        });
    } else {
        // Browser globals
        root.Chitin = factory(root, {}, root._, (root.jQuery || root.Zepto));
  }
}(this, function (root, Chitin, _, $) {
    

    /**
     * @author <a href="mailto:doctor.hogart@gmail.com">Konstantin Kitmanov</a>
     * May be freely distributed under the MIT license.
     */

    // conflict management
    var previousChitin = root.Chitin;

    Chitin.noConflict = function () {
        root.Chitin = previousChitin;
        return this;
    };

    // `extend` code below borrowed from Backbone.js. 'Coz it's awesome!

    var extend = function (protoProps, staticProps) {
        var parent = this;
        var child;

        // The constructor function for the new subclass is either defined by you
        // (the "constructor" property in your `extend` definition), or defaulted
        // by us to simply call the parent's constructor.
        if (protoProps && _.has(protoProps, 'constructor')) {
            child = protoProps.constructor;
        } else {
            child = function () {
                return parent.apply(this, arguments);
            };
        }

        // Add static properties to the constructor function, if supplied.
        _.extend(child, parent, staticProps);

        // Set the prototype chain to inherit from `parent`, without calling
        // `parent`'s constructor function.
        var Surrogate = function () {
            this.constructor = child;
        };
        Surrogate.prototype = parent.prototype;
        child.prototype = new Surrogate;

        // Add prototype properties (instance properties) to the subclass,
        // if supplied.
        if (protoProps) {
            _.extend(child.prototype, protoProps);
        }

        // Set a convenience property in case the parent's prototype is needed
        // later.
        child.__super__ = parent.prototype;

        return child;
    };

    // Events code below borrowed from Backbone.js. 'Coz it's awesome!

    // Regular expression used to split event strings.
    var eventSplitter = /\s+/,
        slice = [].slice,
        reEventSplitter = /^(\S+)\s*(.*)$/;

    // Implement fancy features of the Events API such as multiple event
    // names `"change blur"` and jQuery-style event maps `{change: action}`
    // in terms of the existing API.
    var eventsApi = function (obj, action, name, rest) {
        if (!name) return true;
        if (typeof name === 'object') {
            for (var key in name) {
                obj[action].apply(obj, [key, name[key]].concat(rest));
            }
        } else if (eventSplitter.test(name)) {
            var names = name.split(eventSplitter);
            for (var i = 0, l = names.length; i < l; i++) {
                obj[action].apply(obj, [names[i]].concat(rest));
            }
        } else {
            return true;
        }
    };

    // Optimized internal dispatch function for triggering events. Tries to
    // keep the usual cases speedy (most Backbone events have 3 arguments).
    var triggerEvents = function (events, args) {
        var ev, i = -1, l = events.length;
        switch (args.length) {
            case 0:
                while (++i < l) (ev = events[i]).callback.call(ev.ctx);
                return;
            case 1:
                while (++i < l) (ev = events[i]).callback.call(ev.ctx, args[0]);
                return;
            case 2:
                while (++i < l) (ev = events[i]).callback.call(ev.ctx, args[0], args[1]);
                return;
            case 3:
                while (++i < l) (ev = events[i]).callback.call(ev.ctx, args[0], args[1], args[2]);
                return;
            default:
                while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
        }
    };

    // A module that can be mixed in to *any object* in order to provide it with
    // custom events. You may bind with `on` or remove with `off` callback
    // functions to an event; `trigger`-ing an event fires all callbacks in
    // succession.
    var Events = {

        // Bind one or more space separated events, or an events map,
        // to a `callback` function. Passing `"all"` will bind the callback to
        // all events fired.
        on: function (name, callback, context) {
            if (!(eventsApi(this, 'on', name, [callback, context]) && callback)) return this;
            this._events || (this._events = {});
            var list = this._events[name] || (this._events[name] = []);
            list.push({callback: callback, context: context, ctx: context || this});
            return this;
        },

        // Bind events to only be triggered a single time. After the first time
        // the callback is invoked, it will be removed.
        once: function (name, callback, context) {
            if (!(eventsApi(this, 'once', name, [callback, context]) && callback)) return this;
            var self = this;
            var once = _.once(function () {
                self.off(name, once);
                callback.apply(this, arguments);
            });
            once._callback = callback;
            this.on(name, once, context);
            return this;
        },

        // Remove one or many callbacks. If `context` is null, removes all
        // callbacks with that function. If `callback` is null, removes all
        // callbacks for the event. If `name` is null, removes all bound
        // callbacks for all events.
        off: function (name, callback, context) {
            var list, ev, events, names, i, l, j, k;
            if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
            if (!name && !callback && !context) {
                this._events = {};
                return this;
            }

            names = name ? [name] : _.keys(this._events);
            for (i = 0, l = names.length; i < l; i++) {
                name = names[i];
                if (list = this._events[name]) {
                    events = [];
                    if (callback || context) {
                        for (j = 0, k = list.length; j < k; j++) {
                            ev = list[j];
                            if ((callback && callback !== ev.callback &&
                                callback !== ev.callback._callback) ||
                                (context && context !== ev.context)) {
                                events.push(ev);
                            }
                        }
                    }
                    this._events[name] = events;
                }
            }

            return this;
        },

        // Trigger one or many events, firing all bound callbacks. Callbacks are
        // passed the same arguments as `trigger` is, apart from the event name
        // (unless you're listening on `"all"`, which will cause your callback to
        // receive the true name of the event as the first argument).
        trigger: function (name) {
            if (!this._events) return this;
            var args = slice.call(arguments, 1);
            if (!eventsApi(this, 'trigger', name, args)) return this;
            var events = this._events[name];
            var allEvents = this._events.all;
            if (events) triggerEvents(events, args);
            if (allEvents) triggerEvents(allEvents, arguments);
            return this;
        },

        // An inversion-of-control version of `on`. Tell *this* object to listen to
        // an event in another object ... keeping track of what it's listening to.
        listenTo: function (obj, name, callback) {
            var listeners = this._listeners || (this._listeners = {});
            var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));
            listeners[id] = obj;
            obj.on(name, typeof name === 'object' ? this : callback, this);
            return this;
        },

        // Tell this object to stop listening to either specific events ... or
        // to every object it's currently listening to.
        stopListening: function (obj, name, callback) {
            var listeners = this._listeners;
            if (!listeners) return;
            if (obj) {
                obj.off(name, typeof name === 'object' ? this : callback, this);
                if (!name && !callback) delete listeners[obj._listenerId];
            } else {
                if (typeof name === 'object') callback = this;
                for (var id in listeners) {
                    listeners[id].off(name, callback, this);
                }
                this._listeners = {};
            }
            return this;
        }
    };

    // Root of hierarchy. Automatically calls initialize method
    // which combines this.defaults and passed options into this.params
    var Abstract = Chitin.Abstract = function (options) {
        this.initialize(options);
    };

    Abstract.prototype = {
        initialize: function (options) {
            this.params = _.extend({}, this.defaults || {}, options || {});
        }
    };

    Abstract.extend = extend;

    // Root «class» with built-in Events.
    var Observable = Chitin.Observable = Abstract.extend();
    _.extend(Observable.prototype, Events);


    var Widget = Chitin.Widget = Observable.extend({
        $: function (selector) {
            return this.$el.find(selector);
        },

        // override this method to change how you find your templates
        _getTplNode: function (tpl) {
            return $('script.js-tpl-' + tpl)
        },

        // override this method to change how do you operate your templates
        getTemplate: function () {
            var tpl = _.result(this, 'tpl');
            if (!tpl) {
                throw new Error('No tpl property defined');
            }

            var tplNode = this._getTplNode(tpl);
            if (tplNode.length !== 1) {
                throw new Error('Invalid tpl selector: "' + tpl + '" — no such nodes or too many.');
            }

            return _.template(tplNode.html());
        },

        render: function (data) {
            this.$el.html(this.template(data));

            this.onRender();
        },

        onRender: function () {
            this.delegateEvents();
            this._ensureUI();
        },

        _delegateEvents: function (events) {
            var emitter = this.$el;
            this._undelegateEvents();

            for (var key in events) {
                var method = events[key];
                if (!_.isFunction(method)) {
                    method = this[events[key]];
                }
                if (!method) {
                    throw new Error('Method "' + events[key] + '" does not exist');
                }
                var match = key.match(reEventSplitter),
                    eventName = match[1],
                    selector = match[2];
                method = _.bind(method, this);
                eventName += '.delegateEvents' + this.cid;
                if (selector === '') {
                    emitter.on(eventName, method);
                } else {
                    emitter.on(eventName, selector, method);
                }
            }
        },

        _undelegateEvents: function() {
            this.$el.off('.delegateEvents' + this.cid);
        },

        delegateEvents: function (events) {
            if (!(events || (events = _.result(this, 'events')))) return;

            this._delegateEvents(events);
        },

        delegateBusEvents: function (busEvents) {
            this.stopListening(this.bus);

            if (!(busEvents || (busEvents = _.result(this, 'busEvents')))) return;

            _.each(busEvents, function (method, eventName) {
                var fn;

                if (_.isFunction(method)) {
                    fn = method
                } else if (_.isString(method) && this[method]) {
                    fn = this[method]
                } else {
                    throw new Error('Method "' + method + '" does not exist or invalid')
                }

                this.listenTo(this.bus, eventName, fn)
            }, this);
        },

        ensureSubWidgets: function (subWidgets) {
            if (!(subWidgets || (subWidgets = _.result(this, 'subWidgets')))) return;

            var cls,
                options;
            _.each(subWidgets, function (widgetClass, selector) {
                if (_.isArray(widgetClass)) {
                    cls = widgetClass[0];
                    options = {};

                    if (_.isFunction(widgetClass[1])) {
                        options = widgetClass[1].call(this)
                    } else if (_.isString(widgetClass[1])) {
                        options = this[widgetClass[1]]
                    }
                } else {
                    cls = widgetClass;
                    options = {};
                }
                this.registerChild(selector, cls, options);
            }, this);
        },

        _ensureUI: function (ui) {
            ui || (ui = _.result(this, '_ui'));

            if (!ui) { // nothing to do here anymore
                return;
            }

            this.ui = {};

            _.each(ui, function (selector, name) {
                this.ui[name] = this.$(selector);
            }, this)
        },

        registerChild: function (selector, widgetClass, options) {
            this.children[selector] = new widgetClass(
                _.extend({
                    el: this.$(selector),
                    bus: this.bus
                }, options)
            );
        },

        unregisterChild: function (name) {
            var child = this.children[name];
            if (child) {
                child.destroy();
                delete this.children[name];
            }
        },

        initialize: function(options) {
            Widget.__super__.initialize.call(this, options);

            this.cid = _.uniqueId('widget');
            this.$el = $(options.el);
            this.template = this.getTemplate();

            this.bus = this.params.bus;
            this.delegateEvents();
            this.delegateBusEvents();

            this.children = {};
        },

        destroy: function () {
            this._undelegateEvents();
            this.off();
            this.stopListening();

            _.each(this.children, function (child, name) {
                this.unregisterChild(name);
            }, this);

            this.$el.html('');
        }
    });

    var Application = Chitin.Application = Observable.extend({
        defaults: {
            immediateStart: true,
            rootWidget: Widget,
            rootNode: 'html'
        },

        initialize: function (options) {
            Application.__super__.initialize.call(this, options);

            this.params.immediateStart && this.start();
        },

        start: function () {
            this.root = new this.params.rootWidget({
                bus: this,
                el: this.params.rootNode
            });

            return this;
        }
    });

    return Chitin;
}));
define('Storable',
    [
        'Chitin',
        '_'
    ],
    function (Chitin, _) {
        /**
         * Something storable in localStorage via {@link Storage}
         * @class Storable
         */
        var Storable = Chitin.Observable.extend({
            initialize: function (options) {
                Storable.__super__.initialize.call(this, options);

                this.storage = new this.params.storage({key: this.params.key});
                this.attrs = _.extend({}, this.params.attrs, this.storage.loadDump());
            },

            get: function (key, defaultVal) {
                return key in this.attrs ? this.attrs[key] : defaultVal;
            },

            set: function (attrs, options) {
                _.extend(this.attrs, attrs);
                this.save();

                options || (options = {silent: false});

                if (!options.silent) {
                    this.trigger('update');
                }

                return this;
            },

            reset: function (options) {
                this.attrs = {};
                this.save();

                options || (options = {silent: false});

                if (!options.silent) {
                    this.trigger('update');
                }

                return this;
            },

            save: function () {
                this.storage.save(this.attrs);
            }
        });

        return Storable;
    }
);
define('Storage',
    [
        'Chitin'
    ],
    function (Chitin) {
        /**
         * Abstract storage (in localStorage)
         * @class Storage
         */
        var Storage = Chitin.Abstract.extend({
            defaults: {
                defaultVal: {}
            },

            initialize: function (options) {
                Storage.__super__.initialize.call(this, options);
            },

            save: function (data) {
                localStorage.setItem(this.params.key, JSON.stringify(data));
            },

            loadDump: function() {
                var loaded = localStorage.getItem(this.params.key),
                    result = this.params.defaultVal;

                if (loaded) {
                    try {
                        result = JSON.parse(loaded)
                    }
                    catch(e) {}
                }

                return result;
            }
        });

        return Storage;
    }
);
define('Decks',
    [
        'Storable',
        'Storage',
        '_'
    ],
    function (Storable, Storage, _) {
        /**
         * Storing decks in appropriate way
         * @extends Storable
         * @class Decks
         */
        var Decks = Storable.extend({
            defaults: {
                key: 'decks',
                attrs: [],
                storage: Storage
            },

            initialize: function (options) {
                Storable.__super__.initialize.call(this, options);

                this.storage = new this.params.storage({key: this.params.key, defaultVal: []});

                this.attrs = [];
                this.builtIns = options.attrs;
                this.attrs.push.apply(this.attrs, this.builtIns);

                var dump = this.storage.loadDump();

                this.attrs.push.apply(this.attrs, dump);
            },

            save: function () {
                var attrs = _.filter(
                    this.attrs,
                    function (deck) {
                        return !(!deck || deck.builtIn);
                    }
                );

                this.storage.save(attrs);

                this.attrs = [];
                this.attrs.push.apply(this.attrs, this.builtIns);
                this.attrs.push.apply(this.attrs, attrs);
            },

            deleteDeck: function (deckIndex, options) {
                this.attrs[deckIndex] = null;

                options = options || {silent: false};
                if (!options.silent) {
                    this.save();

                    this.trigger('update');
                }
            }
        }, {
            createDeck: function () {
                return {
                    name: '',
                    description: '',
                    tags: [],
                    content: [],
                    testable: false,

                    isNew: true
                }
            }
        });

        return Decks;
    }
);
define('Preferences',
    [
        'Storable',
        'Storage'
    ],
    function (Storable, Storage) {
        /**
         * @extends {Storable}
         * @class Preferences
         */
        var Preferences = Storable.extend({
            defaults: {
                key: 'prefs',
                storage: Storage,
                attrs: {
                    showCorrections: true,
                    hiddenDecks: {}
                }
            },

            getPair: function () {
                var pair = this.attrs.pair;
                if (!pair) {
                    return false
                }

                if (pair.native && pair.learn) {
                    return pair.native + '-' + pair.learn
                } else {
                    return false;
                }
            },

            setPair: function (data) {
                if (data.native && data.learn) {
                    this.set({pair: {native: data.native, learn: data.learn}});
                }
            },

            hideDeck: function (deckId) {
                this.attrs.hiddenDecks[deckId] = true;
                this.save();
            },

            unhideDeck: function (deckId) {
                delete this.attrs.hiddenDecks[deckId];
                this.save();
            }
        });

        return Preferences;
    }
);
define('Widget/Abstract',
    [
        'Chitin',
        '_'
    ],
    function (Chitin, _) {
        var WidgetAbstract = Chitin.Widget.extend({
            render: function (data) {
                data = _.extend(data, {locale: this.bus.locale});

                WidgetAbstract.__super__.render.call(this, data);
            }
        });

        return WidgetAbstract;
    }
);
define('Widget/LangSelect',
    [
        'Widget/Abstract'
    ],
    function (WidgetAbstract) {
        var WidgetLangSelect = WidgetAbstract.extend({
            tpl: 'langSelect',

            initialize: function (options) {
                WidgetLangSelect.__super__.initialize.call(this, options);

                this.render({
                    lang: this.bus.lang,
                    langs: {
                        en: 'English',
                        ru: 'Русский'
                    }
                });
            }
        });

        return WidgetLangSelect;
    }
);
(function($) {
    

    /**
     * @author <a href="mailto:doctor.hogart@gmail.com">Konstantin Kitmanov</a>
     * May be freely distributed under the MIT license.
     */

    /**
     * Converts form data to JSON
     * can also dehydrate converted data — pass dehydrationMap as hash of fieldName: conversionFn and enjoy
     * @param {Object} [dehydrationMap={}]
     */
    $.fn.form2JSON = function(dehydrationMap) {
        dehydrationMap = dehydrationMap || {};

        var serialized = this.serializeArray(),
            result = {},
            chunk;

        for (var i = 0, len = serialized.length; i < len; i++) {
            chunk = serialized[i];

            if (chunk.name in dehydrationMap) {
                chunk.value = dehydrationMap[chunk.name](chunk.value);
            }

            if (result[chunk.name]) {
                if (!$.isArray(result[chunk.name])) {
                    result[chunk.name] = [result[chunk.name]];
                }

                result[chunk.name].push(chunk.value);
            }
            else {
                result[chunk.name] = chunk.value;
            }
        }

        return result;
    };
})(jQuery);
define("lib/vendor/jquery.form2JSON", function(){});

define('Widget/Pristine',
    [
        'Widget/Abstract',
        'Widget/LangSelect',
        'lib/vendor/jquery.form2JSON'
    ],
    function (WidgetAbstract, WidgetLangSelect) {
        

        var Pristine = WidgetAbstract.extend({
            tpl: 'pristine',

            events: {
                'submit form': 'onSubmit'
            },

            subWidgets: {
                '.js-changeLang': WidgetLangSelect
            },

            initialize: function (options) {
                Pristine.__super__.initialize.call(this, options);

                this.render({});
                this.ensureSubWidgets();
            },

            onSubmit: function (evt) {
                evt.preventDefault();

                var data = this.$('form').form2JSON();

                this.bus.trigger('languagesChosen', data);
            }
        });

        return Pristine;
    }
);
define('Widget/Nav',
    [
        'Widget/Abstract'
    ],
    function (WidgetAbstract) {
        

        var WidgetNav = WidgetAbstract.extend({
            tpl: 'nav',

            events: {
                'click .js-deckItem': 'onDeckClick',
                'click .js-addDeck': 'onAddDeck',
                'click .js-settingsItem': 'onSettings',
                'click .js-decksItem': 'onDeckList',
                'click .js-help': 'onHelp'
            },

            initialize: function (options) {
                WidgetNav.__super__.initialize.call(this, options);

                this.listenTo(this.bus.decks, 'update', this.rr);

                this.active = false;

                this.rr();
            },

            rr: function () {
                this.decks = this.params.decks.attrs;

                this.render({
                    hiddenDecks: this.bus.prefs.attrs.hiddenDecks,
                    decks: this.decks
                });
            },

            onDeckClick: function (evt) {
                evt.preventDefault();

                var target = $(evt.target).closest('li'),
                    index = parseInt(target.attr('data-id')),
                    deck = [index, this.decks[index]];

                this._toggleDD(false);
                this.bus.trigger('displayDeck', deck);
            },

            onAddDeck: function (evt) {
                evt.preventDefault();

                this._toggleDD(false);
                this.bus.trigger('addDeck');
            },

            onSettings: function (evt) {
                evt.preventDefault();

                this._toggleDD(false);
                this.bus.trigger('displaySettings');
            },

            onDeckList: function (evt) {
                evt.preventDefault();

                var target = $(evt.target).closest('.js-decksItem');

                if (target.hasClass('js-header')) {
                    if (document.documentElement.clientWidth >= 980) {
                        this.bus.trigger('displayDecks');
                    } else {
                        this._toggleDD(!this.active);
                    }
                } else {
                    this._toggleDD(false);
                    this.bus.trigger('displayDecks');
                }
            },

            onHelp: function (evt) {
                evt.preventDefault();

                this._toggleDD(false);
                this.bus.trigger('displayStart');
            },

            _toggleDD: function (show) {
                this.active = !!show;
                this.$el.toggleClass('active', !!show);
            }
        });

        return WidgetNav;
    }
);
define('Widget/Start',
    [
        'Widget/Abstract'
    ],
    function (WidgetAbstract) {
        

        var WidgetStart = WidgetAbstract.extend({
            tpl: 'start',

            _ui: {
                toggled: '.js-content, .js-hide, .js-show'
            },

            events: {
                'click button': 'triggerVerbosity'
            },

            initialize: function (options) {
                WidgetStart.__super__.initialize.call(this, options);

                this.verbosity = this.bus.prefs.get('showHelp', true);

                this.render({
                    verbosity: this.verbosity
                });
            },

            triggerVerbosity: function () {
                this.verbosity = !this.verbosity;

                this.ui.toggled.toggleClass('hidden');

                this.bus.prefs.set({showHelp: this.verbosity});
            }
        });

        return WidgetStart;
    }
);
define('Widget/EditDeck',
    [
        'Widget/Abstract',
        '_',
        'lib/vendor/jquery.form2JSON'
    ],
    function (WidgetAbstract, _) {
        

        var WidgetEditDeck = WidgetAbstract.extend({
            tpl: 'editDeck',

            _ui: {
                frm: 'form',
                cardList: '.js-cardList',
                newQuestion: '.js-addCard .js-question',
                newAnswer: '.js-addCard .js-answer',

                dumpDeck: '.js-dumpDeck',
                dumpDeckDumpster: '.js-dumpDeck .js-dumpster',
                dumpDeckTA: '.js-dumpDeck textarea',
                dumpDeckDone: '.js-dumpDeck .js-done',

                dumpCards: '.js-dumpCards',
                dumpCardsDumpster: '.js-dumpCards .js-dumpster',
                dumpCardsTA: '.js-dumpCards textarea',
                dumpCardsDone: '.js-dumpCards .js-done'
            },

            events: {
                'submit form': 'onSubmit',
                'reset form': 'onReset',
                'click .js-confirm': 'addCard',
                'click .js-deleteCard': 'deleteCard',

                'click .js-dump .js-import, .js-dump .js-export': 'toggleDumpster',
                'click .js-dump .js-done': 'doneDumpster'
            },

            initialize: function (options) {
                WidgetEditDeck.__super__.initialize.call(this, options);

                this.deck = this.params.deck ? this.params.deck[1] : this.bus.createDeck();
                this.id = this.params.deck ? this.params.deck[0] : null;

                this.renderDeck();
            },

            renderDeck: function () {
                var tplData = {
                    deck: this.deck
                };

                tplData.cardsDump = _.map(this.deck.content, function (card) {
                    return card.q + '\t' + card.a
                }).join('\n');

                this.render(tplData);
            },

            onSubmit: function (evt) {
                evt.preventDefault();

                var deckRaw = this.ui.frm.form2JSON({
                    tags: function (tags) {
                        return _.map(tags.split(','), function (tag) {
                            return tag.trim()
                        })
                    }
                });

                deckRaw.testable = !!deckRaw.testable;

                deckRaw.content = [];
                _.each(deckRaw.cardq, function (cardQuestion, index) {
                    var q = cardQuestion.trim(),
                        a = deckRaw.carda[index].trim();

                    if (q && a) {
                        deckRaw.content.push({
                            q: q,
                            a: a
                        })
                    }
                });

                var deckContent = _.pick(deckRaw, ['name', 'description', 'tags', 'content']);
                if (_.isNull(this.id)) {
                    this.bus.decks.attrs.push(deckContent);
                    this.bus.decks.set({}); // trick to force save
                } else {
                    var deck = {};
                    deck[this.id] = deckContent;

                    this.bus.decks.set(deck);
                }

                this.bus.decks.trigger('update');

                this.bus.trigger('displayStart');
            },

            onReset: function (evt) {
                evt.preventDefault();

                this.renderDeck();

                return false;
            },

            addCard: function () {
                var newCard = this.$('.js-cardTemplate').clone();
                newCard.find('.js-question').val( this.ui.newQuestion.val() );
                newCard.find('.js-answer').val( this.ui.newAnswer.val() );

                newCard.appendTo(this.ui.cardList).removeClass('hidden js-cardTemplate');

                this.ui.newQuestion.val('');
                this.ui.newAnswer.val('');
            },

            deleteCard: function (evt) {
                var trgt = $(evt.target),
                    card = trgt.closest('.js-cardForm');

                card.remove();
            },

            toggleDumpster: function (evt) {
                var trgt = $(evt.target),
                    dumpster = trgt.closest('.js-dump').find('.js-dumpster');

                trgt.toggleClass('active');
                dumpster.toggleClass('hidden');
            },

            doneDumpster: function (evt) {
                var trgt = $(evt.target),
                    container = trgt.closest('.js-dump'),
                    ta = container.find('textarea'),
                    isDeck = container.hasClass('js-dumpDeck');

                var content = ta.val().trim();

                if (!content) {
                    this.toggleDumpster(evt);
                    return;
                } else {
                    if (isDeck) {
                        var deckData;
                        try {
                            deckData = JSON.parse(content);
                        } catch (e) {
                            alert(this.bus.locale.invalidFormat);
                            return
                        }

                        this.deck = _.extend(this.deck, deckData);
                    } else {
                        var cards = _.map(content.split('\n'), function (line) {
                            var parts = line.split(/\t|    /mg);
                            return {
                                q: parts[0],
                                a: parts[1]
                            }
                        });

                        this.deck.content = _.extend(this.deck.content, cards);
                    }

                    this.renderDeck();

                    return;
                }
            }
        });

        return WidgetEditDeck;
    }
);
define('Widget/DeckList',
    [
        'Widget/Abstract',
        '_'
    ],
    function (WidgetAbstract, _) {
        

        var WidgetDeckList = WidgetAbstract.extend({
            tpl: 'deckList',

            events: {
                'change .js-selectAll': 'selectAll',
                'change tbody input[type="checkbox"]': 'selectAny',
                'click .js-hide': 'onHide',
                'click .js-show': 'onShow',
                'click .js-export': 'onExport',
                'click .js-done': function () { this.ui.table.removeClass('deckList-full'); },
                'click textarea': function () { this.ui.dump[0].select(); },

                'click .js-editDeck': 'onEditDeck',
                'click .js-hideDeck': 'onHideDeck',
                'click .js-unhideDeck': 'onShowDeck'
            },

            _ui: {
                table: 'table',
                selectAll: '.js-selectAll',
                boxes: 'tbody input[type="checkbox"]',
                buttons: 'thead button',
                dump: 'textarea'
            },

            initialize: function (options) {
                WidgetDeckList.__super__.initialize.call(this, options);

                this.rr();

                this.listenTo(this.bus.decks, 'update', this.rr);
            },

            rr: function () {
                this.render({
                    decks: this.bus.decks.attrs,
                    hiddenDecks: this.bus.prefs.attrs.hiddenDecks
                });
            },

            selectAll: function () {
                var checked = this.ui.selectAll.prop('checked');

                this.ui.boxes.prop('checked', checked);

                this._enableButtons(checked);
            },

            selectAny: function () {
                this._enableButtons(this._getChecked().length)
            },

            onHide: function () {
                var checked = this._getChecked(),
                    bus = this.bus,
                    hideDeck = _.bind(this._hideDeck, this);

                checked.each(function (index, node) {
                    var deck = bus.decks.attrs[index];

                    hideDeck(deck, index);
                });

                bus.decks.save();
                bus.decks.trigger('update');
            },

            onShow: function () {
                var checked = this._getChecked(),
                    bus = this.bus;

                checked.each(function (index, node) {
                    var deck = bus.decks.attrs[index];
                    if (deck.builtIn) {
                        bus.unhideDeck(deck.id);
                    }
                });

                bus.decks.trigger('update');
            },

            onExport: function () {
                var checked = this._getChecked(),
                    bus = this.bus,
                    exportArr = [],
                    exported = {};

                checked.each(function (index, node) {
                    exportArr.push(
                        _.omit(bus.decks.attrs[index], ['builtIn', 'id'])
                    );
                });

                exported[this.bus.pair] = exportArr;

                this.ui.table.addClass('deckList-full');
                this.ui.dump.val(JSON.stringify(exported));
            },

            onEditDeck: function (evt) {
                var tr = $(evt.target).closest('tr'),
                    id = parseInt(tr.attr('data-id')),
                    deck = this.bus.decks.attrs[id];

                this.bus.trigger('editDeck', [id, deck]);
            },

            onHideDeck: function (evt) {
                var tr = $(evt.target).closest('tr'),
                    id = parseInt(tr.attr('data-id')),
                    deck = this.bus.decks.attrs[id];

                this._hideDeck(deck, id);

                this.bus.decks.save();
                this.bus.decks.trigger('update');
            },

            onShowDeck: function (evt) {
                var tr = $(evt.target).closest('tr'),
                    id = parseInt(tr.attr('data-id')),
                    deck = this.bus.decks.attrs[id];

                this.bus.unhideDeck(deck.id);

                this.bus.decks.save();
                this.bus.decks.trigger('update');
            },

            _hideDeck: function (deck, index) {
                if (deck.builtIn) {
                    this.bus.hideDeck(deck.id);
                } else {
                    this.bus.decks.deleteDeck(index, {silent: true});
                }
            },

            _enableButtons: function (enable) {
                if (enable) {
                    this.ui.buttons.prop('disabled', false);
                } else {
                    this.ui.buttons.prop('disabled', true);
                }
            },

            _getChecked: function () {
                return this.ui.boxes.filter(':checked');
            }
        });

        return WidgetDeckList;
    }
);
define('Widget/Explore/Abstract',
    [
        'Widget/Abstract'
    ],
    function (WidgetAbstract) {
        

        var WidgetExploreAbstract = WidgetAbstract.extend({
            _ui: {
                items: '.js-card',
                progress: '.js-progress'
            },

            initialize: function (options) {
                WidgetExploreAbstract.__super__.initialize.call(this, options);

                this.currentQuestion = 0;

                this.cards = _.shuffle(_.cloneDeep(this.params.deck.content));
                this.name = this.params.deck.name;

                this.rr();
            },

            rr: function () {
                this.render({
                    name: this.name,
                    cards: this.cards,
                    current: this.currentQuestion
                });
                this._renderProgress();
            },

            /**
             * @protected
             */
            _renderProgress: function () {
                var width = 1;

                width += Math.ceil(this.currentQuestion / this.cards.length * 99);

                this.ui.progress.css({
                    width: width + '%'
                });

                this.ui.progress.text(this.currentQuestion + '/' + this.cards.length)
            },

            next: function () {
                this.ui.items.eq(this.currentQuestion).addClass('hidden');

                this.currentQuestion++;

                this._renderProgress();

                if (this.currentQuestion == this.cards.length) {
                    this.final();
                }

                this.ui.items.eq(this.currentQuestion).removeClass('hidden');
            }
        });

        return WidgetExploreAbstract;
    }
);
define('Widget/Explore/Meditation',
    [
        'Widget/Explore/Abstract'
    ],
    function (WidgetExploreAbstract) {
        

        var WidgetExploreMeditation = WidgetExploreAbstract.extend({
            tpl: 'testMeditation',

            events: {
                'click .js-next': 'next'
            },

            final: function () {
                this.$el.trigger('meditationOver');
            }
        });

        return WidgetExploreMeditation;
    }
);
define('Widget/Explore/Trial/Abstract',
    [
        'Widget/Explore/Abstract'
    ],
    function (WidgetExploreAbstract) {
        

        var WidgetTrialAbstract = WidgetExploreAbstract.extend({
            events: {
                'click .js-answer': 'onAnswer',
                'click .js-skip': 'onSkip',
                'click .js-next': 'next'
            },

            initialize: function (options) {
                this.correct = 0;
                this.wrong = 0;

                WidgetTrialAbstract.__super__.initialize.call(this, options);

                this.showCorrections = this.bus.prefs.get('showCorrections');
                this.corrections = [];
            },

            isCorrect: function (answer, correctAnswer) {
                if (this.caseSensitive) {
                    return answer == correctAnswer
                } else {
                    return answer.toLowerCase() == correctAnswer.toLowerCase()
                }
            },

            onAnswer: function (evt) {
                var trgt = $(evt.target),
                    li = trgt.closest('li'),
                    answer = this.retrieveAnswer(li),
                    correctAnswer = this.cards[this.currentQuestion].a;

                if (this.isCorrect(answer, correctAnswer)) {
                    this.correct++;
                    this.next();
                } else {
                    this.wrong++;

                    if (this.showCorrections) {
                        li.find('.js-correction').html(correctAnswer).removeClass('hidden');
                        li.find('.js-next').removeClass('hidden');
                        li.find('.js-answerBlock').addClass('hidden');
                        this.corrections.push({
                            q: this.cards[this.currentQuestion].q,
                            a: this.cards[this.currentQuestion].a,
                            w: answer
                        });
                    } else {
                        this.next();
                    }
                }
            },

            onSkip: function () {
                this.wrong++;

                this.next();
            },

            final: function () {
                var params = {
                    wrong: this.wrong,
                    correct: this.correct
                };

                if (this.corrections.length) {
                    params.corrections = this.corrections
                }

                this.$el.trigger('testComplete', params);
            }
        });

        return WidgetTrialAbstract;
    }
);
define('Widget/Explore/Trial/Test',
    [
        'Widget/Explore/Trial/Abstract',
        '_'
    ],
    function (WidgetExploreTrialAbstract, _) {
        

        var WidgetTrialTest = WidgetExploreTrialAbstract.extend({
            tpl: 'testTest',

           /**
            * Returns `amount` random unique entries from `arr`, excluding `excludeIndex`
            * @param {Array} arr
            * @param {Number} amount
            * @param {Number} excludeIndex
            * @return {Array}
            * @private
            */
            _randEntries: function(arr, amount, excludeIndex) {
                var result = [],
                    randoms = [],
                    maxRand = arr.length - 1,
                    rand;

                for (var i = 0; i < amount; i++) {
                    do {
                        rand = _.random(0, maxRand);
                    } while (_.contains(randoms, rand) || rand == excludeIndex);

                    result.push(arr[rand])
                }

                return result;
            },

            rr: function () {
                var randEntries = this._randEntries,
                    cards = this.cards,
                    tests = _.map(cards, function (card, index ) {
                        var test = {
                                q: card.q
                            },
                            answers = _.pluck(randEntries(cards, 3, index), 'a');

                        answers.push(card.a);

                        test.a = _.shuffle(answers);

                        return test;
                    });

                this.render({
                    name: this.name,
                    cards: tests,
                    currentQuestion: this.currentQuestion
                })
            },

            retrieveAnswer: function (container) {
                return container.find('input:checked').val();
            }
        });

        return WidgetTrialTest;
    }
);
define('Widget/Explore/Trial/Exam',
    [
        'Widget/Explore/Trial/Abstract'
    ],
    function (WidgetExploreTrialAbstract) {
        

        var WidgetExploreTrialExam = WidgetExploreTrialAbstract.extend({
            tpl: 'testExam',

            events: function () {
                return _.extend(
                    {},
                    WidgetExploreTrialExam.__super__.events,
                    {
                        'keyup input[type="text"]': function (evt) {
                            if (evt.keyCode == 13) {
                                this.onAnswer(evt);
                            }
                        }
                    }
                );
            },

            retrieveAnswer: function (container) {
                return container.find('input[type="text"]').val().trim();
            },

            next: function (evt) {
                WidgetExploreTrialExam.__super__.next.call(this, evt);

                if (this.currentQuestion < this.cards.length) {
                    this.ui.items.eq(this.currentQuestion).find('input[type="text"]').focus();
                }
            }
        });

        return WidgetExploreTrialExam;
    }
);
define('Widget/Score',
    [
        'Widget/Abstract'
    ],
    function (WidgetAbstract) {
        

        var WidgetScore = WidgetAbstract.extend({
            tpl: 'score',

            initialize: function (options) {
                WidgetScore.__super__.initialize.call(this, options);

                this.render({
                    congrats: this.params.congrats,
                    wrong: this.params.wrong,
                    correct: this.params.correct,
                    testable: this.params.testable,
                    corrections: this.params.corrections
                });
            }
        });

        return WidgetScore;
    }
);
define('Widget/Deck',
    [
        'Widget/Abstract',
        'Widget/Explore/Meditation',
        'Widget/Explore/Trial/Test',
        'Widget/Explore/Trial/Exam',
        'Widget/Score'
    ],
    function (WidgetAbstract, WidgetExploreMeditation, WidgetExploreTrialTest, WidgetExploreTrialExam, WidgetScore) {
        

        var WidgetDeck = WidgetAbstract.extend({
            tpl: 'deck',

            events: {
                'click .js-startMeditation': 'onStartMeditation',
                'click .js-startTest': 'onStartTest',
                'click .js-startExam': 'onStartExam',

                'change [name="showCorrections"]': 'onShowCorrectionsChange',

                'meditationOver .js-test': 'onMeditationComplete',
                'testComplete .js-test': 'onTestComplete',

                'click .js-editDeck': 'onEditDeck',
                'click .js-deleteDeck': 'onDeleteDeck',
                'click .js-hideDeck': 'onHideDeck',
                'click .js-addCard': 'onAddCard',

                'click .js-confirmAdd': 'addCard'
            },

            _ui: {
                score: '.js-score',
                showCorrections: '[name="showCorrections"]',
                addCardForm: '.js-addCardForm',
                addCardBtn: '.js-addCard'
            },

            initialize: function (options) {
                WidgetDeck.__super__.initialize.call(this, options);

                this.deck = this.params.deck[1]; // deck is sent as [id, deckObject]
                this.testable = this.deck.testable && this.deck.content.length > 3;

                this.rr();
            },

            rr: function () {
                this.render({
                    deck: this.deck,
                    testable: this.testable,
                    showCorrections: this.bus.prefs.get('showCorrections')
                });

                this.setState('browsing');
            },

            onStartMeditation: function () {
                this.displayExercise(WidgetExploreMeditation);
            },

            onStartTest: function () {
                this.displayExercise(WidgetExploreTrialTest);
            },

            onStartExam: function () {
                this.displayExercise(WidgetExploreTrialExam);
            },

            onMeditationComplete: function (evt) {
                this.setState('scoring');
                this.displayScore({congrats: true, testable: this.testable});
            },

            onTestComplete: function (evt, data) {
                this.setState('scoring');
                data.testable = this.testable;
                this.displayScore(data);
            },

            onEditDeck: function () {
                this.bus.trigger('editDeck', this.params.deck)
            },

            onDeleteDeck: function () {
                this.bus.trigger('deleteDeck', this.params.deck);
            },

            onHideDeck: function () {
                this.bus.trigger('hideDeck', this.params.deck);
            },

            setState: function (state) {
                this.$el.removeClass('deckView__browsing deckView__testing deckView__scoring');
                this.$el.addClass('deckView__' + state);
            },

            displayScore: function (params) {
                this.unregisterChild('.js-score');
                this.registerChild('.js-score', WidgetScore, params);
            },

            displayExercise: function (type) {
                this.setState('testing');
                this.unregisterChild('.js-test');
                this.registerChild(
                    '.js-test',
                    type,
                    {
                        deck: this.deck
                    }
                );
            },

            onShowCorrectionsChange: function (evt) {
                this.bus.prefs.set({showCorrections: this.ui.showCorrections.is(':checked')})
            },

            onAddCard: function () {
                this.ui.addCardForm.toggleClass('hidden');
                this.ui.addCardBtn.toggleClass('active');
            },

            addCard: function () {
                var q = this.ui.addCardForm.find('.js-question').val().trim(),
                    a = this.ui.addCardForm.find('.js-answer').val().trim();

                if (q && a) {
                    this.deck.content.push({q: q, a: a});
                    this.bus.decks.set({});
                    this.rr();
                } else {
                    alert(this.bus.locale.invalidCard);
                }
            }
        });

        return WidgetDeck;
    }
);
define('Widget/Settings',
    [
        'Widget/Abstract',
        'Widget/LangSelect'
    ],
    function (WidgetAbstract, WidgetLangSelect) {
        

        var WidgetSettings = WidgetAbstract.extend({
            tpl: 'settings',

            events: {
                'click .js-dump': function () { this.bus.trigger('displayDump') },
                'click .js-reset': 'onResetClick',
                'click .js-changeLang': 'onChangeLang'
            },

            subWidgets: {
                '.js-langSelect': WidgetLangSelect
            },

            initialize: function (options) {
                WidgetSettings.__super__.initialize.call(this, options);

                this.render({});
                this.ensureSubWidgets();
            },

            onResetClick: function () {
                if (confirm(this.bus.locale.confirmClearAll)) {
                    this.bus.reset();
                }
            },

            onChangeLang: function () {
                var lang = this.$('[name="interface"]').val();
                this.bus.prefs.set({'interface': lang});
                window.location.reload();
            }
        });

        return WidgetSettings;
    }
);
define('Widget/Dump',
    [
        'Widget/Abstract'
    ],
    function (WidgetAbstract) {
        

        var WidgetDump = WidgetAbstract.extend({
            tpl: 'dump',

            _ui: {
                form: 'form',
                dump: 'textarea',
                beauty: '.js-beauty'
            },

            events: {
                'submit form': 'saveDeck',
                'click .js-reset': 'onReset',
                'change .js-beauty': '_displayDump',
                'click textarea': 'selectDump'
            },

            initialize: function (options) {
                WidgetDump.__super__.initialize.call(this, options);

                this.render({});
                this._displayDump();
            },

            _displayDump: function () {
                var str = JSON.stringify(this.bus.decks.attrs, null, this.ui.beauty.prop('checked') ? 2 : 0);

                this.ui.dump.val(str);
            },

            saveDeck: function (evt) {
                evt.preventDefault();

                var raw = this.ui.dump.val(),
                    deck;

                try {
                    deck = JSON.parse(raw);
                } catch (exception) {
                    alert(this.bus.locale.invalidFormat);
                }

                if (deck) {
                    this.bus.decks.set(deck);
                    this.bus.trigger('displayStart');
                }
            },

            onReset: function () {
                this.bus.trigger('displayStart');
            },

            selectDump: function () {
                this.ui.dump[0].select();
            }
        });

        return WidgetDump;
    }
);
define('Widget/Root',
    [
        'Widget/Abstract',
        'Widget/Pristine',
        'Widget/Nav',
        'Widget/Start',
        'Widget/EditDeck',
        'Widget/DeckList',
        'Widget/Deck',
        'Widget/Settings',
        'Widget/Dump'
    ],
    function (WidgetAbstract, WidgetPristine, WidgetNav, WidgetStart, WidgetEditDeck, WidgetDeckList, WidgetDeck, WidgetSettings, WidgetDump) {
        

        var WidgetRoot = WidgetAbstract.extend({
            tpl: 'root',

            startWidgets: {
                '.js-pristine': WidgetPristine
            },

            workWidgets: {
                '.js-nav': [WidgetNav, function () { return {decks: this.bus.decks } }],
                '.js-start': WidgetStart
            },

            busEvents: {
                'startWork': 'startWork',

                'displayStart': 'displayStart',
                'displayDeck': 'displayDeck',
                'editDeck': 'editDeck',
                'addDeck': 'editDeck',
                'deleteDeck': 'deleteDeck',
                'hideDeck': 'hideDeck',
                'displayDump': 'displayDump',
                'displaySettings': 'displaySettings',
                'displayDecks': 'displayDecks'
            },

            initialize: function (options) {
                WidgetRoot.__super__.initialize.call(this, options);
                this.render({});

                if (this.bus.pair) {
                    this.startWork();
                } else {
                    this.ensureSubWidgets(this.startWidgets);
                    this.$el
                        .removeClass('root__work')
                        .addClass('root__pristine');
                }
            },

            startWork: function () {
                this.ensureSubWidgets(this.workWidgets);
                this.$el
                    .removeClass('root__pristine')
                    .addClass('root__work');
            },

            _clearScreen: function () {
                this.unregisterChild('.js-pristine');
                this.unregisterChild('.js-start');
                this.unregisterChild('.js-deck');
                this.unregisterChild('.js-deckList');
                this.unregisterChild('.js-edit');
                this.unregisterChild('.js-settings');
                this.unregisterChild('.js-dump');
            },

            displayStart: function () {
                this._clearScreen();
                this.registerChild('.js-start', WidgetStart, {});
            },

            editDeck: function (deck) {
                this._clearScreen();
                this.registerChild('.js-edit', WidgetEditDeck, {deck: deck});
            },

            deleteDeck: function (deck) {
                if (confirm(this.bus.locale.deleteDeckConfirm)) {
                    this.bus.decks.deleteDeck(deck[0]);
                    this._clearScreen();
                }
            },

            hideDeck: function (deck) {
                if (confirm(this.bus.locale.hideDeckConfirm)) {
                    this.bus.hideDeck(deck[1].id);
                    this._clearScreen();
                }
            },

            displayDecks: function () {
                this._clearScreen();
                this.registerChild('.js-deckList', WidgetDeckList, {});
            },

            displayDeck: function (deck) {
                this._clearScreen();
                this.registerChild('.js-deck', WidgetDeck, {deck: deck});
            },

            displaySettings: function () {
                this._clearScreen();
                this.registerChild('.js-settings', WidgetSettings, {});
            },

            displayDump: function () {
                this._clearScreen();
                this.registerChild('.js-dump', WidgetDump, {});
            }
        });

        return WidgetRoot;
    }
);
define('locale/en/locale',{
    q: {
        open: '‘',
        close: '’'
    },

    license: 'MIT license',
    decksHeader: 'Decks',
    manageDecks: 'Manage decks…',
    newDeck: 'Add deck…',
    help: 'Help',
    settings: 'Settings',

    done: 'Done',
    cancel: 'Cancel',
    save: 'Save',
    invalidFormat: 'Invalid format',
    invalidCard: 'Please fill both sides of card',

    welcomeHeader: 'Welcome to OmniCard!',
    welcomeFirst: 'We help you learn languages via famous flash-card method.',
    welcomeSecond: 'OmniCard is not a textbook or manual. Take it as exercise book, which you must create yourself (although we provide some predefined cards).',
    welcomeChoose: 'Choose your tongues:',
    welcomeSpeak: 'I speak…',
    welcomeLearn: 'I learn…',
    welcomeInterface: 'I prefer interface in…',
    welcomeStart: 'Start!',


    meditation: 'Meditation',
    meditationExplanation: 'Shows you both sides of card, question and answer, allowing you to learn and remember.',
    test: 'Test',
    testExplanation: 'Forces you to choose correct answer, intended for further fixing. Not all decks are capable of this mode.',
    exam: 'Exam',
    examExplanation: 'Hardest mode. You should enter answers manually. This is particularly useful in writing training.',


    helpHeader: 'Choose a deck from menu and start learning!',
    helpFirst: 'Each deck provides several modes in which it can be discovered.',
    helpAlso: 'You can (and should) also create your own deck, which is great because it forces you to train in writing.',

    faq: 'FAQ',
    faqDeckQ: 'What is a card? What is a deck?',
    faqDeckA: 'Card is a pair of question (on your native language) and answer (on language that you learn). Deck is a set of such cards, combined together by any criteria you like.',
    faqEditQ: 'How do I edit deck?',
    faqEditA: 'Open that deck and note row of icons in the top right corner of description. ' +
        'Clicking pencil icon brings up deck editing mode, and trash can deletes this deck. ' +
        'Built-in deck can only be hidden (closed eye icon). ' +
        'Clicking plus icon will open form for quick card adding (only for custom decks).',
    faqCreateQ: 'How do I create new deck?',
    faqCreateA: 'Use <span class="badge">Add deck…</span> button located beneath deck list.',

    faqShareQ: 'I created/edited deck(s) to work on my primary PC, how do I get it on my phone/tablet/other PC?',
    faqShareA1: 'Open deck you need to transfer and click pencil icon in top left corner.',
    faqShareA2: 'Click <span class="badge">Export whole deck</span> button. You\'ll see big text field with lot of strange text.',
    faqShareA3: 'Copy that text.',
    faqShareA4: 'That\'s just text, so you can paste it around. Store it to the \
                      <a href="https://drive.google.com" target="_blank">Google Drive</a>, send yourself email, \
                      use a <a href="http://pastebin.com/">pastebin</a> service, etc.',
    faqShareA5: 'Open the location of your pasted text on device to which you want to transfer your work, and copy that text.',
    faqShareA6: 'Open the OmniCard, and click <span class="badge">New deck…</span>. Click <span class="badge">Import deck</span>. Text input field would open.',
    faqShareA7: 'Paste copied text into that field. Click<span class="badge">Done</span> button.',
    faqShareA8: 'Sounds more hard then it really is:)',
    faqShareA9: 'Additionally you can import/export cards only, and import/export all decks at once in <span class="badge">Settings</span>.',

    faqManagementQ: 'Can I delete decks en masse?',
    faqManagementA: 'Click <span class="badge">Decks</span> above deck list. You\'ll find this and other bulk operations there.',

    faqFeedbackQ: 'Application misbehaves / error in built-in deck / I have a suggestion / typo / I want to help.',
    faqFeedbackA: 'Keep calm and <a href="https://github.com/hogart/OmniCard/issues/new">contact us</a>. Thanks!',

    helpHide: 'Don\'t show me this',
    helpShow: 'Show help',

    bulkTitle: 'Decks management',
    bulkSelectAll: 'Select all',
    bulkName: 'Title',
    bulkDescription: 'Description',
    bulkShow: 'Show selected decks',
    bulkHide: 'Hide/delete selected decks',
    bulkExport: 'Export selected decks',

    editDeck: 'Edit deck',
    deleteDeck: 'Delete deck',
    deleteDeckConfirm: 'Are you sure you want to delete this deck?',
    hideDeck: 'Hide deck',
    unhideDeck: 'Reveal deck',
    hideDeckConfirm: 'Are you sure you want to hide this deck?',
    showCorrections: 'Show correct answers',
    createDeck: 'Create new deck',
    importDeck: 'Import deck',
    exportDeck: 'Export whole deck',
    pasteDeck: 'Paste deck here',
    shareDeckHelp: 'Entire deck for sharing',
    deckProperties: 'Deck properties',
    deckName: 'Name:',
    deckNamePlaceholder: 'Deck name',
    deckDescr: 'Description:',
    deckDescrPlaceholder: 'Deck description (optional)',
    deckTags: 'Tags:',
    deckTagsPlaceholder: 'Deck tags (optional)',
    deckTagsHelp: 'Comma-separated list',
    deckTestable: 'Testable',
    deckTestableHelp: 'If deck is suitable for creating test automatically? (Won\'t work on deck shorter than 5 cards).',
    deckCards: 'Deck cards',
    deckCardsImport: 'Import cards',
    deckCardsExport: 'Export cards',
    deckCardsPaste: 'Paste cards here',
    deckCardsHelp: 'Newline separates cards; tab or 4 spaces separates question form answer (question first)',
    deleteCard: 'Delete card',
    addCard: 'Add card',
    deckSave: 'Save deck',

    answer: 'Answer',
    question: 'Question',
    next: 'Next',
    skip: 'Skip',


    learnedNew: 'Feeling like learned something new? Care to repeat or ready to testify yourself?',
    wrongs: 'Wrong answers:',
    corrects: 'Correct answers:',

    congrats: 'Congratulations! You\'ve performed excellent!',
    doNotDespair: 'Do not despair. Next time you will do better!',
    moreWork: 'You definitely need more work, but so far so good.',
    notBad: 'Not bad. Keep training!',


    importExport: 'Import/export…',
    importExportHelp: 'Lets import and export all your decks as a whole. Useful when transferring them to other device.',
    clearAll: 'Clear all',
    clearAllHelp: 'Deletes all decks and settings entirely. You must know what you\'re doing.',
    confirmClearAll: 'This will erase all your decks, reset all settings and reload entire application.\nAre you sure you want to do this?',

    changeLang: 'Change interface language',


    dump: 'Share decks',
    dumpHelp: 'Copy contents of this field and send it as text via email, any <a href="http://pastebin.com/">pastebin</a>, etc.',
    dumpFormatting: 'Nice formatting'
});
define('locale/ru/locale',{
    q: {
        open: '«',
        close: '»'
    },

    license: 'Лицензия MIT',
    decksHeader: 'Колоды',
    newDeck: 'Добавить колоду',
    manageDecks: 'Операции с колодами…',
    help: 'Справка',
    settings: 'Настройки',

    done: 'Готово',
    cancel: 'Отмена',
    save: 'Сохранить',
    invalidFormat: 'Некорректный формат',
    invalidCard: 'Пожалуйста, укажите обе стороны карточки',


    welcomeHeader: 'Добро пожаловать в OmniCard!',
    welcomeFirst: 'Мы помогаем изучать языки при помощи известного метода флэш-карточек.',
    welcomeSecond: 'OmniCard — не учебник и не руководство. Рассматривайте его как тетрадь для упражнений, которую вы сами создаете и наполняете (хотя мы и предоставляем несколько встроенных карточек).',
    welcomeChoose: 'Выберите свои языки:',
    welcomeSpeak: 'Мой родной язык…',
    welcomeLearn: 'Я изучаю…',
    welcomeInterface: 'Я хочу интерфейс на…',
    welcomeStart: 'Начать!',


    meditation: 'Медитация',
    meditationExplanation: 'Показываются обе стороны карточки, вопрос и ответ, позволяя изучать и запоминать материал.',
    test: 'Тест',
    testExplanation: 'Предполагает выбор одного правильного ответа из 4. Предназначается для дальнейшего фиксирования знаний. Не для всех колод.',
    exam: 'Экзамен',
    examExplanation: 'Самый сложный режим: ответы надо вводить вручную. Это особенно полезно для тренировки навыков письма.',


    helpHeader: 'Выбирайте колоду из меню и начинайте изучение!',
    helpFirst: 'Каждая колода предоставляет несколько режимов, в которых ее можно листать.',
    helpAlso: 'Также можно (и нужно) создавать свои колоды, что развивает навыки письма на изучаемом языке.',

    faq: 'ЧаВО',
    faqDeckQ: 'Что такое карточка? Что такое колода?',
    faqDeckA: 'Карточка это пара из вопроса (на родном языке) и ответа (на изучаемом). Колода — набор таких карточек, составленный по любому критерию.',
    faqEditQ: 'Как редактировать/удалить колоду?',
    faqEditA: 'Откройте ее и обратите внимание на ряд иконок в правом верхнем углу описания. ' +
        'Иконка с карандашом открывает редактирование, а мусорная корзина удаляет колоду. ' +
        'Встроенные колоды можно только скрыть (иконка с закрытым глазом). ' +
        'Иконка с плюсиком открывает форму быстрого добавления карточки (только для созданных колод).',
    faqCreateQ: 'Как создать колоду?',
    faqCreateA: 'Используйте кнопку <span class="badge">Добавить колоду…</span> под списком колод слева.',

    faqShareQ: 'Я создал/отредактировал колоды на моем главном компьютере, как их перенести на телефон/планшет/другой компьютер?',
    faqShareA1: 'Откройте колоду, которую хотите перенести, и нажмите на кнопку редактирования.',
    faqShareA2: 'Нажмите кнопку <span class="badge">Экспортировать колоду целиком</span>. Появится большое поле со странным текстом.',
    faqShareA3: 'Скопируйте этот текст в буфер обмена.',
    faqShareA4: 'Поскольку это просто текст, его можно вставить куда угодно. Сохраните на  \
                      <a href="https://drive.google.com" target="_blank">Google Drive</a>, пошлите самому себе электронное письмо, \
                      воспользуйтесь любым <a href="http://pastebin.com/">pastebin</a>-сервисом, и т.д.',
    faqShareA5: 'Откройте пересланный текст на том устройтве, на которое хотите перенести колоду, и скопируйте текст в буфер обмена.',
    faqShareA6: 'Откройте OmniCard, и кликните на <span class="badge">Добавить колоду…</span>. Кликните <span class="badge">Импортировать колоду</span>. Откроется поле для ввода текста.',
    faqShareA7: 'Вставьте текст из буфера обмена. Кликните <span class="badge">Готово</span>.',
    faqShareA8: 'Звучит сложнее, чем есть на самом деле:)',
    faqShareA9: 'Также можно импортировать/экспортировать только карточки отдельно от колоды, и все колоды полностью в <span class="badge">Настройках</span>.',

    faqManagementQ: 'Можно ли удалить несколько колод сразу?',
    faqManagementA: 'Кликните <span class="badge">Колоды</span> над списком колод. Там вы найдете эту и другие массовые операции.',

    faqFeedbackQ: 'Приложение ведет себя неправильно / Ошибка во встроенной колоде / У меня предложение / Опечатка / Я хочу помочь!',
    faqFeedbackA: 'Спокойствие, только спокойствие:) <a href="https://github.com/hogart/OmniCard/issues/new">Сообщите нам</a>. Спасибо!',

    helpHide: 'Не показывать это',
    helpShow: 'Показать подсказку',

    bulkTitle: 'Управление колодами',
    bulkSelectAll: 'Выбрать все',
    bulkName: 'Название',
    bulkDescription: 'Описание',
    bulkShow: 'Показывать выбранные',
    bulkHide: 'Скрыть/удалить выбранные',
    bulkExport: 'Экспорт',

    editDeck: 'Редактировать колоду',
    deleteDeck: 'Удалить колоду',
    deleteDeckConfirm: 'Вы действительно хотите удалить колоду?',
    hideDeck: 'Скрыть колоду',
    unhideDeck: 'Показывать колоду',
    hideDeckConfirm: 'Вы действительно хотите скрыть колоду?',
    showCorrections: 'Показывать правильные ответы',
    createDeck: 'Создать колоду',
    importDeck: 'Импортировать колоду',
    exportDeck: 'Экспортировать колоду целиком',
    pasteDeck: 'Вставьте колоду сюда',
    shareDeckHelp: 'Колода целиком',
    deckProperties: 'Свойства колоды',
    deckName: 'Название:',
    deckNamePlaceholder: 'Название колоды',
    deckDescr: 'Описание:',
    deckDescrPlaceholder: 'Описание колоды (необязательное поле)',
    deckTags: 'Метки:',
    deckTagsPlaceholder: 'Метки колоды (необязательное поле)',
    deckTagsHelp: 'Список, разделенный запятыми',
    deckTestable: 'Тесты',
    deckTestableHelp: 'Подходит ли колода для автоматического создания тестов? (Не работает на колодах меньше 5 карточек).',
    deckCards: 'Карточки в колоде',
    deckCardsImport: 'Импортировать карточки',
    deckCardsExport: 'Экспортировать карточки',
    deckCardsPaste: 'Вставьте карточки сюда',
    deckCardsHelp: 'Перевод строки разделяет карточки, табуляция или 4 пробела разделяет вопрос и ответ (вопрос идет первым)',
    deleteCard: 'Удалить карточки',
    addCard: 'Добавить карточку',
    deckSave: 'Сохранить колоду',

    answer: 'Ответ',
    question: 'Вопрос',
    next: 'Следующий',
    skip: 'Пропустить',


    learnedNew: 'Узнали что-то новое? Хотите повторить или готовы испытать себя?',
    wrongs: 'Неправильных ответов:',
    corrects: 'Правильных ответов:',

    congrats: 'Поздравляем! Ни единой ошибки!',
    doNotDespair: 'Не отчаивайтесь. В следующий раз получится!',
    moreWork: 'Неплохо, но нужно больше работать.',
    notBad: 'Совсем недурно! Продолжайте тренироваться!',


    importExport: 'Импорт/экспорт…',
    importExportHelp: 'Позволяет импортировать и экспортировать все колоды разом. Полезно для переноса с/на другое устройство.',
    clearAll: 'Полный сброс',
    clearAllHelp: 'Удаляет все колоды и стирает все настройки. Вы должны осознавать, что делаете.',
    confirmClearAll: 'Это сотрет все ваши колоды, сбросит настройки и перезагрузит приложение.\nВы уверены, что хотите сделать это?',

    changeLang: 'Изменить язык интерфейса',


    dumpHelp: 'Скопируйте содержимое этого поля и отправьте его по электронной почте, через <a href="http://pastebin.com/">pastebin</a>-сервис, и т.д.',
    dumpFormatting: 'С форматированием'
});

define('locale/locale',
    [
        'locale/en/locale',
        'locale/ru/locale'
    ],
    function (en, ru) {
        

        return {
            en: en,
            ru: ru
        };
    }
);
define('PredefinedDecks',{
    "ru-pl": [
        {
            "id": "swadesh",
            "name": "«Список Сводеша»",
            "description": "Колода составлена на основе <a href=\"http://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%A1%D0%B2%D0%BE%D0%B4%D0%B5%D1%88%D0%B0\">списка Сводеша</a>.",
            "tags": ["словарный запас"],
            "testable": true,
            "builtIn": true,
            "content": [
                {
                    "q": "я",
                    "a": "ja"
                },
                {
                    "q": "ты",
                    "a": "ty"
                },
                {
                    "q": "он",
                    "a": "on"
                },
                {
                    "q": "мы",
                    "a": "my"
                },
                {
                    "q": "вы",
                    "a": "wy"
                },
                {
                    "q": "они (в составе группы есть мужчина)",
                    "a": "oni"
                },
                {
                    "q": "они (в составе группы только женщины)",
                    "a": "one"
                },
                {
                    "q": "этот",
                    "a": "ten"
                },
                {
                    "q": "эта",
                    "a": "ta"
                },
                {
                    "q": "это",
                    "a": "to"
                },
                {
                    "q": "тот, та, то",
                    "a": "tamten, tamta"
                },
                {
                    "q": "та",
                    "a": "tamta"
                },
                {
                    "q": "то",
                    "a": "tamto"
                },
                {
                    "q": "здесь, тут",
                    "a": "tutaj"
                },
                {
                    "q": "там",
                    "a": "tam"
                },
                {
                    "q": "кто",
                    "a": "kto"
                },
                {
                    "q": "что",
                    "a": "co"
                },
                {
                    "q": "где",
                    "a": "gdzie"
                },
                {
                    "q": "когда",
                    "a": "kiedy"
                },
                {
                    "q": "как",
                    "a": "jak"
                },
                {
                    "q": "не",
                    "a": "nie"
                },
                {
                    "q": "всё",
                    "a": "wszystko"
                },
                {
                    "q": "много",
                    "a": "wiele"
                },
                {
                    "q": "несколько",
                    "a": "kilka"
                },
                {
                    "q": "другой, иной",
                    "a": "inny"
                },
                {
                    "q": "один",
                    "a": "jeden"
                },
                {
                    "q": "два",
                    "a": "dwa"
                },
                {
                    "q": "три",
                    "a": "trzy"
                },
                {
                    "q": "четыре",
                    "a": "cztery"
                },
                {
                    "q": "пять",
                    "a": "pięć"
                },
                {
                    "q": "большой",
                    "a": "duży"
                },
                {
                    "q": "великий",
                    "a": "wielki"
                },
                {
                    "q": "длинный, долгий",
                    "a": "długi"
                },
                {
                    "q": "широкий",
                    "a": "szeroki"
                },
                {
                    "q": "толстый (о человеке)",
                    "a": "gruby"
                },
                {
                    "q": "толстый (о предмете)",
                    "a": "tłusty"
                },
                {
                    "q": "тяжёлый",
                    "a": "ciężki"
                },
                {
                    "q": "маленький",
                    "a": "mały"
                },
                {
                    "q": "короткий",
                    "a": "krótki"
                },
                {
                    "q": "узкий",
                    "a": "wąski"
                },
                {
                    "q": "тонкий",
                    "a": "cienki"
                },
                {
                    "q": "женщина",
                    "a": "kobieta"
                },
                {
                    "q": "мужчина",
                    "a": "mężczyzna"
                },
                {
                    "q": "человек",
                    "a": "człowiek"
                },
                {
                    "q": "ребёнок, дитя",
                    "a": "dziecko"
                },
                {
                    "q": "жена",
                    "a": "żona"
                },
                {
                    "q": "муж",
                    "a": "mąż"
                },
                {
                    "q": "мать, мама",
                    "a": "matka"
                },
                {
                    "q": "отец, тятя",
                    "a": "ojciec"
                },
                {
                    "q": "зверь, животное",
                    "a": "zwierzę"
                },
                {
                    "q": "рыба",
                    "a": "ryba"
                },
                {
                    "q": "птица",
                    "a": "ptak"
                },
                {
                    "q": "собака, пёс",
                    "a": "pies"
                },
                {
                    "q": "вошь",
                    "a": "wesz"
                },
                {
                    "q": "змея, гад",
                    "a": "wąż"
                },
                {
                    "q": "червь, червяк",
                    "a": "robak"
                },
                {
                    "q": "дерево",
                    "a": "drzewo"
                },
                {
                    "q": "лес",
                    "a": "las"
                },
                {
                    "q": "плод, овощ",
                    "a": "owoc"
                },
                {
                    "q": "лист",
                    "a": "liść"
                },
                {
                    "q": "корень",
                    "a": "korzeń"
                },
                {
                    "q": "кора",
                    "a": "kora"
                },
                {
                    "q": "цветок",
                    "a": "kwiat"
                },
                {
                    "q": "трава",
                    "a": "trawa"
                },
                {
                    "q": "кожа, шкура",
                    "a": "skóra"
                },
                {
                    "q": "мясо",
                    "a": "mięso"
                },
                {
                    "q": "кровь",
                    "a": "krew"
                },
                {
                    "q": "кость",
                    "a": "kość"
                },
                {
                    "q": "яйцо",
                    "a": "jajko"
                },
                {
                    "q": "рог",
                    "a": "róg"
                },
                {
                    "q": "хвост",
                    "a": "ogon"
                },
                {
                    "q": "перо",
                    "a": "pióro"
                },
                {
                    "q": "волосы",
                    "a": "włosy"
                },
                {
                    "q": "голова",
                    "a": "głowa"
                },
                {
                    "q": "ухо",
                    "a": "ucho"
                },
                {
                    "q": "глаз, око",
                    "a": "oko"
                },
                {
                    "q": "нос",
                    "a": "nos"
                },
                {
                    "q": "рот, уста",
                    "a": "usta"
                },
                {
                    "q": "зуб",
                    "a": "ząb"
                },
                {
                    "q": "язык",
                    "a": "język"
                },
                {
                    "q": "ноготь",
                    "a": "paznokieć"
                },
                {
                    "q": "стопа, ступня",
                    "a": "stopa"
                },
                {
                    "q": "нога",
                    "a": "noga"
                },
                {
                    "q": "колено",
                    "a": "kolano"
                },
                {
                    "q": "ладонь",
                    "a": "dłoń"
                },
                {
                    "q": "рука",
                    "a": "ręka"
                },
                {
                    "q": "крыло",
                    "a": "skrzydło"
                },
                {
                    "q": "живот, брюхо, пузо",
                    "a": "brzuch"
                },
                {
                    "q": "внутренности, кишки",
                    "a": "wnętrzności"
                },
                {
                    "q": "шея",
                    "a": "szyja"
                },
                {
                    "q": "спина",
                    "a": "plecy"
                },
                {
                    "q": "грудь",
                    "a": "pierś"
                },
                {
                    "q": "сердце",
                    "a": "serce"
                },
                {
                    "q": "печень",
                    "a": "wątroba"
                },
                {
                    "q": "пить",
                    "a": "pić"
                },
                {
                    "q": "есть, кушать",
                    "a": "jeść"
                },
                {
                    "q": "грызть, кусать",
                    "a": "gryźć"
                },
                {
                    "q": "сосать",
                    "a": "ssać"
                },
                {
                    "q": "плевать",
                    "a": "pluć"
                },
                {
                    "q": "дышать",
                    "a": "oddychać"
                },
                {
                    "q": "смеяться",
                    "a": "śmiać się"
                },
                {
                    "q": "видеть",
                    "a": "widzieć"
                },
                {
                    "q": "слышать",
                    "a": "słyszeć"
                },
                {
                    "q": "знать",
                    "a": "wiedzieć"
                },
                {
                    "q": "думать",
                    "a": "myśleć"
                },
                {
                    "q": "нюхать, чуять",
                    "a": "wąchać"
                },
                {
                    "q": "бояться",
                    "a": "bać się"
                },
                {
                    "q": "спать",
                    "a": "spać"
                },
                {
                    "q": "жить",
                    "a": "żyć"
                },
                {
                    "q": "умирать; умереть",
                    "a": "umierać"
                },
                {
                    "q": "убивать",
                    "a": "zabijać"
                },
                {
                    "q": "бороться",
                    "a": "walczyć"
                },
                {
                    "q": "охотиться",
                    "a": "polować"
                },
                {
                    "q": "ударить",
                    "a": "uderzać"
                },
                {
                    "q": "резать, рубить",
                    "a": "ciąć"
                },
                {
                    "q": "разделить",
                    "a": "rozdzielać"
                },
                {
                    "q": "кольнуть, колоть",
                    "a": "pchnąć"
                },
                {
                    "q": "царапать",
                    "a": "drapać"
                },
                {
                    "q": "копать, рыть",
                    "a": "kopać"
                },
                {
                    "q": "плавать",
                    "a": "pływać"
                },
                {
                    "q": "летать",
                    "a": "latać"
                },
                {
                    "q": "идти",
                    "a": "iść"
                },
                {
                    "q": "приходить, прийти",
                    "a": "przychodzić"
                },
                {
                    "q": "лежать",
                    "a": "lezeć"
                },
                {
                    "q": "сидеть",
                    "a": "siedzieć"
                },
                {
                    "q": "стоять",
                    "a": "stać"
                },
                {
                    "q": "вращать, вертеть",
                    "a": "obracać"
                },
                {
                    "q": "падать",
                    "a": "upadać"
                },
                {
                    "q": "давать",
                    "a": "dawać"
                },
                {
                    "q": "держать",
                    "a": "trzymać"
                },
                {
                    "q": "сжимать",
                    "a": "ściskać, zgniatać"
                },
                {
                    "q": "тереть",
                    "a": "zawijać"
                },
                {
                    "q": "мыть, умывать",
                    "a": "myć"
                },
                {
                    "q": "вытирать",
                    "a": "wycierać"
                },
                {
                    "q": "тянуть",
                    "a": "ciagnać"
                },
                {
                    "q": "толкать, пихать",
                    "a": "pchać"
                },
                {
                    "q": "бросать, кидать",
                    "a": "rzucać"
                },
                {
                    "q": "вязать, связывать",
                    "a": "wiązać"
                },
                {
                    "q": "шить",
                    "a": "szyć"
                },
                {
                    "q": "считать",
                    "a": "liczyć"
                },
                {
                    "q": "говорить, сказать",
                    "a": "mówić"
                },
                {
                    "q": "петь",
                    "a": "śpiewać"
                },
                {
                    "q": "играть",
                    "a": "grać"
                },
                {
                    "q": "плыть",
                    "a": "płynąć"
                },
                {
                    "q": "замёрзнуть, замерзать",
                    "a": "zamarzać"
                },
                {
                    "q": "пухнуть",
                    "a": "puchnąć"
                },
                {
                    "q": "солнце",
                    "a": "słońce"
                },
                {
                    "q": "луна, месяц",
                    "a": "księżyc"
                },
                {
                    "q": "звезда",
                    "a": "gwiazda"
                },
                {
                    "q": "вода",
                    "a": "woda"
                },
                {
                    "q": "дождь",
                    "a": "deszcz"
                },
                {
                    "q": "река",
                    "a": "rzeka"
                },
                {
                    "q": "озеро",
                    "a": "jezioro"
                },
                {
                    "q": "море",
                    "a": "morze"
                },
                {
                    "q": "соль",
                    "a": "sól"
                },
                {
                    "q": "камень",
                    "a": "kamień"
                },
                {
                    "q": "песок",
                    "a": "piasek"
                },
                {
                    "q": "пыль",
                    "a": "kurz"
                },
                {
                    "q": "земля",
                    "a": "ziemia"
                },
                {
                    "q": "туча, облако",
                    "a": "chmura"
                },
                {
                    "q": "туман",
                    "a": "mgła"
                },
                {
                    "q": "небо",
                    "a": "niebo"
                },
                {
                    "q": "ветер",
                    "a": "wiatr"
                },
                {
                    "q": "снег",
                    "a": "śnieg"
                },
                {
                    "q": "лёд",
                    "a": "lód"
                },
                {
                    "q": "дым",
                    "a": "dym"
                },
                {
                    "q": "огонь",
                    "a": "ogień"
                },
                {
                    "q": "зола, пепел",
                    "a": "popiół"
                },
                {
                    "q": "жечь",
                    "a": "palić"
                },
                {
                    "q": "дорога, путь",
                    "a": "droga"
                },
                {
                    "q": "гора",
                    "a": "góra"
                },
                {
                    "q": "красный",
                    "a": "czerwony"
                },
                {
                    "q": "зелёный",
                    "a": "zielony"
                },
                {
                    "q": "жёлтый",
                    "a": "żółty"
                },
                {
                    "q": "белый",
                    "a": "biały"
                },
                {
                    "q": "чёрный",
                    "a": "czarny"
                },
                {
                    "q": "ночь",
                    "a": "noc"
                },
                {
                    "q": "день",
                    "a": "dzień"
                },
                {
                    "q": "год",
                    "a": "rok"
                },
                {
                    "q": "тёплый",
                    "a": "ciepły"
                },
                {
                    "q": "холодный",
                    "a": "zimny"
                },
                {
                    "q": "полный",
                    "a": "pełny"
                },
                {
                    "q": "новый",
                    "a": "nowy"
                },
                {
                    "q": "старый",
                    "a": "stary"
                },
                {
                    "q": "хороший, добрый",
                    "a": "dobry"
                },
                {
                    "q": "злой, плохой",
                    "a": "zły"
                },
                {
                    "q": "гнилой",
                    "a": "zgniły"
                },
                {
                    "q": "грязный",
                    "a": "brudny"
                },
                {
                    "q": "прямой",
                    "a": "prosty"
                },
                {
                    "q": "круглый",
                    "a": "okrągły"
                },
                {
                    "q": "острый",
                    "a": "ostry"
                },
                {
                    "q": "тупой",
                    "a": "tępy"
                },
                {
                    "q": "гладкий, ровный",
                    "a": "gładki"
                },
                {
                    "q": "мокрый",
                    "a": "mokry"
                },
                {
                    "q": "сухой",
                    "a": "suchy"
                },
                {
                    "q": "близкий",
                    "a": "bliski"
                },
                {
                    "q": "далёкий, дальний",
                    "a": "daleki"
                },
                {
                    "q": "правый",
                    "a": "prawy"
                },
                {
                    "q": "левый",
                    "a": "lewy"
                },
                {
                    "q": "при, у, возле",
                    "a": "przy"
                },
                {
                    "q": "в",
                    "a": "w"
                },
                {
                    "q": "с, со",
                    "a": "z"
                },
                {
                    "q": "и",
                    "a": "i"
                },
                {
                    "q": "если",
                    "a": "jeśli"
                },
                {
                    "q": "потому что",
                    "a": "bo"
                },
                {
                    "q": "имя",
                    "a": "imię"
                }
            ]
        },

        {
            "id": "interior",
            "name": "Интерьер",
            "description": "Несколько существительных, описывающих предметы интерьера и быта.",
            "tags": ["словарный запас", "существительные"],
            "testable": true,
            "builtIn": true,
            "content": [
                {
                    "q": "стол",
                    "a": "stół"
                },
                {
                    "q": "тетрадь",
                    "a": "zeszyt"
                },
                {
                    "q": "авторучка",
                    "a": "długopis"
                },
                {
                    "q": "карандаш",
                    "a": "ołówek"
                },
                {
                    "q": "потолок",
                    "a": "sufit"
                },
                {
                    "q": "кресло",
                    "a": "fotel"
                },
                {
                    "q": "стеллаж",
                    "a": "regał"
                },
                {
                    "q": "подоконник",
                    "a": "parapet"
                },
                {
                    "q": "корзина",
                    "a": "kosz"
                },
                {
                    "q": "календарь",
                    "a": "kalendarz"
                },
                {
                    "q": "словарь",
                    "a": "słownik"
                },
                {
                    "q": "ковер",
                    "a": "dywan"
                },
                {
                    "q": "книга",
                    "a": "książka"
                },
                {
                    "q": "дамская сумочка",
                    "a": "torebka"
                },
                {
                    "q": "портфель",
                    "a": "teczka"
                },
                {
                    "q": "пол",
                    "a": "podłoga"
                },
                {
                    "q": "стена",
                    "a": "ściana"
                },
                {
                    "q": "доска",
                    "a": "tablica"
                },
                {
                    "q": "шкаф",
                    "a": "szafa"
                },
                {
                    "q": "шкафчик",
                    "a": "szafka"
                },
                {
                    "q": "лампа",
                    "a": "lampa"
                },
                {
                    "q": "лампочка",
                    "a": "żarówka"
                },
                {
                    "q": "игрушка",
                    "a": "zabawka"
                },
                {
                    "q": "мягкая игрушка",
                    "a": "maskotka"
                },
                {
                    "q": "плита",
                    "a": "płyta"
                },
                {
                    "q": "диван",
                    "a": "kanapa"
                },
                {
                    "q": "чашка",
                    "a": "filiżanka"
                },
                {
                    "q": "письменный стол",
                    "a": "biurko"
                },
                {
                    "q": "перо, ручка",
                    "a": "pióro"
                },
                {
                    "q": "стул",
                    "a": "krzesło"
                },
                {
                    "q": "окно",
                    "a": "okno"
                },
                {
                    "q": "кровать",
                    "a": "łóżko"
                },
                {
                    "q": "люстра",
                    "a": "lustro"
                },
                {
                    "q": "двери",
                    "a": "drzwi"
                }
            ]
        },

        {
            "id": "adjectives1",
            "name": "Прилагательные",
            "description": "Часто употребляющиеся прилагательные (в именительном падеже).",
            "tags": ["словарный запас", "прилагательные"],
            "testable": true,
            "builtIn": true,
            "content": [
                {
                    "q": "узкий",
                    "a": "wąski"
                },
                {
                    "q": "красочный, цветной",
                    "a": "kolorowy"
                },
                {
                    "q": "тяжелый",
                    "a": "ciężki"
                },
                {
                    "q": "грязный",
                    "a": "brudny"
                },
                {
                    "q": "прямой",
                    "a": "prosty"
                },
                {
                    "q": "кривой",
                    "a": "krzywy"
                },
                {
                    "q": "мудрый",
                    "a": "mądry"
                },
                {
                    "q": "толстый (о предмете)",
                    "a": "tęgi"
                },
                {
                    "q": "мягкий",
                    "a": "miękki"
                },
                {
                    "q": "общительный",
                    "a": "towarzysky"
                },
                {
                    "q": "бумажный",
                    "a": "papierowy"
                },
                {
                    "q": "серый",
                    "a": "szary"
                },
                {
                    "q": "плоский",
                    "a": "płaski"
                },
                {
                    "q": "красный",
                    "a": "czerwony"
                },
                {
                    "q": "синий",
                    "a": "niebieski"
                },
                {
                    "q": "зеленый",
                    "a": "zielony"
                },
                {
                    "q": "белый",
                    "a": "biały"
                },
                {
                    "q": "черный",
                    "a": "czarny"
                }
            ]
        },

        {
            "id": "verbsI",
            "name": "Глаголы I спряжения, ч. 1",
            "description": "Некоторые глаголы I спряжения. Инфинитив и 6 форм настоящего времени.\n12 глаголов.",
            "tags": ["глаголы", "грамматика"],
            "testable": true,
            "builtIn": true,
            "content": [
                {
                    "a": "wykonywać",
                    "q": "выполнять"
                },
                {
                    "a": "wykonuję",
                    "q": "выполняю"
                },
                {
                    "a": "wykonujesz",
                    "q": "выполняешь"
                },
                {
                    "a": "wykonuje",
                    "q": "выполняет"
                },
                {
                    "a": "wykonujemy",
                    "q": "выполняем"
                },
                {
                    "a": "wykonujecie",
                    "q": "выполняете"
                },
                {
                    "a": "wykonują",
                    "q": "выполняют"
                },
                {
                    "a": "gotować",
                    "q": "готовить"
                },
                {
                    "a": "gotuję",
                    "q": "готовлю"
                },
                {
                    "a": "gotujesz",
                    "q": "готовишь"
                },
                {
                    "a": "gotuje",
                    "q": "готовит"
                },
                {
                    "a": "gotujemy",
                    "q": "готовим"
                },
                {
                    "a": "gotujecie",
                    "q": "готовите"
                },
                {
                    "a": "gotują",
                    "q": "готовят"
                },
                {
                    "a": "podróżować",
                    "q": "путешествовать"
                },
                {
                    "a": "podróżuję",
                    "q": "путешествую"
                },
                {
                    "a": "podróżujesz",
                    "q": "путешествуешь"
                },
                {
                    "a": "podróżuje",
                    "q": "путешествует"
                },
                {
                    "a": "podróżujemy",
                    "q": "путешествуем"
                },
                {
                    "a": "podróżujecie",
                    "q": "путешествуете"
                },
                {
                    "a": "podróżują",
                    "q": "путешествуют"
                },
                {
                    "a": "pić",
                    "q": "пить"
                },
                {
                    "a": "piję",
                    "q": "пью"
                },
                {
                    "a": "pijesz",
                    "q": "пьешь"
                },
                {
                    "a": "pije",
                    "q": "пьет"
                },
                {
                    "a": "pijemy",
                    "q": "пьем"
                },
                {
                    "a": "pijecie",
                    "q": "пьете"
                },
                {
                    "a": "piją",
                    "q": "пьют"
                },
                {
                    "a": "bić",
                    "q": "бить"
                },
                {
                    "a": "biję",
                    "q": "бью"
                },
                {
                    "a": "bijesz",
                    "q": "бьешь"
                },
                {
                    "a": "bije",
                    "q": "бьет"
                },
                {
                    "a": "bijemy",
                    "q": "бьем"
                },
                {
                    "a": "bijecie",
                    "q": "бьете"
                },
                {
                    "a": "biją",
                    "q": "бьют"
                },
                {
                    "a": "żyć",
                    "q": "жить"
                },
                {
                    "a": "żyję",
                    "q": "живу"
                },
                {
                    "a": "żyjesz",
                    "q": "живешь"
                },
                {
                    "a": "żyje",
                    "q": "живет"
                },
                {
                    "a": "żyjemy",
                    "q": "живем"
                },
                {
                    "a": "żyjecie",
                    "q": "живете"
                },
                {
                    "a": "żyją",
                    "q": "живут"
                },
                {
                    "a": "ciągnąć",
                    "q": "тянуть"
                },
                {
                    "a": "ciągnę",
                    "q": "тяну"
                },
                {
                    "a": "ciągniesz",
                    "q": "тянешь"
                },
                {
                    "a": "ciągnie",
                    "q": "тянет"
                },
                {
                    "a": "ciągniemy",
                    "q": "тянем"
                },
                {
                    "a": "ciągniecie",
                    "q": "тя́нете"
                },
                {
                    "a": "ciągną",
                    "q": "тянут"
                },
                {
                    "a": "pisać",
                    "q": "писать"
                },
                {
                    "a": "piszę",
                    "q": "пишу"
                },
                {
                    "a": "piszesz",
                    "q": "пишешь"
                },
                {
                    "a": "pisze",
                    "q": "пишет"
                },
                {
                    "a": "piszemy",
                    "q": "пишем"
                },
                {
                    "a": "piszecie",
                    "q": "пишете"
                },
                {
                    "a": "piszą",
                    "q": "пишут"
                },
                {
                    "a": "istnieć",
                    "q": "существовать"
                },
                {
                    "a": "istnieję",
                    "q": "существую"
                },
                {
                    "a": "istniejesz",
                    "q": "существуешь"
                },
                {
                    "a": "istnieje",
                    "q": "существует"
                },
                {
                    "a": "istniejemy",
                    "q": "существуем"
                },
                {
                    "a": "istniejecie",
                    "q": "существуете"
                },
                {
                    "a": "istnieją",
                    "q": "существуют"
                },
                {
                    "a": "chcieć",
                    "q": "хотеть"
                },
                {
                    "a": "chcę",
                    "q": "хочу"
                },
                {
                    "a": "chcesz",
                    "q": "хочешь"
                },
                {
                    "a": "chce",
                    "q": "хочет"
                },
                {
                    "a": "chcemy",
                    "q": "хотим"
                },
                {
                    "a": "chcecie",
                    "q": "хотите"
                },
                {
                    "a": "chcą",
                    "q": "хотят"
                },
                {
                    "a": "kłamać",
                    "q": "врать"
                },
                {
                    "a": "kłamię",
                    "q": "вру"
                },
                {
                    "a": "kłamiesz",
                    "q": "врешь"
                },
                {
                    "a": "kłamie",
                    "q": "врет"
                },
                {
                    "a": "kłamiemy",
                    "q": "врем"
                },
                {
                    "a": "kłamiecie",
                    "q": "врете"
                },
                {
                    "a": "kłamią",
                    "q": "врут"
                },
                {
                    "a": "kąpać się",
                    "q": "купаться"
                },
                {
                    "a": "kąpię się",
                    "q": "купаюсь"
                },
                {
                    "a": "kąpiesz się",
                    "q": "купаешься"
                },
                {
                    "a": "kąpie się",
                    "q": "купается"
                },
                {
                    "a": "kąpiemy się",
                    "q": "купаемся"
                },
                {
                    "a": "kąpiecie się",
                    "q": "купаетесь"
                },
                {
                    "a": "kąpią się",
                    "q": "купаются"
                }
            ]
        },

        {
            "id": "verbsI-1",
            "name": "Глаголы I спряжения, ч.2",
            "description": "Глаголы I спряжения с чередованием в основе. Инфинитив и 6 форм настоящего времени.\n14 глаголов.",
            "tags": ["глаголы", "грамматика"],
            "testable": true,
            "builtIn": true,
            "content": [
        {
            "a": "paść",
            "q": "пасти"
        },
        {
            "a": "pasę",
            "q": "пасу"
        },
        {
            "a": "pasiesz",
            "q": "пасешь"
        },
        {
            "a": "pasie",
            "q": "пасет"
        },
        {
            "a": "pasiemy",
            "q": "пасем"
        },
        {
            "a": "pasiecie",
            "q": "пасете"
        },
        {
            "a": "pasą",
            "q": "пасут"
        },
        {
            "a": "gryźć",
            "q": "грызть"
        },
        {
            "a": "gryzę",
            "q": "грызу"
        },
        {
            "a": "gryziesz",
            "q": "грызешь"
        },
        {
            "a": "gryzie",
            "q": "грызет"
        },
        {
            "a": "gryziemy",
            "q": "грызем"
        },
        {
            "a": "gryziecie",
            "q": "грызете"
        },
        {
            "a": "gryzą",
            "q": "грызут"
        },
        {
            "a": "nieść",
            "q": "нести"
        },
        {
            "a": "niosę",
            "q": "несу"
        },
        {
            "a": "niesiesz",
            "q": "несешь"
        },
        {
            "a": "niesie",
            "q": "несет"
        },
        {
            "a": "niesiemy",
            "q": "несем"
        },
        {
            "a": "niesiecie",
            "q": "несете"
        },
        {
            "a": "niosą",
            "q": "несут"
        },
        {
            "a": "pleść",
            "q": "плести"
        },
        {
            "a": "plotę",
            "q": "плету"
        },
        {
            "a": "pleciesz",
            "q": "плетешь"
        },
        {
            "a": "plecie",
            "q": "плетет"
        },
        {
            "a": "pleciemy",
            "q": "плетем"
        },
        {
            "a": "pleciecie",
            "q": "плетете"
        },
        {
            "a": "plotą",
            "q": "плетут"
        },
        {
            "a": "wieźć",
            "q": "везти"
        },
        {
            "a": "wiozę",
            "q": "везу"
        },
        {
            "a": "wieziesz",
            "q": "везешь"
        },
        {
            "a": "wiezie",
            "q": "везет"
        },
        {
            "a": "wieziemy",
            "q": "везем"
        },
        {
            "a": "wieziecie",
            "q": "везете"
        },
        {
            "a": "wiozą",
            "q": "везут"
        },
        {
            "a": "iść",
            "q": "идти"
        },
        {
            "a": "idę",
            "q": "иду"
        },
        {
            "a": "idziesz",
            "q": "идешь"
        },
        {
            "a": "idzie",
            "q": "идет"
        },
        {
            "a": "idziemy",
            "q": "идем"
        },
        {
            "a": "idziecie",
            "q": "идете"
        },
        {
            "a": "idą",
            "q": "идут"
        },
        {
            "a": "jechać",
            "q": "ехать"
        },
        {
            "a": "jadę",
            "q": "еду"
        },
        {
            "a": "jedziesz",
            "q": "едешь"
        },
        {
            "a": "jedzie",
            "q": "едет"
        },
        {
            "a": "jedziemy",
            "q": "едем"
        },
        {
            "a": "jedziecie",
            "q": "едете"
        },
        {
            "a": "jadą",
            "q": "едут"
        },
        {
            "a": "móc",
            "q": "мочь"
        },
        {
            "a": "mogę",
            "q": "могу"
        },
        {
            "a": "możesz",
            "q": "можешь"
        },
        {
            "a": "może",
            "q": "может"
        },
        {
            "a": "możemy",
            "q": "можем"
        },
        {
            "a": "możecie",
            "q": "можете"
        },
        {
            "a": "mogą",
            "q": "могут"
        },
        {
            "a": "piec",
            "q": "печь"
        },
        {
            "a": "piekę",
            "q": "пеку"
        },
        {
            "a": "pieczesz",
            "q": "печешь"
        },
        {
            "a": "piecze",
            "q": "печет"
        },
        {
            "a": "pieczemy",
            "q": "печем"
        },
        {
            "a": "pieczecie",
            "q": "печете"
        },
        {
            "a": "pieką",
            "q": "пекут"
        },
        {
            "a": "wlec",
            "q": "волочить"
        },
        {
            "a": "wlokę",
            "q": "волоку"
        },
        {
            "a": "wleczesz",
            "q": "волочешь"
        },
        {
            "a": "wlecze",
            "q": "волочет"
        },
        {
            "a": "wleczemy",
            "q": "волочим"
        },
        {
            "a": "wleczecie",
            "q": "воло́чите"
        },
        {
            "a": "wloką",
            "q": "волокут"
        },
        {
            "a": "brać",
            "q": "брать"
        },
        {
            "a": "biorę",
            "q": "беру"
        },
        {
            "a": "bierzesz",
            "q": "берешь"
        },
        {
            "a": "bierze",
            "q": "берет"
        },
        {
            "a": "bierzemy",
            "q": "берем"
        },
        {
            "a": "bierzecie",
            "q": "берете"
        },
        {
            "a": "biorą",
            "q": "берут"
        },
        {
            "a": "prać",
            "q": "стирать"
        },
        {
            "a": "piorę",
            "q": "стираю"
        },
        {
            "a": "pierzesz",
            "q": "стираешь"
        },
        {
            "a": "pierze",
            "q": "стирает"
        },
        {
            "a": "pierzemy",
            "q": "стираем"
        },
        {
            "a": "pierzecie",
            "q": "стираете"
        },
        {
            "a": "piorą",
            "q": "стирают"
        },
        {
            "a": "trzeć",
            "q": "тереть"
        },
        {
            "a": "trę",
            "q": "тру"
        },
        {
            "a": "trzesz",
            "q": "трешь"
        },
        {
            "a": "trze",
            "q": "трет"
        },
        {
            "a": "trzemy",
            "q": "трем"
        },
        {
            "a": "trzecie",
            "q": "трете"
        },
        {
            "a": "trą",
            "q": "трут"
        },
        {
            "a": "umrzeć",
            "q": "умереть"
        },
        {
            "a": "umrę",
            "q": "умру"
        },
        {
            "a": "umrzesz",
            "q": "умрешь"
        },
        {
            "a": "umrze",
            "q": "умрет"
        },
        {
            "a": "umrzemy",
            "q": "умрем"
        },
        {
            "a": "umrzecie",
            "q": "умрете"
        },
        {
            "a": "umrą",
            "q": "умрут"
        }
    ]
        },

        {
            "id": "verbsII",
            "name": "Глаголы II спряжения",
            "description": "Некоторые глаголы II спряжения, в т. ч. с чередованием согласных. Инфинитив и 6 форм настоящего времени.\n10 глаголов.",
            "tags": ["глаголы", "грамматика"],
            "testable": true,
            "builtIn": true,
            "content": [
                {
                    "a": "mówić",
                    "q": "говорить"
                },
                {
                    "a": "mówię",
                    "q": "говорю"
                },
                {
                    "a": "mówisz",
                    "q": "говоришь"
                },
                {
                    "a": "mówi",
                    "q": "говорит"
                },
                {
                    "a": "mówimy",
                    "q": "говорим"
                },
                {
                    "a": "mówicie",
                    "q": "говорите"
                },
                {
                    "a": "mówią",
                    "q": "говорят"
                },
                {
                    "a": "uczyć się",
                    "q": "учиться"
                },
                {
                    "a": "uczę się",
                    "q": "учусь"
                },
                {
                    "a": "uczysz się",
                    "q": "учишься"
                },
                {
                    "a": "uczy się",
                    "q": "учится"
                },
                {
                    "a": "uczymy się",
                    "q": "учимся"
                },
                {
                    "a": "uczycie się",
                    "q": "у́читесь"
                },
                {
                    "a": "uczą się",
                    "q": "учатся"
                },
                {
                    "a": "robić",
                    "q": "делать"
                },
                {
                    "a": "robię",
                    "q": "делаю"
                },
                {
                    "a": "robisz",
                    "q": "делаешь"
                },
                {
                    "a": "robi",
                    "q": "делает"
                },
                {
                    "a": "robimy",
                    "q": "делаем"
                },
                {
                    "a": "robicie",
                    "q": "делаете"
                },
                {
                    "a": "robią",
                    "q": "делают"
                },
                {
                    "a": "słyszeć",
                    "q": "слышать"
                },
                {
                    "a": "słyszę",
                    "q": "слышу"
                },
                {
                    "a": "słyszysz",
                    "q": "слышишь"
                },
                {
                    "a": "słyszy",
                    "q": "слышит"
                },
                {
                    "a": "słyszymy",
                    "q": "слышим"
                },
                {
                    "a": "słyszycie",
                    "q": "слышите"
                },
                {
                    "a": "słyszą",
                    "q": "слышат"
                },
                {
                    "a": "prosić",
                    "q": "просить"
                },
                {
                    "a": "proszę",
                    "q": "прошу"
                },
                {
                    "a": "prosisz",
                    "q": "просишь"
                },
                {
                    "a": "prosi",
                    "q": "просит"
                },
                {
                    "a": "prosimy",
                    "q": "просим"
                },
                {
                    "a": "prosicie",
                    "q": "про́сите"
                },
                {
                    "a": "proszą",
                    "q": "просят"
                },
                {
                    "a": "grozić",
                    "q": "грозить"
                },
                {
                    "a": "grożę",
                    "q": "грожу"
                },
                {
                    "a": "grozisz",
                    "q": "грозишь"
                },
                {
                    "a": "grozi",
                    "q": "грозит"
                },
                {
                    "a": "grozimy",
                    "q": "грозим"
                },
                {
                    "a": "grozicie",
                    "q": "грозите"
                },
                {
                    "a": "grożą",
                    "q": "грозят"
                },
                {
                    "a": "chodzić",
                    "q": "ходить"
                },
                {
                    "a": "chodzę",
                    "q": "хожу"
                },
                {
                    "a": "chodzisz",
                    "q": "ходишь"
                },
                {
                    "a": "chodzi",
                    "q": "ходит"
                },
                {
                    "a": "chodzimy",
                    "q": "ходим"
                },
                {
                    "a": "chodzicie",
                    "q": "хо́дите"
                },
                {
                    "a": "chodzą",
                    "q": "ходят"
                },
                {
                    "a": "widzieć",
                    "q": "видеть"
                },
                {
                    "a": "widzę",
                    "q": "вижу"
                },
                {
                    "a": "widzisz",
                    "q": "видишь"
                },
                {
                    "a": "widzi",
                    "q": "видит"
                },
                {
                    "a": "widzimy",
                    "q": "видим"
                },
                {
                    "a": "widzicie",
                    "q": "видите"
                },
                {
                    "a": "widzą",
                    "q": "видят"
                },
                {
                    "a": "burzyć",
                    "q": "разрушать"
                },
                {
                    "a": "burzę",
                    "q": "разрушаю"
                },
                {
                    "a": "burzysz",
                    "q": "разрушаешь"
                },
                {
                    "a": "burzy",
                    "q": "разрушает"
                },
                {
                    "a": "burzymy",
                    "q": "разрушаем"
                },
                {
                    "a": "burzycie",
                    "q": "разрушаете"
                },
                {
                    "a": "burzą",
                    "q": "разрушают"
                },
                {
                    "a": "tańczyć",
                    "q": "танцевать"
                },
                {
                    "a": "tańczę",
                    "q": "танцую"
                },
                {
                    "a": "tańczysz",
                    "q": "танцуешь"
                },
                {
                    "a": "tańczy",
                    "q": "танцует"
                },
                {
                    "a": "tańczymy",
                    "q": "танцуем"
                },
                {
                    "a": "tańczycie",
                    "q": "танцуете"
                },
                {
                    "a": "tańczą",
                    "q": "танцуют"
                },
                {
                    "a": "jeździć",
                    "q": "ездить"
                },
                {
                    "a": "jeżdżę",
                    "q": "езжу"
                },
                {
                    "a": "jeździsz",
                    "q": "ездишь"
                },
                {
                    "a": "jeździ",
                    "q": "ездит"
                },
                {
                    "a": "jeździmy",
                    "q": "ездим"
                },
                {
                    "a": "jeździcie",
                    "q": "ездите"
                },
                {
                    "a": "jeżdżą",
                    "q": "ездят"
                }
            ]
        },

        {
            "id": "verbsIII",
            "name": "Глаголы III спряжения",
            "description": "Некоторые глаголы III спряжения. Инфинитив и 6 форм настоящего времени.\n11 глаголов.",
            "tags": ["глаголы", "грамматика"],
            "testable": true,
            "builtIn": true,
            "content": [
                {
                    "a": "mieć",
                    "q": "иметь"
                },
                {
                    "a": "mam",
                    "q": "имею"
                },
                {
                    "a": "masz",
                    "q": "имеешь"
                },
                {
                    "a": "ma",
                    "q": "имеет"
                },
                {
                    "a": "mamy",
                    "q": "имеем"
                },
                {
                    "a": "macie",
                    "q": "имеете"
                },
                {
                    "a": "mają",
                    "q": "имеют"
                },
                {
                    "a": "nazywać cię",
                    "q": "называться"
                },
                {
                    "a": "nazywam się",
                    "q": "называюсь"
                },
                {
                    "a": "nazywasz się",
                    "q": "называешься"
                },
                {
                    "a": "nazywa się",
                    "q": "называется"
                },
                {
                    "a": "nazywamy się",
                    "q": "называемся"
                },
                {
                    "a": "nazywacie się",
                    "q": "называетесь"
                },
                {
                    "a": "nazywają się",
                    "q": "называются"
                },
                {
                    "a": "znać",
                    "q": "знать"
                },
                {
                    "a": "znam",
                    "q": "знаю"
                },
                {
                    "a": "znasz",
                    "q": "знаешь"
                },
                {
                    "a": "zna",
                    "q": "знает"
                },
                {
                    "a": "znamy",
                    "q": "знаем"
                },
                {
                    "a": "znacie",
                    "q": "знаете"
                },
                {
                    "a": "znają",
                    "q": "знают"
                },
                {
                    "a": "biegać",
                    "q": "бегать"
                },
                {
                    "a": "biegam",
                    "q": "бегаю"
                },
                {
                    "a": "biegasz",
                    "q": "бегаешь"
                },
                {
                    "a": "biega",
                    "q": "бегает"
                },
                {
                    "a": "biegamy",
                    "q": "бегаем"
                },
                {
                    "a": "biegacie",
                    "q": "бегаете"
                },
                {
                    "a": "biegają",
                    "q": "бегают"
                },
                {
                    "a": "grać",
                    "q": "играть"
                },
                {
                    "a": "gram",
                    "q": "играю"
                },
                {
                    "a": "grasz",
                    "q": "играешь"
                },
                {
                    "a": "gra",
                    "q": "играет"
                },
                {
                    "a": "gramy",
                    "q": "играем"
                },
                {
                    "a": "gracie",
                    "q": "играете"
                },
                {
                    "a": "grają",
                    "q": "играют"
                },
                {
                    "a": "czytać",
                    "q": "читать"
                },
                {
                    "a": "czytam",
                    "q": "читаю"
                },
                {
                    "a": "czytasz",
                    "q": "читаешь"
                },
                {
                    "a": "czyta",
                    "q": "читает"
                },
                {
                    "a": "czytamy",
                    "q": "читаем"
                },
                {
                    "a": "czytacie",
                    "q": "читаете"
                },
                {
                    "a": "czytają",
                    "q": "читают"
                },
                {
                    "a": "czekać",
                    "q": "ждать"
                },
                {
                    "a": "czekam",
                    "q": "жду"
                },
                {
                    "a": "czekasz",
                    "q": "ждешь"
                },
                {
                    "a": "czeka",
                    "q": "ждет"
                },
                {
                    "a": "czekamy",
                    "q": "ждем"
                },
                {
                    "a": "czekacie",
                    "q": "ждете"
                },
                {
                    "a": "czekają",
                    "q": "ждут"
                },
                {
                    "a": "dać",
                    "q": "дать"
                },
                {
                    "a": "dam",
                    "q": "даю"
                },
                {
                    "a": "dasz",
                    "q": "даешь"
                },
                {
                    "a": "da",
                    "q": "дает"
                },
                {
                    "a": "damy",
                    "q": "даем"
                },
                {
                    "a": "dacie",
                    "q": "даете"
                },
                {
                    "a": "dadzą",
                    "q": "дают"
                },
                {
                    "a": "kochać",
                    "q": "любить"
                },
                {
                    "a": "kocham",
                    "q": "люблю"
                },
                {
                    "a": "kochasz",
                    "q": "любишь"
                },
                {
                    "a": "kocha",
                    "q": "любит"
                },
                {
                    "a": "kochamy",
                    "q": "любим"
                },
                {
                    "a": "kochacie",
                    "q": "лю́бите"
                },
                {
                    "a": "kochają",
                    "q": "любят"
                },
                {
                    "a": "pływać",
                    "q": "плавать"
                },
                {
                    "a": "pływam",
                    "q": "плаваю"
                },
                {
                    "a": "pływasz",
                    "q": "плаваешь"
                },
                {
                    "a": "pływa",
                    "q": "плавает"
                },
                {
                    "a": "pływamy",
                    "q": "плаваем"
                },
                {
                    "a": "pływacie",
                    "q": "плаваете"
                },
                {
                    "a": "pływają",
                    "q": "плавают"
                },
                {
                    "a": "żegnać się",
                    "q": "прощаться"
                },
                {
                    "a": "żegnam się",
                    "q": "прощаюсь"
                },
                {
                    "a": "żegnasz się",
                    "q": "прощаешься"
                },
                {
                    "a": "żegna się",
                    "q": "прощается"
                },
                {
                    "a": "żegnamy się",
                    "q": "прощаемся"
                },
                {
                    "a": "żegnacie się",
                    "q": "прощаетесь"
                },
                {
                    "a": "żegnają się",
                    "q": "прощаются"
                }
            ]
        },

        {
            "id": "verbsIV",
            "name": "Глаголы IV спряжения",
            "description": "Некоторые глаголы IV спряжения. Инфинитив и 6 форм настоящего времени.\n5 глаголов.",
            "tags": ["глаголы", "грамматика"],
            "testable": true,
            "builtIn": true,
            "content": [
                {
                    "a": "jeść",
                    "q": "есть"
                },
                {
                    "a": "jem",
                    "q": "ем"
                },
                {
                    "a": "jesz",
                    "q": "ешь"
                },
                {
                    "a": "je",
                    "q": "ест"
                },
                {
                    "a": "jemy",
                    "q": "едим"
                },
                {
                    "a": "jecie",
                    "q": "едите"
                },
                {
                    "a": "jedzą",
                    "q": "едят"
                },
                {
                    "a": "wiedzieć",
                    "q": "знать"
                },
                {
                    "a": "wiem",
                    "q": "знаю"
                },
                {
                    "a": "wiesz",
                    "q": "знаешь"
                },
                {
                    "a": "wie",
                    "q": "знает"
                },
                {
                    "a": "wiemy",
                    "q": "знаем"
                },
                {
                    "a": "wiecie",
                    "q": "знаете"
                },
                {
                    "a": "wiedzą",
                    "q": "знают"
                },
                {
                    "a": "rozumieć",
                    "q": "понимать"
                },
                {
                    "a": "rozumiem",
                    "q": "понимаю"
                },
                {
                    "a": "rozumiesz",
                    "q": "понимаешь"
                },
                {
                    "a": "rozumie",
                    "q": "понимает"
                },
                {
                    "a": "rozumiemy",
                    "q": "понимаем"
                },
                {
                    "a": "rozumiecie",
                    "q": "понимаете"
                },
                {
                    "a": "rozumieją",
                    "q": "понимают"
                },
                {
                    "a": "śmieć",
                    "q": "сметь"
                },
                {
                    "a": "śmiem",
                    "q": "смею"
                },
                {
                    "a": "śmiesz",
                    "q": "смеешь"
                },
                {
                    "a": "śmie",
                    "q": "смеет"
                },
                {
                    "a": "śmiemy",
                    "q": "смеем"
                },
                {
                    "a": "śmiecie",
                    "q": "смеете"
                },
                {
                    "a": "śmieją",
                    "q": "смеют"
                },
                {
                    "a": "umieć",
                    "q": "уметь"
                },
                {
                    "a": "umiem",
                    "q": "умею"
                },
                {
                    "a": "umiesz",
                    "q": "умеешь"
                },
                {
                    "a": "umie",
                    "q": "умеет"
                },
                {
                    "a": "umiemy",
                    "q": "умеем"
                },
                {
                    "a": "umiecie",
                    "q": "умеете"
                },
                {
                    "a": "umieją",
                    "q": "умеют"
                }
            ]
        },

        {
            "id": "food1",
            "name": "Пища",
            "description": "Существительные и прилагательные, имеющие отношение к пище.",
            "tags": ["существительные", "прилагательные", "словарный запас"],
            "testable": true,
            "builtIn": true,
            "content": [
                {
                    "a": "pieczywo",
                    "q": "хлебoбулочные изделия"
                },
                {
                    "a": "chleb",
                    "q": "хлеб"
                },
                {
                    "a": "chleb razowy",
                    "q": "ржаной хлеб"
                },
                {
                    "a": "ciemne pieczywo",
                    "q": "черный хлеб"
                },
                {
                    "a": "biały chleb",
                    "q": "белый хлеб"
                },
                {
                    "a": "bułka",
                    "q": "булка (сдоба)"
                },
                {
                    "a": "bagietka",
                    "q": "багет"
                },
                {
                    "a": "sucharek",
                    "q": "сухарь"
                },
                {
                    "a": "obwarzanek",
                    "q": "бублик, баранка"
                },
                {
                    "a": "drożdżówki",
                    "q": "сдобные булочки"
                },
                {
                    "a": "mąka",
                    "q": "манка"
                },
                {
                    "a": "kasza gryczana",
                    "q": "гречневая каша"
                },
                {
                    "a": "kasza jaglana",
                    "q": "пшенная каша"
                },
                {
                    "a": "kasza manna",
                    "q": "манная каша"
                },
                {
                    "a": "ryż",
                    "q": "рис"
                },
                {
                    "a": "makaron",
                    "q": "макароны, лапша"
                },
                {
                    "a": "płatki",
                    "q": "хлопья"
                },
                {
                    "a": "wieprzowina",
                    "q": "свинина"
                },
                {
                    "a": "wołowina",
                    "q": "говядина"
                },
                {
                    "a": "cielęcina",
                    "q": "телятина"
                },
                {
                    "a": "baranina",
                    "q": "баранина"
                },
                {
                    "a": "schab",
                    "q": "корейка"
                },
                {
                    "a": "żeberka",
                    "q": "ребрышки"
                },
                {
                    "a": "udko kurczaka",
                    "q": "куриная ножка"
                },
                {
                    "a": "mielone",
                    "q": "фарш"
                },
                {
                    "a": "kurczak",
                    "q": "цыпленок"
                },
                {
                    "a": "kura",
                    "q": "курица"
                },
                {
                    "a": "kaczka",
                    "q": "утка"
                },
                {
                    "a": "gęś",
                    "q": "гусь"
                },
                {
                    "a": "indyk",
                    "q": "индейка"
                },
                {
                    "a": "kiełbasa",
                    "q": "колбаса"
                },
                {
                    "a": "parówka",
                    "q": "сосиска"
                },
                {
                    "a": "serdelek",
                    "q": "сарделька"
                },
                {
                    "a": "szynka",
                    "q": "ветчина"
                },
                {
                    "a": "polędwica",
                    "q": "вырезка"
                },
                {
                    "a": "boczek",
                    "q": "грудинка"
                },
                {
                    "a": "karp",
                    "q": "карп"
                },
                {
                    "a": "łosoś",
                    "q": "лосось"
                },
                {
                    "a": "dorsz",
                    "q": "треска"
                },
                {
                    "a": "pstrąg",
                    "q": "форель"
                },
                {
                    "a": "śledź",
                    "q": "сельдь"
                },
                {
                    "a": "tuńczyk",
                    "q": "тунец"
                },
                {
                    "a": "morska",
                    "q": "морская"
                },
                {
                    "a": "mrożona",
                    "q": "мороженая"
                },
                {
                    "a": "wędzona",
                    "q": "копченая"
                },
                {
                    "a": "paluszki rybne",
                    "q": "рыбные палочки"
                },
                {
                    "a": "krewetki",
                    "q": "креветки"
                },
                {
                    "a": "ostryga",
                    "q": "устрица"
                },
                {
                    "a": "filety rybne",
                    "q": "рыбное филе"
                },
                {
                    "a": "mleko",
                    "q": "молоко"
                },
                {
                    "a": "kefir",
                    "q": "кефир"
                },
                {
                    "a": "śmietana",
                    "q": "сметана, сливки"
                },
                {
                    "a": "jogurt",
                    "q": "йогурт"
                }
            ]
        }
    ]
});
define('app',
    [
        'Chitin',
        'Decks',
        'Preferences',
        'Widget/Root',
        'locale/locale',
        'PredefinedDecks'
    ],

    function (Chitin, Decks, Preferences, WidgetRoot, locale, PredefinedDecks) {
        

        var OmniCard = Chitin.Application.extend({
            defaults: {
                immediateStart: false,
                rootNode: '.js-root',
                rootWidget: WidgetRoot
            },

            initialize: function (options) {
                OmniCard.__super__.initialize.call(this, options);

                this.prefs = new this.params.prefs;
                this.pair = this.prefs.getPair();

                this._getLang();
                this.locale = locale[this.lang] || locale.en;

                if (this.pair) {
                    this.prepareDecks(PredefinedDecks[this.pair]);
                }

                this.on('languagesChosen', this.onLang);

                this.start();
            },

            prepareDecks: function (decks) {
                var key = 'deck' + '.' + this.pair;

                this.decks = new this.params.deckClass({
                    key: key,
                    attrs: decks
                });
            },

            onLang: function (data) {
                this.pair = data.native + '-' + data.learn;

                this.prefs.setPair(data);
                this.prefs.set({'interface': data.interface});
                this.lang = data.interface;
                this.locale = locale[this.lang];

                this.pair = this.prefs.getPair();

                this.prepareDecks(PredefinedDecks[this.pair]);

                this.trigger('startWork');
            },

            reset: function () {
                this.prefs.reset({silent: true});
                this.decks.reset({silent: true});

                window.location.reload();
            },

            createDeck: function () {
                return this.params.deckClass.createDeck()
            },

            _getLang: function () {
                var lang = this.prefs.get('interface') || window.navigator.userLanguage || window.navigator.language;

                if (lang.indexOf('-') > -1) {
                    lang = lang.split('-')[0]
                }

                this.lang = lang || 'en';
            },

            hideDeck: function (deckId) {
                this.prefs.hideDeck(deckId);
            },
            unhideDeck: function (deckId) {
                this.prefs.unhideDeck(deckId);
            }
        });

        // start the engine
        $(function () {
            window.app = new OmniCard({
                deckClass: Decks,
                prefs: Preferences
            });
        });
    }
);